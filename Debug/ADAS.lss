
ADAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000568c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  0000568c  00005720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080014e  0080014e  0000580e  2**0
                  ALLOC
  3 .stab         00004fb0  00000000  00000000  00005810  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001628  00000000  00000000  0000a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bde8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ebcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fd69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010537  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__vector_1>
       8:	0c 94 86 20 	jmp	0x410c	; 0x410c <__vector_2>
       c:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c5 29 	jmp	0x538a	; 0x538a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 36       	cpi	r26, 0x6A	; 106
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <main>
      8a:	0c 94 44 2b 	jmp	0x5688	; 0x5688 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e3       	ldi	r26, 0x32	; 50
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 2b 	jmp	0x566a	; 0x566a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 2b 	jmp	0x566a	; 0x566a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e3       	ldi	r24, 0x32	; 50
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 35 2b 	jmp	0x566a	; 0x566a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 35 2b 	jmp	0x566a	; 0x566a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 35 2b 	jmp	0x566a	; 0x566a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <A_CSS_void_Init>:
void  A_LCD_void_FourthState(void);
void APP_Disply_Watch(void);
void APP_SecoundCounter(void);
/* Initialization function */
void A_CSS_void_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6c 97       	sbiw	r28, 0x1c	; 28
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Global interrupt: Enable */
	M_GIE_Void_GlobalIntEnable();
     b5a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <M_GIE_Void_GlobalIntEnable>

	/* Enable EXTINT Channel 1: POSITION_PB_INTERRUPT defined as INT1_CHANNEL */
	M_EXTINT_Void_EXTINTInit(POSITION_PB_INTERRUPT);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <M_EXTINT_Void_EXTINTInit>

	/* CallBack Function for EXTINT Channel 1: POSITION_PB_INTERRUPT defined as INT1_CHANNEL
	  A_CSS_Void_GearBox_Handle: function will be invoked in ISR for INT1  */
	M_EXTINT_Void_SetCallBack(POSITION_PB_INTERRUPT,&A_CSS_Void_GearBox_Handle);
     b64:	2c ef       	ldi	r18, 0xFC	; 252
     b66:	38 e1       	ldi	r19, 0x18	; 24
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	b9 01       	movw	r22, r18
     b6c:	0e 94 20 20 	call	0x4040	; 0x4040 <M_EXTINT_Void_SetCallBack>

	/* LCD Initialize and Display initial state: CCS=OFF, R-N-D=N */
	LCD_voidInit();
     b70:	0e 94 a8 22 	call	0x4550	; 0x4550 <LCD_voidInit>
	LCD_voidGoToXY(LINE_1,4);
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	64 e0       	ldi	r22, 0x04	; 4
     b78:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a0 ea       	ldi	r26, 0xA0	; 160
     b82:	b1 e4       	ldi	r27, 0x41	; 65
     b84:	89 8f       	std	Y+25, r24	; 0x19
     b86:	9a 8f       	std	Y+26, r25	; 0x1a
     b88:	ab 8f       	std	Y+27, r26	; 0x1b
     b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	69 8d       	ldd	r22, Y+25	; 0x19
     b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4a e7       	ldi	r20, 0x7A	; 122
     b9a:	55 e4       	ldi	r21, 0x45	; 69
     b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	8d 8b       	std	Y+21, r24	; 0x15
     ba6:	9e 8b       	std	Y+22, r25	; 0x16
     ba8:	af 8b       	std	Y+23, r26	; 0x17
     baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bac:	6d 89       	ldd	r22, Y+21	; 0x15
     bae:	7e 89       	ldd	r23, Y+22	; 0x16
     bb0:	8f 89       	ldd	r24, Y+23	; 0x17
     bb2:	98 8d       	ldd	r25, Y+24	; 0x18
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	2c f4       	brge	.+10     	; 0xbce <A_CSS_void_Init+0x88>
		__ticks = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9c 8b       	std	Y+20, r25	; 0x14
     bca:	8b 8b       	std	Y+19, r24	; 0x13
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <A_CSS_void_Init+0x106>
	else if (__tmp > 65535)
     bce:	6d 89       	ldd	r22, Y+21	; 0x15
     bd0:	7e 89       	ldd	r23, Y+22	; 0x16
     bd2:	8f 89       	ldd	r24, Y+23	; 0x17
     bd4:	98 8d       	ldd	r25, Y+24	; 0x18
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	4c f5       	brge	.+82     	; 0xc38 <A_CSS_void_Init+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	69 8d       	ldd	r22, Y+25	; 0x19
     be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	9c 8b       	std	Y+20, r25	; 0x14
     c0c:	8b 8b       	std	Y+19, r24	; 0x13
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <A_CSS_void_Init+0xe8>
     c10:	80 e9       	ldi	r24, 0x90	; 144
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	9a 8b       	std	Y+18, r25	; 0x12
     c16:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c18:	89 89       	ldd	r24, Y+17	; 0x11
     c1a:	9a 89       	ldd	r25, Y+18	; 0x12
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <A_CSS_void_Init+0xd6>
     c20:	9a 8b       	std	Y+18, r25	; 0x12
     c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	8b 89       	ldd	r24, Y+19	; 0x13
     c26:	9c 89       	ldd	r25, Y+20	; 0x14
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9c 8b       	std	Y+20, r25	; 0x14
     c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2e:	8b 89       	ldd	r24, Y+19	; 0x13
     c30:	9c 89       	ldd	r25, Y+20	; 0x14
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	69 f7       	brne	.-38     	; 0xc10 <A_CSS_void_Init+0xca>
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <A_CSS_void_Init+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c38:	6d 89       	ldd	r22, Y+21	; 0x15
     c3a:	7e 89       	ldd	r23, Y+22	; 0x16
     c3c:	8f 89       	ldd	r24, Y+23	; 0x17
     c3e:	98 8d       	ldd	r25, Y+24	; 0x18
     c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9c 8b       	std	Y+20, r25	; 0x14
     c4a:	8b 8b       	std	Y+19, r24	; 0x13
     c4c:	8b 89       	ldd	r24, Y+19	; 0x13
     c4e:	9c 89       	ldd	r25, Y+20	; 0x14
     c50:	98 8b       	std	Y+16, r25	; 0x10
     c52:	8f 87       	std	Y+15, r24	; 0x0f
     c54:	8f 85       	ldd	r24, Y+15	; 0x0f
     c56:	98 89       	ldd	r25, Y+16	; 0x10
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <A_CSS_void_Init+0x112>
     c5c:	98 8b       	std	Y+16, r25	; 0x10
     c5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_voidWriteString("  Welcome ");
     c60:	80 e6       	ldi	r24, 0x60	; 96
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	aa e7       	ldi	r26, 0x7A	; 122
     c6e:	b4 e4       	ldi	r27, 0x44	; 68
     c70:	8b 87       	std	Y+11, r24	; 0x0b
     c72:	9c 87       	std	Y+12, r25	; 0x0c
     c74:	ad 87       	std	Y+13, r26	; 0x0d
     c76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c78:	6b 85       	ldd	r22, Y+11	; 0x0b
     c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a e7       	ldi	r20, 0x7A	; 122
     c86:	55 e4       	ldi	r21, 0x45	; 69
     c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	8f 83       	std	Y+7, r24	; 0x07
     c92:	98 87       	std	Y+8, r25	; 0x08
     c94:	a9 87       	std	Y+9, r26	; 0x09
     c96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c98:	6f 81       	ldd	r22, Y+7	; 0x07
     c9a:	78 85       	ldd	r23, Y+8	; 0x08
     c9c:	89 85       	ldd	r24, Y+9	; 0x09
     c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cac:	88 23       	and	r24, r24
     cae:	2c f4       	brge	.+10     	; 0xcba <A_CSS_void_Init+0x174>
		__ticks = 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	8d 83       	std	Y+5, r24	; 0x05
     cb8:	3f c0       	rjmp	.+126    	; 0xd38 <A_CSS_void_Init+0x1f2>
	else if (__tmp > 65535)
     cba:	6f 81       	ldd	r22, Y+7	; 0x07
     cbc:	78 85       	ldd	r23, Y+8	; 0x08
     cbe:	89 85       	ldd	r24, Y+9	; 0x09
     cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	3f ef       	ldi	r19, 0xFF	; 255
     cc6:	4f e7       	ldi	r20, 0x7F	; 127
     cc8:	57 e4       	ldi	r21, 0x47	; 71
     cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cce:	18 16       	cp	r1, r24
     cd0:	4c f5       	brge	.+82     	; 0xd24 <A_CSS_void_Init+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e2       	ldi	r20, 0x20	; 32
     ce0:	51 e4       	ldi	r21, 0x41	; 65
     ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	8d 83       	std	Y+5, r24	; 0x05
     cfa:	0f c0       	rjmp	.+30     	; 0xd1a <A_CSS_void_Init+0x1d4>
     cfc:	80 e9       	ldi	r24, 0x90	; 144
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	9c 83       	std	Y+4, r25	; 0x04
     d02:	8b 83       	std	Y+3, r24	; 0x03
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <A_CSS_void_Init+0x1c2>
     d0c:	9c 83       	std	Y+4, r25	; 0x04
     d0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d10:	8d 81       	ldd	r24, Y+5	; 0x05
     d12:	9e 81       	ldd	r25, Y+6	; 0x06
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	9e 83       	std	Y+6, r25	; 0x06
     d18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	69 f7       	brne	.-38     	; 0xcfc <A_CSS_void_Init+0x1b6>
     d22:	14 c0       	rjmp	.+40     	; 0xd4c <A_CSS_void_Init+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	78 85       	ldd	r23, Y+8	; 0x08
     d28:	89 85       	ldd	r24, Y+9	; 0x09
     d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9e 83       	std	Y+6, r25	; 0x06
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <A_CSS_void_Init+0x1fe>
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	/* Buttons Initialize: */

	KPD_voidInit();
     d4c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <KPD_voidInit>

	/* Buzzer Initialize: */
	H_Buzzer_Void_BuzzerInit();
     d50:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <H_Buzzer_Void_BuzzerInit>

	/* LEDs Initialize: */

	H_LED_Void_LedInit(PARKING_LED);
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	0e 94 26 28 	call	0x504c	; 0x504c <H_LED_Void_LedInit>

	H_LED_Void_LedInit(ALARM_LED);
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	0e 94 26 28 	call	0x504c	; 0x504c <H_LED_Void_LedInit>
	H_LED_Void_LedInit(GRN_LED);
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	0e 94 26 28 	call	0x504c	; 0x504c <H_LED_Void_LedInit>
	H_POt_Void_POTInit();
     d66:	0e 94 32 29 	call	0x5264	; 0x5264 <H_POt_Void_POTInit>

	M_Timer1_CTCMode_Init();
     d6a:	0e 94 89 29 	call	0x5312	; 0x5312 <M_Timer1_CTCMode_Init>

	M_Timer1_Void_SetCallBack(&APP_SecoundCounter);
     d6e:	8e eb       	ldi	r24, 0xBE	; 190
     d70:	99 e1       	ldi	r25, 0x19	; 25
     d72:	0e 94 77 29 	call	0x52ee	; 0x52ee <M_Timer1_Void_SetCallBack>
	/* Relay */
	M_DIO_Void_SetPinDirection(DIO_PORTC,DIO_PIN7,OUTPUT);
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	67 e0       	ldi	r22, 0x07	; 7
     d7a:	41 e0       	ldi	r20, 0x01	; 1
     d7c:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
}
     d80:	6c 96       	adiw	r28, 0x1c	; 28
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <A_ADAS_Void_KeyPadUpdate>:

u8 A_ADAS_Void_KeyPadUpdate(void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	a0 97       	sbiw	r28, 0x20	; 32
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	aa ef       	ldi	r26, 0xFA	; 250
     dac:	b3 e4       	ldi	r27, 0x43	; 67
     dae:	89 8f       	std	Y+25, r24	; 0x19
     db0:	9a 8f       	std	Y+26, r25	; 0x1a
     db2:	ab 8f       	std	Y+27, r26	; 0x1b
     db4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db6:	69 8d       	ldd	r22, Y+25	; 0x19
     db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a e7       	ldi	r20, 0x7A	; 122
     dc4:	55 e4       	ldi	r21, 0x45	; 69
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	8d 8b       	std	Y+21, r24	; 0x15
     dd0:	9e 8b       	std	Y+22, r25	; 0x16
     dd2:	af 8b       	std	Y+23, r26	; 0x17
     dd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dd6:	6d 89       	ldd	r22, Y+21	; 0x15
     dd8:	7e 89       	ldd	r23, Y+22	; 0x16
     dda:	8f 89       	ldd	r24, Y+23	; 0x17
     ddc:	98 8d       	ldd	r25, Y+24	; 0x18
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dea:	88 23       	and	r24, r24
     dec:	2c f4       	brge	.+10     	; 0xdf8 <A_ADAS_Void_KeyPadUpdate+0x66>
		__ticks = 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c 8b       	std	Y+20, r25	; 0x14
     df4:	8b 8b       	std	Y+19, r24	; 0x13
     df6:	3f c0       	rjmp	.+126    	; 0xe76 <A_ADAS_Void_KeyPadUpdate+0xe4>
	else if (__tmp > 65535)
     df8:	6d 89       	ldd	r22, Y+21	; 0x15
     dfa:	7e 89       	ldd	r23, Y+22	; 0x16
     dfc:	8f 89       	ldd	r24, Y+23	; 0x17
     dfe:	98 8d       	ldd	r25, Y+24	; 0x18
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	3f ef       	ldi	r19, 0xFF	; 255
     e04:	4f e7       	ldi	r20, 0x7F	; 127
     e06:	57 e4       	ldi	r21, 0x47	; 71
     e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	4c f5       	brge	.+82     	; 0xe62 <A_ADAS_Void_KeyPadUpdate+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e10:	69 8d       	ldd	r22, Y+25	; 0x19
     e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	51 e4       	ldi	r21, 0x41	; 65
     e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9c 8b       	std	Y+20, r25	; 0x14
     e36:	8b 8b       	std	Y+19, r24	; 0x13
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <A_ADAS_Void_KeyPadUpdate+0xc6>
     e3a:	80 e9       	ldi	r24, 0x90	; 144
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	9a 8b       	std	Y+18, r25	; 0x12
     e40:	89 8b       	std	Y+17, r24	; 0x11
     e42:	89 89       	ldd	r24, Y+17	; 0x11
     e44:	9a 89       	ldd	r25, Y+18	; 0x12
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <A_ADAS_Void_KeyPadUpdate+0xb4>
     e4a:	9a 8b       	std	Y+18, r25	; 0x12
     e4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4e:	8b 89       	ldd	r24, Y+19	; 0x13
     e50:	9c 89       	ldd	r25, Y+20	; 0x14
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	9c 8b       	std	Y+20, r25	; 0x14
     e56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e58:	8b 89       	ldd	r24, Y+19	; 0x13
     e5a:	9c 89       	ldd	r25, Y+20	; 0x14
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	69 f7       	brne	.-38     	; 0xe3a <A_ADAS_Void_KeyPadUpdate+0xa8>
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <A_ADAS_Void_KeyPadUpdate+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	6d 89       	ldd	r22, Y+21	; 0x15
     e64:	7e 89       	ldd	r23, Y+22	; 0x16
     e66:	8f 89       	ldd	r24, Y+23	; 0x17
     e68:	98 8d       	ldd	r25, Y+24	; 0x18
     e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9c 8b       	std	Y+20, r25	; 0x14
     e74:	8b 8b       	std	Y+19, r24	; 0x13
     e76:	8b 89       	ldd	r24, Y+19	; 0x13
     e78:	9c 89       	ldd	r25, Y+20	; 0x14
     e7a:	98 8b       	std	Y+16, r25	; 0x10
     e7c:	8f 87       	std	Y+15, r24	; 0x0f
     e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e80:	98 89       	ldd	r25, Y+16	; 0x10
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <A_ADAS_Void_KeyPadUpdate+0xf0>
     e86:	98 8b       	std	Y+16, r25	; 0x10
     e88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	u8 Keypad_Update = KPD_NOT_PRESSED;
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	8d 8f       	std	Y+29, r24	; 0x1d
	do
	{   Keypad_Update = KPD_NOT_PRESSED;
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	8d 8f       	std	Y+29, r24	; 0x1d
	Keypad_Update = KPD_voidGetPressedKey();
     e92:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
     e96:	8d 8f       	std	Y+29, r24	; 0x1d
	}while(Keypad_Update == KPD_NOT_PRESSED && g_WarrningCounter < 10);
     e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9a:	8f 3f       	cpi	r24, 0xFF	; 255
     e9c:	21 f4       	brne	.+8      	; 0xea6 <A_ADAS_Void_KeyPadUpdate+0x114>
     e9e:	80 91 4f 01 	lds	r24, 0x014F
     ea2:	8a 30       	cpi	r24, 0x0A	; 10
     ea4:	a0 f3       	brcs	.-24     	; 0xe8e <A_ADAS_Void_KeyPadUpdate+0xfc>
	if(g_WarrningCounter != 10)
     ea6:	80 91 4f 01 	lds	r24, 0x014F
     eaa:	8a 30       	cpi	r24, 0x0A	; 10
     eac:	09 f4       	brne	.+2      	; 0xeb0 <A_ADAS_Void_KeyPadUpdate+0x11e>
     eae:	67 c0       	rjmp	.+206    	; 0xf7e <A_ADAS_Void_KeyPadUpdate+0x1ec>
	{
		g_WarrningCounter =0;
     eb0:	10 92 4f 01 	sts	0x014F, r1

		switch(Keypad_Update)
     eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	3f 8f       	std	Y+31, r19	; 0x1f
     ebc:	2e 8f       	std	Y+30, r18	; 0x1e
     ebe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ec0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ec2:	85 33       	cpi	r24, 0x35	; 53
     ec4:	91 05       	cpc	r25, r1
     ec6:	79 f1       	breq	.+94     	; 0xf26 <A_ADAS_Void_KeyPadUpdate+0x194>
     ec8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     eca:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ecc:	26 33       	cpi	r18, 0x36	; 54
     ece:	31 05       	cpc	r19, r1
     ed0:	8c f4       	brge	.+34     	; 0xef4 <A_ADAS_Void_KeyPadUpdate+0x162>
     ed2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ed6:	83 33       	cpi	r24, 0x33	; 51
     ed8:	91 05       	cpc	r25, r1
     eda:	09 f4       	brne	.+2      	; 0xede <A_ADAS_Void_KeyPadUpdate+0x14c>
     edc:	48 c0       	rjmp	.+144    	; 0xf6e <A_ADAS_Void_KeyPadUpdate+0x1dc>
     ede:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ee0:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ee2:	24 33       	cpi	r18, 0x34	; 52
     ee4:	31 05       	cpc	r19, r1
     ee6:	dc f4       	brge	.+54     	; 0xf1e <A_ADAS_Void_KeyPadUpdate+0x18c>
     ee8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eea:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eec:	82 33       	cpi	r24, 0x32	; 50
     eee:	91 05       	cpc	r25, r1
     ef0:	a1 f1       	breq	.+104    	; 0xf5a <A_ADAS_Void_KeyPadUpdate+0x1c8>
     ef2:	40 c0       	rjmp	.+128    	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
     ef4:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ef6:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ef8:	27 33       	cpi	r18, 0x37	; 55
     efa:	31 05       	cpc	r19, r1
     efc:	e1 f0       	breq	.+56     	; 0xf36 <A_ADAS_Void_KeyPadUpdate+0x1a4>
     efe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f00:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f02:	87 33       	cpi	r24, 0x37	; 55
     f04:	91 05       	cpc	r25, r1
     f06:	9c f0       	brlt	.+38     	; 0xf2e <A_ADAS_Void_KeyPadUpdate+0x19c>
     f08:	2e 8d       	ldd	r18, Y+30	; 0x1e
     f0a:	3f 8d       	ldd	r19, Y+31	; 0x1f
     f0c:	28 33       	cpi	r18, 0x38	; 56
     f0e:	31 05       	cpc	r19, r1
     f10:	b1 f0       	breq	.+44     	; 0xf3e <A_ADAS_Void_KeyPadUpdate+0x1ac>
     f12:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f14:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f16:	89 33       	cpi	r24, 0x39	; 57
     f18:	91 05       	cpc	r25, r1
     f1a:	a9 f0       	breq	.+42     	; 0xf46 <A_ADAS_Void_KeyPadUpdate+0x1b4>
     f1c:	2b c0       	rjmp	.+86     	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
		{
		case '4':
			SwitchFlag=1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 5f 01 	sts	0x015F, r24
     f24:	27 c0       	rjmp	.+78     	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
			break;
		case '5':
			SwitchFlag=2;
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	80 93 5f 01 	sts	0x015F, r24
     f2c:	23 c0       	rjmp	.+70     	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
			break;
		case '6':
			SwitchFlag=3;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	80 93 5f 01 	sts	0x015F, r24
     f34:	1f c0       	rjmp	.+62     	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
			break;
		case '7':
			SwitchFlag=4;
     f36:	84 e0       	ldi	r24, 0x04	; 4
     f38:	80 93 5f 01 	sts	0x015F, r24
     f3c:	1b c0       	rjmp	.+54     	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
			break;
		case '8':
			SwitchFlag=5;
     f3e:	85 e0       	ldi	r24, 0x05	; 5
     f40:	80 93 5f 01 	sts	0x015F, r24
     f44:	17 c0       	rjmp	.+46     	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
			break;
		case '9':
			SwitchFlag=6;
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	80 93 5f 01 	sts	0x015F, r24
     f4c:	13 c0       	rjmp	.+38     	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
			break;
		case '2':
			while (KPD_voidGetPressedKey() == '2')
			{
				H_LED_Void_LedOn(PARKING_LED);
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <H_LED_Void_LedOn>
				SwitchFlag=8;
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	80 93 5f 01 	sts	0x015F, r24
			break;
		case '9':
			SwitchFlag=6;
			break;
		case '2':
			while (KPD_voidGetPressedKey() == '2')
     f5a:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
     f5e:	82 33       	cpi	r24, 0x32	; 50
     f60:	b1 f3       	breq	.-20     	; 0xf4e <A_ADAS_Void_KeyPadUpdate+0x1bc>
			{
				H_LED_Void_LedOn(PARKING_LED);
				SwitchFlag=8;
			}
			SwitchFlag=0;
     f62:	10 92 5f 01 	sts	0x015F, r1
			H_LED_Void_LedOff(PARKING_LED);
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	0e 94 ae 28 	call	0x515c	; 0x515c <H_LED_Void_LedOff>
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <A_ADAS_Void_KeyPadUpdate+0x1e2>
			break;
		case '3':
			SwitchFlag=7;
     f6e:	87 e0       	ldi	r24, 0x07	; 7
     f70:	80 93 5f 01 	sts	0x015F, r24
			break;
		default:
			break;

		}
		return SwitchFlag;
     f74:	80 91 5f 01 	lds	r24, 0x015F
     f78:	88 a3       	std	Y+32, r24	; 0x20
		g_WarrningCounter=0;
		LCD_voidClear();
		LCD_voidWriteString("Welcome");
	}

}
     f7a:	88 a1       	ldd	r24, Y+32	; 0x20
     f7c:	8d c0       	rjmp	.+282    	; 0x1098 <A_ADAS_Void_KeyPadUpdate+0x306>
		}
		return SwitchFlag;

	}else
	{
		LCD_voidClear();
     f7e:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <LCD_voidClear>
		LCD_voidWriteString("WARRING!!!");
     f82:	8b e6       	ldi	r24, 0x6B	; 107
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>

		do
		{
		M_DIO_Void_TogPin(DIO_PORTC ,DIO_PIN7);
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	67 e0       	ldi	r22, 0x07	; 7
     f8e:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <M_DIO_Void_TogPin>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	aa ef       	ldi	r26, 0xFA	; 250
     f98:	b3 e4       	ldi	r27, 0x43	; 67
     f9a:	8b 87       	std	Y+11, r24	; 0x0b
     f9c:	9c 87       	std	Y+12, r25	; 0x0c
     f9e:	ad 87       	std	Y+13, r26	; 0x0d
     fa0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	4a e7       	ldi	r20, 0x7A	; 122
     fb0:	55 e4       	ldi	r21, 0x45	; 69
     fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	8f 83       	std	Y+7, r24	; 0x07
     fbc:	98 87       	std	Y+8, r25	; 0x08
     fbe:	a9 87       	std	Y+9, r26	; 0x09
     fc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc2:	6f 81       	ldd	r22, Y+7	; 0x07
     fc4:	78 85       	ldd	r23, Y+8	; 0x08
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e8       	ldi	r20, 0x80	; 128
     fd0:	5f e3       	ldi	r21, 0x3F	; 63
     fd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd6:	88 23       	and	r24, r24
     fd8:	2c f4       	brge	.+10     	; 0xfe4 <A_ADAS_Void_KeyPadUpdate+0x252>
		__ticks = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9e 83       	std	Y+6, r25	; 0x06
     fe0:	8d 83       	std	Y+5, r24	; 0x05
     fe2:	3f c0       	rjmp	.+126    	; 0x1062 <A_ADAS_Void_KeyPadUpdate+0x2d0>
	else if (__tmp > 65535)
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	3f ef       	ldi	r19, 0xFF	; 255
     ff0:	4f e7       	ldi	r20, 0x7F	; 127
     ff2:	57 e4       	ldi	r21, 0x47	; 71
     ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff8:	18 16       	cp	r1, r24
     ffa:	4c f5       	brge	.+82     	; 0x104e <A_ADAS_Void_KeyPadUpdate+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1000:	8d 85       	ldd	r24, Y+13	; 0x0d
    1002:	9e 85       	ldd	r25, Y+14	; 0x0e
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e2       	ldi	r20, 0x20	; 32
    100a:	51 e4       	ldi	r21, 0x41	; 65
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	9e 83       	std	Y+6, r25	; 0x06
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <A_ADAS_Void_KeyPadUpdate+0x2b2>
    1026:	80 e9       	ldi	r24, 0x90	; 144
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <A_ADAS_Void_KeyPadUpdate+0x2a0>
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	69 f7       	brne	.-38     	; 0x1026 <A_ADAS_Void_KeyPadUpdate+0x294>
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <A_ADAS_Void_KeyPadUpdate+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104e:	6f 81       	ldd	r22, Y+7	; 0x07
    1050:	78 85       	ldd	r23, Y+8	; 0x08
    1052:	89 85       	ldd	r24, Y+9	; 0x09
    1054:	9a 85       	ldd	r25, Y+10	; 0x0a
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9e 83       	std	Y+6, r25	; 0x06
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <A_ADAS_Void_KeyPadUpdate+0x2dc>
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		Keypad_Update = KPD_NOT_PRESSED;
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	8d 8f       	std	Y+29, r24	; 0x1d
		Keypad_Update = KPD_voidGetPressedKey();
    107a:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    107e:	8d 8f       	std	Y+29, r24	; 0x1d
		}while(Keypad_Update == KPD_NOT_PRESSED );
    1080:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1082:	8f 3f       	cpi	r24, 0xFF	; 255
    1084:	09 f4       	brne	.+2      	; 0x1088 <A_ADAS_Void_KeyPadUpdate+0x2f6>
    1086:	81 cf       	rjmp	.-254    	; 0xf8a <A_ADAS_Void_KeyPadUpdate+0x1f8>

		g_WarrningCounter=0;
    1088:	10 92 4f 01 	sts	0x014F, r1
		LCD_voidClear();
    108c:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <LCD_voidClear>
		LCD_voidWriteString("Welcome");
    1090:	86 e7       	ldi	r24, 0x76	; 118
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	}

}
    1098:	a0 96       	adiw	r28, 0x20	; 32
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <A_CSS_VoidUpdateTask>:

void A_CSS_VoidUpdateTask(void)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	60 97       	sbiw	r28, 0x10	; 16
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
	if(GearPosition==D)
    10be:	80 91 5a 01 	lds	r24, 0x015A
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <A_CSS_VoidUpdateTask+0x1e>
    10c6:	cb c0       	rjmp	.+406    	; 0x125e <A_CSS_VoidUpdateTask+0x1b4>
	{
		if(FirstTimeFlag==0)
    10c8:	80 91 5e 01 	lds	r24, 0x015E
    10cc:	88 23       	and	r24, r24
    10ce:	61 f4       	brne	.+24     	; 0x10e8 <A_CSS_VoidUpdateTask+0x3e>
		{
			H_POT_Void_POTRead(&CurrentSpeed);
    10d0:	8b e3       	ldi	r24, 0x3B	; 59
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 3b 29 	call	0x5276	; 0x5276 <H_POT_Void_POTRead>
			H_POT_Void_POTRead(&PreviousSpeed);
    10d8:	8c e5       	ldi	r24, 0x5C	; 92
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 3b 29 	call	0x5276	; 0x5276 <H_POT_Void_POTRead>
			FirstTimeFlag=1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 5e 01 	sts	0x015E, r24
    10e6:	7e c0       	rjmp	.+252    	; 0x11e4 <A_CSS_VoidUpdateTask+0x13a>
		}
		else
		{
			PreviousSpeed=CurrentSpeed;
    10e8:	80 91 3b 01 	lds	r24, 0x013B
    10ec:	90 91 3c 01 	lds	r25, 0x013C
    10f0:	90 93 5d 01 	sts	0x015D, r25
    10f4:	80 93 5c 01 	sts	0x015C, r24
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	aa ef       	ldi	r26, 0xFA	; 250
    10fe:	b3 e4       	ldi	r27, 0x43	; 67
    1100:	8b 87       	std	Y+11, r24	; 0x0b
    1102:	9c 87       	std	Y+12, r25	; 0x0c
    1104:	ad 87       	std	Y+13, r26	; 0x0d
    1106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1108:	6b 85       	ldd	r22, Y+11	; 0x0b
    110a:	7c 85       	ldd	r23, Y+12	; 0x0c
    110c:	8d 85       	ldd	r24, Y+13	; 0x0d
    110e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4a e7       	ldi	r20, 0x7A	; 122
    1116:	55 e4       	ldi	r21, 0x45	; 69
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8f 83       	std	Y+7, r24	; 0x07
    1122:	98 87       	std	Y+8, r25	; 0x08
    1124:	a9 87       	std	Y+9, r26	; 0x09
    1126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1128:	6f 81       	ldd	r22, Y+7	; 0x07
    112a:	78 85       	ldd	r23, Y+8	; 0x08
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	2c f4       	brge	.+10     	; 0x114a <A_CSS_VoidUpdateTask+0xa0>
		__ticks = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
    1148:	3f c0       	rjmp	.+126    	; 0x11c8 <A_CSS_VoidUpdateTask+0x11e>
	else if (__tmp > 65535)
    114a:	6f 81       	ldd	r22, Y+7	; 0x07
    114c:	78 85       	ldd	r23, Y+8	; 0x08
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3f ef       	ldi	r19, 0xFF	; 255
    1156:	4f e7       	ldi	r20, 0x7F	; 127
    1158:	57 e4       	ldi	r21, 0x47	; 71
    115a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115e:	18 16       	cp	r1, r24
    1160:	4c f5       	brge	.+82     	; 0x11b4 <A_CSS_VoidUpdateTask+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1162:	6b 85       	ldd	r22, Y+11	; 0x0b
    1164:	7c 85       	ldd	r23, Y+12	; 0x0c
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	9e 85       	ldd	r25, Y+14	; 0x0e
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9e 83       	std	Y+6, r25	; 0x06
    1188:	8d 83       	std	Y+5, r24	; 0x05
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <A_CSS_VoidUpdateTask+0x100>
    118c:	80 e9       	ldi	r24, 0x90	; 144
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	8b 83       	std	Y+3, r24	; 0x03
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <A_CSS_VoidUpdateTask+0xee>
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f7       	brne	.-38     	; 0x118c <A_CSS_VoidUpdateTask+0xe2>
    11b2:	14 c0       	rjmp	.+40     	; 0x11dc <A_CSS_VoidUpdateTask+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b4:	6f 81       	ldd	r22, Y+7	; 0x07
    11b6:	78 85       	ldd	r23, Y+8	; 0x08
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <A_CSS_VoidUpdateTask+0x12a>
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			H_POT_Void_POTRead(&CurrentSpeed);
    11dc:	8b e3       	ldi	r24, 0x3B	; 59
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 3b 29 	call	0x5276	; 0x5276 <H_POT_Void_POTRead>
		}
		if(CurrentSpeed!=PreviousSpeed&&CSSStatus==CSS_ON)
    11e4:	20 91 3b 01 	lds	r18, 0x013B
    11e8:	30 91 3c 01 	lds	r19, 0x013C
    11ec:	80 91 5c 01 	lds	r24, 0x015C
    11f0:	90 91 5d 01 	lds	r25, 0x015D
    11f4:	28 17       	cp	r18, r24
    11f6:	39 07       	cpc	r19, r25
    11f8:	39 f0       	breq	.+14     	; 0x1208 <A_CSS_VoidUpdateTask+0x15e>
    11fa:	80 91 56 01 	lds	r24, 0x0156
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	19 f4       	brne	.+6      	; 0x1208 <A_CSS_VoidUpdateTask+0x15e>
		{
			CSSStatus=CSS_OFF;
    1202:	10 92 56 01 	sts	0x0156, r1
    1206:	25 c0       	rjmp	.+74     	; 0x1252 <A_CSS_VoidUpdateTask+0x1a8>
		}
		else if (CurrentSpeed==PreviousSpeed)
    1208:	20 91 3b 01 	lds	r18, 0x013B
    120c:	30 91 3c 01 	lds	r19, 0x013C
    1210:	80 91 5c 01 	lds	r24, 0x015C
    1214:	90 91 5d 01 	lds	r25, 0x015D
    1218:	28 17       	cp	r18, r24
    121a:	39 07       	cpc	r19, r25
    121c:	d1 f4       	brne	.+52     	; 0x1252 <A_CSS_VoidUpdateTask+0x1a8>
		{
			switch(CSSStatus)
    121e:	80 91 56 01 	lds	r24, 0x0156
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	38 8b       	std	Y+16, r19	; 0x10
    1228:	2f 87       	std	Y+15, r18	; 0x0f
    122a:	8f 85       	ldd	r24, Y+15	; 0x0f
    122c:	98 89       	ldd	r25, Y+16	; 0x10
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	31 f0       	breq	.+12     	; 0x123e <A_CSS_VoidUpdateTask+0x194>
    1232:	2f 85       	ldd	r18, Y+15	; 0x0f
    1234:	38 89       	ldd	r19, Y+16	; 0x10
    1236:	21 30       	cpi	r18, 0x01	; 1
    1238:	31 05       	cpc	r19, r1
    123a:	39 f0       	breq	.+14     	; 0x124a <A_CSS_VoidUpdateTask+0x1a0>
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <A_CSS_VoidUpdateTask+0x1a8>
			{
			case CSS_OFF:
				CSSStatus=CSS_ON;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 93 56 01 	sts	0x0156, r24
				/*fire buzzer*/
				/* Open Buzzer For 10ms, then do no thing */
				H_Buzzer_Void_BuzzerOnce();
    1244:	0e 94 a2 1b 	call	0x3744	; 0x3744 <H_Buzzer_Void_BuzzerOnce>
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <A_CSS_VoidUpdateTask+0x1a8>
				break;
			case CSS_ON:
				CSSStatus=CSS_OFF;
    124a:	10 92 56 01 	sts	0x0156, r1
				/*fire buzzer*/
				/* Open Buzzer For 10ms, then do no thing */
				H_Buzzer_Void_BuzzerOnce();
    124e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <H_Buzzer_Void_BuzzerOnce>
				break;
			default:
				break;
			}
		}
		if(Page==LCD_THREE)
    1252:	80 91 5b 01 	lds	r24, 0x015B
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	11 f4       	brne	.+4      	; 0x125e <A_CSS_VoidUpdateTask+0x1b4>
		{
			A_LCD_void_SecondState();
    125a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <A_LCD_void_SecondState>
		}
	}
}
    125e:	60 96       	adiw	r28, 0x10	; 16
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <A_BAS_VoidUpdateTask>:


void A_BAS_VoidUpdateTask(void)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <A_BAS_VoidUpdateTask+0x6>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
	if(GearPosition==D)
    127a:	80 91 5a 01 	lds	r24, 0x015A
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	e1 f4       	brne	.+56     	; 0x12ba <A_BAS_VoidUpdateTask+0x4a>
	{
		switch(BAStatus)
    1282:	80 91 57 01 	lds	r24, 0x0157
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3a 83       	std	Y+2, r19	; 0x02
    128c:	29 83       	std	Y+1, r18	; 0x01
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	9a 81       	ldd	r25, Y+2	; 0x02
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	31 f0       	breq	.+12     	; 0x12a2 <A_BAS_VoidUpdateTask+0x32>
    1296:	29 81       	ldd	r18, Y+1	; 0x01
    1298:	3a 81       	ldd	r19, Y+2	; 0x02
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	31 05       	cpc	r19, r1
    129e:	29 f0       	breq	.+10     	; 0x12aa <A_BAS_VoidUpdateTask+0x3a>
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <A_BAS_VoidUpdateTask+0x3e>
		{
		case BA_OFF:
			BAStatus=BA_ON;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 57 01 	sts	0x0157, r24
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <A_BAS_VoidUpdateTask+0x3e>
			break;
		case BA_ON:
			BAStatus=BA_OFF;
    12aa:	10 92 57 01 	sts	0x0157, r1
			break;
		default:
			break;
		}
		if(Page==LCD_THREE)
    12ae:	80 91 5b 01 	lds	r24, 0x015B
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	11 f4       	brne	.+4      	; 0x12ba <A_BAS_VoidUpdateTask+0x4a>
		{
			A_LCD_void_SecondState();
    12b6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <A_LCD_void_SecondState>
		}
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <A_SL_VoidUpdateTask>:

void A_SL_VoidUpdateTask(void)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <A_SL_VoidUpdateTask+0x6>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	if(GearPosition==D)
    12ce:	80 91 5a 01 	lds	r24, 0x015A
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <A_SL_VoidUpdateTask+0x14>
    12d6:	67 c0       	rjmp	.+206    	; 0x13a6 <A_SL_VoidUpdateTask+0xe2>
	{
		switch(SPStatus)
    12d8:	80 91 58 01 	lds	r24, 0x0158
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3a 83       	std	Y+2, r19	; 0x02
    12e2:	29 83       	std	Y+1, r18	; 0x01
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <A_SL_VoidUpdateTask+0x34>
    12ec:	29 81       	ldd	r18, Y+1	; 0x01
    12ee:	3a 81       	ldd	r19, Y+2	; 0x02
    12f0:	21 30       	cpi	r18, 0x01	; 1
    12f2:	31 05       	cpc	r19, r1
    12f4:	29 f0       	breq	.+10     	; 0x1300 <A_SL_VoidUpdateTask+0x3c>
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <A_SL_VoidUpdateTask+0x40>
		{
		case SP_OFF:
			SPStatus=SP_ON;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 58 01 	sts	0x0158, r24
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <A_SL_VoidUpdateTask+0x40>
			break;
		case SP_ON:
			SPStatus=SP_OFF;
    1300:	10 92 58 01 	sts	0x0158, r1
			break;
		default:
			break;
		}
		PreviousSpeed=CurrentSpeed;
    1304:	80 91 3b 01 	lds	r24, 0x013B
    1308:	90 91 3c 01 	lds	r25, 0x013C
    130c:	90 93 5d 01 	sts	0x015D, r25
    1310:	80 93 5c 01 	sts	0x015C, r24
		H_POT_Void_POTRead(&CurrentSpeed);
    1314:	8b e3       	ldi	r24, 0x3B	; 59
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	0e 94 3b 29 	call	0x5276	; 0x5276 <H_POT_Void_POTRead>
		if(SPStatus==SP_ON)
    131c:	80 91 58 01 	lds	r24, 0x0158
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	d9 f5       	brne	.+118    	; 0x139a <A_SL_VoidUpdateTask+0xd6>
    1324:	2d c0       	rjmp	.+90     	; 0x1380 <A_SL_VoidUpdateTask+0xbc>
		{
			while(CurrentSpeed>SpeedLimiter)
			{
				/*Relay on OFF*/
				/* flag = 1*/
				relay_Flag = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 50 01 	sts	0x0150, r24
				PreviousSpeed=CurrentSpeed;
    132c:	80 91 3b 01 	lds	r24, 0x013B
    1330:	90 91 3c 01 	lds	r25, 0x013C
    1334:	90 93 5d 01 	sts	0x015D, r25
    1338:	80 93 5c 01 	sts	0x015C, r24
				H_POT_Void_POTRead(&CurrentSpeed);
    133c:	8b e3       	ldi	r24, 0x3B	; 59
    133e:	91 e0       	ldi	r25, 0x01	; 1
    1340:	0e 94 3b 29 	call	0x5276	; 0x5276 <H_POT_Void_POTRead>
				if(KPD_voidGetPressedKey()=='7')
    1344:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    1348:	87 33       	cpi	r24, 0x37	; 55
    134a:	11 f4       	brne	.+4      	; 0x1350 <A_SL_VoidUpdateTask+0x8c>
				{
					A_SL_VoidIncreaseFunction();
    134c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <A_SL_VoidIncreaseFunction>
				}

				if(KPD_voidGetPressedKey()=='6')
    1350:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    1354:	86 33       	cpi	r24, 0x36	; 54
    1356:	19 f4       	brne	.+6      	; 0x135e <A_SL_VoidUpdateTask+0x9a>
				{
                    SPStatus=SP_OFF;
    1358:	10 92 58 01 	sts	0x0158, r1
    135c:	1c c0       	rjmp	.+56     	; 0x1396 <A_SL_VoidUpdateTask+0xd2>
					break;
				}
				if(GearPosition==R||GearPosition==N)
    135e:	80 91 5a 01 	lds	r24, 0x015A
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	21 f0       	breq	.+8      	; 0x136e <A_SL_VoidUpdateTask+0xaa>
    1366:	80 91 5a 01 	lds	r24, 0x015A
    136a:	88 23       	and	r24, r24
    136c:	19 f4       	brne	.+6      	; 0x1374 <A_SL_VoidUpdateTask+0xb0>
				{
					SPStatus=SP_OFF;
    136e:	10 92 58 01 	sts	0x0158, r1
    1372:	11 c0       	rjmp	.+34     	; 0x1396 <A_SL_VoidUpdateTask+0xd2>
					break;
				}
				if(Page==LCD_THREE)
    1374:	80 91 5b 01 	lds	r24, 0x015B
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	11 f4       	brne	.+4      	; 0x1380 <A_SL_VoidUpdateTask+0xbc>
				{
					A_LCD_void_SecondState();
    137c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <A_LCD_void_SecondState>
		}
		PreviousSpeed=CurrentSpeed;
		H_POT_Void_POTRead(&CurrentSpeed);
		if(SPStatus==SP_ON)
		{
			while(CurrentSpeed>SpeedLimiter)
    1380:	80 91 3d 01 	lds	r24, 0x013D
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	80 91 3b 01 	lds	r24, 0x013B
    138c:	90 91 3c 01 	lds	r25, 0x013C
    1390:	28 17       	cp	r18, r24
    1392:	39 07       	cpc	r19, r25
    1394:	40 f2       	brcs	.-112    	; 0x1326 <A_SL_VoidUpdateTask+0x62>
					A_LCD_void_SecondState();
				}

			}
			/* clear flag*/
			relay_Flag =0;
    1396:	10 92 50 01 	sts	0x0150, r1

		}
		if(Page==LCD_THREE)
    139a:	80 91 5b 01 	lds	r24, 0x015B
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <A_SL_VoidUpdateTask+0xe2>
		{
			A_LCD_void_SecondState();
    13a2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <A_LCD_void_SecondState>
		}
	}
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <A_SL_VoidIncreaseFunction>:

void A_SL_VoidIncreaseFunction(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	SpeedLimiter+=5;
    13b8:	80 91 3d 01 	lds	r24, 0x013D
    13bc:	8b 5f       	subi	r24, 0xFB	; 251
    13be:	80 93 3d 01 	sts	0x013D, r24
	if(Page==LCD_TWO)
    13c2:	80 91 5b 01 	lds	r24, 0x015B
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	11 f4       	brne	.+4      	; 0x13ce <A_SL_VoidIncreaseFunction+0x1e>
	{
		A_LCD_void_FirstState();
    13ca:	0e 94 3f 0a 	call	0x147e	; 0x147e <A_LCD_void_FirstState>
	}

}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <A_SL_VoidDecreaseFunction>:

void A_SL_VoidDecreaseFunction(void)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62

	SpeedLimiter-=5;
    13dc:	80 91 3d 01 	lds	r24, 0x013D
    13e0:	85 50       	subi	r24, 0x05	; 5
    13e2:	80 93 3d 01 	sts	0x013D, r24
	if(Page==LCD_TWO)
    13e6:	80 91 5b 01 	lds	r24, 0x015B
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <A_SL_VoidDecreaseFunction+0x1e>
	{
		A_LCD_void_FirstState();
    13ee:	0e 94 3f 0a 	call	0x147e	; 0x147e <A_LCD_void_FirstState>
	}
}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <A_LCD_Void_SwitchTask>:
void A_LCD_Void_SwitchTask(void)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <A_LCD_Void_SwitchTask+0x6>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClear();
    1402:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <LCD_voidClear>
	switch(Page)
    1406:	80 91 5b 01 	lds	r24, 0x015B
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3a 83       	std	Y+2, r19	; 0x02
    1410:	29 83       	std	Y+1, r18	; 0x01
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	c1 f0       	breq	.+48     	; 0x144c <A_LCD_Void_SwitchTask+0x54>
    141c:	29 81       	ldd	r18, Y+1	; 0x01
    141e:	3a 81       	ldd	r19, Y+2	; 0x02
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <A_LCD_Void_SwitchTask+0x38>
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	61 f0       	breq	.+24     	; 0x1446 <A_LCD_Void_SwitchTask+0x4e>
    142e:	16 c0       	rjmp	.+44     	; 0x145c <A_LCD_Void_SwitchTask+0x64>
    1430:	29 81       	ldd	r18, Y+1	; 0x01
    1432:	3a 81       	ldd	r19, Y+2	; 0x02
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	61 f0       	breq	.+24     	; 0x1452 <A_LCD_Void_SwitchTask+0x5a>
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	51 f0       	breq	.+20     	; 0x1458 <A_LCD_Void_SwitchTask+0x60>
    1444:	0b c0       	rjmp	.+22     	; 0x145c <A_LCD_Void_SwitchTask+0x64>
	{
	case LCD_ONE  : A_LCD_void_FirstState();
    1446:	0e 94 3f 0a 	call	0x147e	; 0x147e <A_LCD_void_FirstState>
    144a:	08 c0       	rjmp	.+16     	; 0x145c <A_LCD_Void_SwitchTask+0x64>
					   break;
	case LCD_TWO  : A_LCD_void_SecondState();   break;
    144c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <A_LCD_void_SecondState>
    1450:	05 c0       	rjmp	.+10     	; 0x145c <A_LCD_Void_SwitchTask+0x64>
	case LCD_THREE : A_LCD_void_ThirdState();   break;
    1452:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <A_LCD_void_ThirdState>
    1456:	02 c0       	rjmp	.+4      	; 0x145c <A_LCD_Void_SwitchTask+0x64>
	case LCD_FOUR  : A_LCD_void_FourthState();  break;
    1458:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <A_LCD_void_FourthState>
	default:                                    break;
	}
	if(Page==LCD_FOUR)
    145c:	80 91 5b 01 	lds	r24, 0x015B
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	19 f4       	brne	.+6      	; 0x146a <A_LCD_Void_SwitchTask+0x72>
	{

		Page=LCD_ONE;
    1464:	10 92 5b 01 	sts	0x015B, r1
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <A_LCD_Void_SwitchTask+0x7c>
	}
	else
	{
		Page++;
    146a:	80 91 5b 01 	lds	r24, 0x015B
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	80 93 5b 01 	sts	0x015B, r24
	}

}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <A_LCD_void_FirstState>:
void A_LCD_void_FirstState(void)
{
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	c6 54       	subi	r28, 0x46	; 70
    148c:	d0 40       	sbci	r29, 0x00	; 0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
	/*first line CCS|BA|SP|DM

		 second line   ------------------------
		 */
		LCD_voidGoToXY(LINE_1,4);
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	64 e0       	ldi	r22, 0x04	; 4
    149c:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
		LCD_voidWriteString("CCS|BA|SP|DM");
    14a0:	8e e7       	ldi	r24, 0x7E	; 126
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    14a8:	fe 01       	movw	r30, r28
    14aa:	ed 5b       	subi	r30, 0xBD	; 189
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a0 ea       	ldi	r26, 0xA0	; 160
    14b4:	b1 e4       	ldi	r27, 0x41	; 65
    14b6:	80 83       	st	Z, r24
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	a2 83       	std	Z+2, r26	; 0x02
    14bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14be:	8e 01       	movw	r16, r28
    14c0:	01 5c       	subi	r16, 0xC1	; 193
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	fe 01       	movw	r30, r28
    14c6:	ed 5b       	subi	r30, 0xBD	; 189
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a e7       	ldi	r20, 0x7A	; 122
    14d8:	55 e4       	ldi	r21, 0x45	; 69
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	f8 01       	movw	r30, r16
    14e4:	80 83       	st	Z, r24
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	a2 83       	std	Z+2, r26	; 0x02
    14ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14ec:	fe 01       	movw	r30, r28
    14ee:	ff 96       	adiw	r30, 0x3f	; 63
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <A_LCD_void_FirstState+0x94>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9e af       	std	Y+62, r25	; 0x3e
    150e:	8d af       	std	Y+61, r24	; 0x3d
    1510:	46 c0       	rjmp	.+140    	; 0x159e <A_LCD_void_FirstState+0x120>
	else if (__tmp > 65535)
    1512:	fe 01       	movw	r30, r28
    1514:	ff 96       	adiw	r30, 0x3f	; 63
    1516:	60 81       	ld	r22, Z
    1518:	71 81       	ldd	r23, Z+1	; 0x01
    151a:	82 81       	ldd	r24, Z+2	; 0x02
    151c:	93 81       	ldd	r25, Z+3	; 0x03
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	64 f5       	brge	.+88     	; 0x1586 <A_LCD_void_FirstState+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	fe 01       	movw	r30, r28
    1530:	ed 5b       	subi	r30, 0xBD	; 189
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9e af       	std	Y+62, r25	; 0x3e
    155a:	8d af       	std	Y+61, r24	; 0x3d
    155c:	0f c0       	rjmp	.+30     	; 0x157c <A_LCD_void_FirstState+0xfe>
    155e:	80 e9       	ldi	r24, 0x90	; 144
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	9c af       	std	Y+60, r25	; 0x3c
    1564:	8b af       	std	Y+59, r24	; 0x3b
    1566:	8b ad       	ldd	r24, Y+59	; 0x3b
    1568:	9c ad       	ldd	r25, Y+60	; 0x3c
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <A_LCD_void_FirstState+0xec>
    156e:	9c af       	std	Y+60, r25	; 0x3c
    1570:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8d ad       	ldd	r24, Y+61	; 0x3d
    1574:	9e ad       	ldd	r25, Y+62	; 0x3e
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9e af       	std	Y+62, r25	; 0x3e
    157a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8d ad       	ldd	r24, Y+61	; 0x3d
    157e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <A_LCD_void_FirstState+0xe0>
    1584:	16 c0       	rjmp	.+44     	; 0x15b2 <A_LCD_void_FirstState+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	fe 01       	movw	r30, r28
    1588:	ff 96       	adiw	r30, 0x3f	; 63
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e af       	std	Y+62, r25	; 0x3e
    159c:	8d af       	std	Y+61, r24	; 0x3d
    159e:	8d ad       	ldd	r24, Y+61	; 0x3d
    15a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    15a2:	9a af       	std	Y+58, r25	; 0x3a
    15a4:	89 af       	std	Y+57, r24	; 0x39
    15a6:	89 ad       	ldd	r24, Y+57	; 0x39
    15a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <A_LCD_void_FirstState+0x12c>
    15ae:	9a af       	std	Y+58, r25	; 0x3a
    15b0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(20);
		LCD_voidGoToXY(LINE_2,0);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
		LCD_voidWriteString("----------------------");
    15ba:	8b e8       	ldi	r24, 0x8B	; 139
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 ea       	ldi	r26, 0xA0	; 160
    15c8:	b1 e4       	ldi	r27, 0x41	; 65
    15ca:	8d ab       	std	Y+53, r24	; 0x35
    15cc:	9e ab       	std	Y+54, r25	; 0x36
    15ce:	af ab       	std	Y+55, r26	; 0x37
    15d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	6d a9       	ldd	r22, Y+53	; 0x35
    15d4:	7e a9       	ldd	r23, Y+54	; 0x36
    15d6:	8f a9       	ldd	r24, Y+55	; 0x37
    15d8:	98 ad       	ldd	r25, Y+56	; 0x38
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a e7       	ldi	r20, 0x7A	; 122
    15e0:	55 e4       	ldi	r21, 0x45	; 69
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	89 ab       	std	Y+49, r24	; 0x31
    15ec:	9a ab       	std	Y+50, r25	; 0x32
    15ee:	ab ab       	std	Y+51, r26	; 0x33
    15f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15f2:	69 a9       	ldd	r22, Y+49	; 0x31
    15f4:	7a a9       	ldd	r23, Y+50	; 0x32
    15f6:	8b a9       	ldd	r24, Y+51	; 0x33
    15f8:	9c a9       	ldd	r25, Y+52	; 0x34
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <A_LCD_void_FirstState+0x196>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	98 ab       	std	Y+48, r25	; 0x30
    1610:	8f a7       	std	Y+47, r24	; 0x2f
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <A_LCD_void_FirstState+0x214>
	else if (__tmp > 65535)
    1614:	69 a9       	ldd	r22, Y+49	; 0x31
    1616:	7a a9       	ldd	r23, Y+50	; 0x32
    1618:	8b a9       	ldd	r24, Y+51	; 0x33
    161a:	9c a9       	ldd	r25, Y+52	; 0x34
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <A_LCD_void_FirstState+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	6d a9       	ldd	r22, Y+53	; 0x35
    162e:	7e a9       	ldd	r23, Y+54	; 0x36
    1630:	8f a9       	ldd	r24, Y+55	; 0x37
    1632:	98 ad       	ldd	r25, Y+56	; 0x38
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	98 ab       	std	Y+48, r25	; 0x30
    1652:	8f a7       	std	Y+47, r24	; 0x2f
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <A_LCD_void_FirstState+0x1f6>
    1656:	80 e9       	ldi	r24, 0x90	; 144
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	9e a7       	std	Y+46, r25	; 0x2e
    165c:	8d a7       	std	Y+45, r24	; 0x2d
    165e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1660:	9e a5       	ldd	r25, Y+46	; 0x2e
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <A_LCD_void_FirstState+0x1e4>
    1666:	9e a7       	std	Y+46, r25	; 0x2e
    1668:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8f a5       	ldd	r24, Y+47	; 0x2f
    166c:	98 a9       	ldd	r25, Y+48	; 0x30
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	98 ab       	std	Y+48, r25	; 0x30
    1672:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8f a5       	ldd	r24, Y+47	; 0x2f
    1676:	98 a9       	ldd	r25, Y+48	; 0x30
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <A_LCD_void_FirstState+0x1d8>
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <A_LCD_void_FirstState+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	69 a9       	ldd	r22, Y+49	; 0x31
    1680:	7a a9       	ldd	r23, Y+50	; 0x32
    1682:	8b a9       	ldd	r24, Y+51	; 0x33
    1684:	9c a9       	ldd	r25, Y+52	; 0x34
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	98 ab       	std	Y+48, r25	; 0x30
    1690:	8f a7       	std	Y+47, r24	; 0x2f
    1692:	8f a5       	ldd	r24, Y+47	; 0x2f
    1694:	98 a9       	ldd	r25, Y+48	; 0x30
    1696:	9c a7       	std	Y+44, r25	; 0x2c
    1698:	8b a7       	std	Y+43, r24	; 0x2b
    169a:	8b a5       	ldd	r24, Y+43	; 0x2b
    169c:	9c a5       	ldd	r25, Y+44	; 0x2c
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <A_LCD_void_FirstState+0x220>
    16a2:	9c a7       	std	Y+44, r25	; 0x2c
    16a4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		LCD_voidGoToXY(LINE_3,0);
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 ea       	ldi	r26, 0xA0	; 160
    16b4:	b1 e4       	ldi	r27, 0x41	; 65
    16b6:	8f a3       	std	Y+39, r24	; 0x27
    16b8:	98 a7       	std	Y+40, r25	; 0x28
    16ba:	a9 a7       	std	Y+41, r26	; 0x29
    16bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16be:	6f a1       	ldd	r22, Y+39	; 0x27
    16c0:	78 a5       	ldd	r23, Y+40	; 0x28
    16c2:	89 a5       	ldd	r24, Y+41	; 0x29
    16c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	4a e7       	ldi	r20, 0x7A	; 122
    16cc:	55 e4       	ldi	r21, 0x45	; 69
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	8b a3       	std	Y+35, r24	; 0x23
    16d8:	9c a3       	std	Y+36, r25	; 0x24
    16da:	ad a3       	std	Y+37, r26	; 0x25
    16dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16de:	6b a1       	ldd	r22, Y+35	; 0x23
    16e0:	7c a1       	ldd	r23, Y+36	; 0x24
    16e2:	8d a1       	ldd	r24, Y+37	; 0x25
    16e4:	9e a1       	ldd	r25, Y+38	; 0x26
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e8       	ldi	r20, 0x80	; 128
    16ec:	5f e3       	ldi	r21, 0x3F	; 63
    16ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f2:	88 23       	and	r24, r24
    16f4:	2c f4       	brge	.+10     	; 0x1700 <A_LCD_void_FirstState+0x282>
		__ticks = 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9a a3       	std	Y+34, r25	; 0x22
    16fc:	89 a3       	std	Y+33, r24	; 0x21
    16fe:	3f c0       	rjmp	.+126    	; 0x177e <A_LCD_void_FirstState+0x300>
	else if (__tmp > 65535)
    1700:	6b a1       	ldd	r22, Y+35	; 0x23
    1702:	7c a1       	ldd	r23, Y+36	; 0x24
    1704:	8d a1       	ldd	r24, Y+37	; 0x25
    1706:	9e a1       	ldd	r25, Y+38	; 0x26
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	4c f5       	brge	.+82     	; 0x176a <A_LCD_void_FirstState+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1718:	6f a1       	ldd	r22, Y+39	; 0x27
    171a:	78 a5       	ldd	r23, Y+40	; 0x28
    171c:	89 a5       	ldd	r24, Y+41	; 0x29
    171e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e2       	ldi	r20, 0x20	; 32
    1726:	51 e4       	ldi	r21, 0x41	; 65
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9a a3       	std	Y+34, r25	; 0x22
    173e:	89 a3       	std	Y+33, r24	; 0x21
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <A_LCD_void_FirstState+0x2e2>
    1742:	80 e9       	ldi	r24, 0x90	; 144
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	98 a3       	std	Y+32, r25	; 0x20
    1748:	8f 8f       	std	Y+31, r24	; 0x1f
    174a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    174c:	98 a1       	ldd	r25, Y+32	; 0x20
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <A_LCD_void_FirstState+0x2d0>
    1752:	98 a3       	std	Y+32, r25	; 0x20
    1754:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1756:	89 a1       	ldd	r24, Y+33	; 0x21
    1758:	9a a1       	ldd	r25, Y+34	; 0x22
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9a a3       	std	Y+34, r25	; 0x22
    175e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1760:	89 a1       	ldd	r24, Y+33	; 0x21
    1762:	9a a1       	ldd	r25, Y+34	; 0x22
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	69 f7       	brne	.-38     	; 0x1742 <A_LCD_void_FirstState+0x2c4>
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <A_LCD_void_FirstState+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176a:	6b a1       	ldd	r22, Y+35	; 0x23
    176c:	7c a1       	ldd	r23, Y+36	; 0x24
    176e:	8d a1       	ldd	r24, Y+37	; 0x25
    1770:	9e a1       	ldd	r25, Y+38	; 0x26
    1772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	9a a3       	std	Y+34, r25	; 0x22
    177c:	89 a3       	std	Y+33, r24	; 0x21
    177e:	89 a1       	ldd	r24, Y+33	; 0x21
    1780:	9a a1       	ldd	r25, Y+34	; 0x22
    1782:	9e 8f       	std	Y+30, r25	; 0x1e
    1784:	8d 8f       	std	Y+29, r24	; 0x1d
    1786:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1788:	9e 8d       	ldd	r25, Y+30	; 0x1e
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <A_LCD_void_FirstState+0x30c>
    178e:	9e 8f       	std	Y+30, r25	; 0x1e
    1790:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		if(GearPosition==D)
    1792:	80 91 5a 01 	lds	r24, 0x015A
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	99 f4       	brne	.+38     	; 0x17c0 <A_LCD_void_FirstState+0x342>
		{
			LCD_voidWriteString("Speed:");
    179a:	82 ea       	ldi	r24, 0xA2	; 162
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
			LCD_voidWriteNumber(CurrentSpeed);
    17a2:	80 91 3b 01 	lds	r24, 0x013B
    17a6:	90 91 3c 01 	lds	r25, 0x013C
    17aa:	cc 01       	movw	r24, r24
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
			LCD_voidWriteString("Km/h");
    17b8:	89 ea       	ldi	r24, 0xA9	; 169
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		}
		LCD_voidGoToXY(LINE_3,13);
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	6d e0       	ldi	r22, 0x0D	; 13
    17c4:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 ea       	ldi	r26, 0xA0	; 160
    17ce:	b1 e4       	ldi	r27, 0x41	; 65
    17d0:	89 8f       	std	Y+25, r24	; 0x19
    17d2:	9a 8f       	std	Y+26, r25	; 0x1a
    17d4:	ab 8f       	std	Y+27, r26	; 0x1b
    17d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d8:	69 8d       	ldd	r22, Y+25	; 0x19
    17da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4a e7       	ldi	r20, 0x7A	; 122
    17e6:	55 e4       	ldi	r21, 0x45	; 69
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	8d 8b       	std	Y+21, r24	; 0x15
    17f2:	9e 8b       	std	Y+22, r25	; 0x16
    17f4:	af 8b       	std	Y+23, r26	; 0x17
    17f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17f8:	6d 89       	ldd	r22, Y+21	; 0x15
    17fa:	7e 89       	ldd	r23, Y+22	; 0x16
    17fc:	8f 89       	ldd	r24, Y+23	; 0x17
    17fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180c:	88 23       	and	r24, r24
    180e:	2c f4       	brge	.+10     	; 0x181a <A_LCD_void_FirstState+0x39c>
		__ticks = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9c 8b       	std	Y+20, r25	; 0x14
    1816:	8b 8b       	std	Y+19, r24	; 0x13
    1818:	3f c0       	rjmp	.+126    	; 0x1898 <A_LCD_void_FirstState+0x41a>
	else if (__tmp > 65535)
    181a:	6d 89       	ldd	r22, Y+21	; 0x15
    181c:	7e 89       	ldd	r23, Y+22	; 0x16
    181e:	8f 89       	ldd	r24, Y+23	; 0x17
    1820:	98 8d       	ldd	r25, Y+24	; 0x18
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	4c f5       	brge	.+82     	; 0x1884 <A_LCD_void_FirstState+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1832:	69 8d       	ldd	r22, Y+25	; 0x19
    1834:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1836:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1838:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e2       	ldi	r20, 0x20	; 32
    1840:	51 e4       	ldi	r21, 0x41	; 65
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	8b 8b       	std	Y+19, r24	; 0x13
    185a:	0f c0       	rjmp	.+30     	; 0x187a <A_LCD_void_FirstState+0x3fc>
    185c:	80 e9       	ldi	r24, 0x90	; 144
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	9a 8b       	std	Y+18, r25	; 0x12
    1862:	89 8b       	std	Y+17, r24	; 0x11
    1864:	89 89       	ldd	r24, Y+17	; 0x11
    1866:	9a 89       	ldd	r25, Y+18	; 0x12
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <A_LCD_void_FirstState+0x3ea>
    186c:	9a 8b       	std	Y+18, r25	; 0x12
    186e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	8b 89       	ldd	r24, Y+19	; 0x13
    1872:	9c 89       	ldd	r25, Y+20	; 0x14
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	9c 8b       	std	Y+20, r25	; 0x14
    1878:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187a:	8b 89       	ldd	r24, Y+19	; 0x13
    187c:	9c 89       	ldd	r25, Y+20	; 0x14
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	69 f7       	brne	.-38     	; 0x185c <A_LCD_void_FirstState+0x3de>
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <A_LCD_void_FirstState+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1884:	6d 89       	ldd	r22, Y+21	; 0x15
    1886:	7e 89       	ldd	r23, Y+22	; 0x16
    1888:	8f 89       	ldd	r24, Y+23	; 0x17
    188a:	98 8d       	ldd	r25, Y+24	; 0x18
    188c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	9c 8b       	std	Y+20, r25	; 0x14
    1896:	8b 8b       	std	Y+19, r24	; 0x13
    1898:	8b 89       	ldd	r24, Y+19	; 0x13
    189a:	9c 89       	ldd	r25, Y+20	; 0x14
    189c:	98 8b       	std	Y+16, r25	; 0x10
    189e:	8f 87       	std	Y+15, r24	; 0x0f
    18a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a2:	98 89       	ldd	r25, Y+16	; 0x10
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <A_LCD_void_FirstState+0x426>
    18a8:	98 8b       	std	Y+16, r25	; 0x10
    18aa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		LCD_voidWriteString("MS:");
    18ac:	8e ea       	ldi	r24, 0xAE	; 174
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		LCD_voidWriteNumber(SpeedLimiter);
    18b4:	80 91 3d 01 	lds	r24, 0x013D
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
		LCD_voidWriteString("Km");
    18c8:	82 eb       	ldi	r24, 0xB2	; 178
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	//	LCD_voidGoToXY(LINE_4,0);
	//	_delay_ms(20);
	//	/* display LCD string KMs counter:*/
	//	LCD_voidWriteNumber(KMs_Counter);
		LCD_voidGoToXY(LINE_4,17);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	61 e1       	ldi	r22, 0x11	; 17
    18d4:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 ea       	ldi	r26, 0xA0	; 160
    18de:	b1 e4       	ldi	r27, 0x41	; 65
    18e0:	8b 87       	std	Y+11, r24	; 0x0b
    18e2:	9c 87       	std	Y+12, r25	; 0x0c
    18e4:	ad 87       	std	Y+13, r26	; 0x0d
    18e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a e7       	ldi	r20, 0x7A	; 122
    18f6:	55 e4       	ldi	r21, 0x45	; 69
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8f 83       	std	Y+7, r24	; 0x07
    1902:	98 87       	std	Y+8, r25	; 0x08
    1904:	a9 87       	std	Y+9, r26	; 0x09
    1906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	2c f4       	brge	.+10     	; 0x192a <A_LCD_void_FirstState+0x4ac>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	3f c0       	rjmp	.+126    	; 0x19a8 <A_LCD_void_FirstState+0x52a>
	else if (__tmp > 65535)
    192a:	6f 81       	ldd	r22, Y+7	; 0x07
    192c:	78 85       	ldd	r23, Y+8	; 0x08
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	4c f5       	brge	.+82     	; 0x1994 <A_LCD_void_FirstState+0x516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	6b 85       	ldd	r22, Y+11	; 0x0b
    1944:	7c 85       	ldd	r23, Y+12	; 0x0c
    1946:	8d 85       	ldd	r24, Y+13	; 0x0d
    1948:	9e 85       	ldd	r25, Y+14	; 0x0e
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	0f c0       	rjmp	.+30     	; 0x198a <A_LCD_void_FirstState+0x50c>
    196c:	80 e9       	ldi	r24, 0x90	; 144
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	8b 83       	std	Y+3, r24	; 0x03
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <A_LCD_void_FirstState+0x4fa>
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	9e 81       	ldd	r25, Y+6	; 0x06
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	69 f7       	brne	.-38     	; 0x196c <A_LCD_void_FirstState+0x4ee>
    1992:	14 c0       	rjmp	.+40     	; 0x19bc <A_LCD_void_FirstState+0x53e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <A_LCD_void_FirstState+0x536>
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		LCD_voidWriteString("1/4");
    19bc:	85 eb       	ldi	r24, 0xB5	; 181
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
}
    19c4:	ca 5b       	subi	r28, 0xBA	; 186
    19c6:	df 4f       	sbci	r29, 0xFF	; 255
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <A_LCD_void_SecondState>:
void A_LCD_void_SecondState(void)
{
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	c4 5c       	subi	r28, 0xC4	; 196
    19ea:	d0 40       	sbci	r29, 0x00	; 0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61

	LCD_voidGoToXY(LINE_4,17);
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	61 e1       	ldi	r22, 0x11	; 17
    19fa:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    19fe:	fe 01       	movw	r30, r28
    1a00:	ef 53       	subi	r30, 0x3F	; 63
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a0 ea       	ldi	r26, 0xA0	; 160
    1a0a:	b1 e4       	ldi	r27, 0x41	; 65
    1a0c:	80 83       	st	Z, r24
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	a2 83       	std	Z+2, r26	; 0x02
    1a12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a14:	8e 01       	movw	r16, r28
    1a16:	03 54       	subi	r16, 0x43	; 67
    1a18:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ef 53       	subi	r30, 0x3F	; 63
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a e7       	ldi	r20, 0x7A	; 122
    1a2e:	55 e4       	ldi	r21, 0x45	; 69
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	f8 01       	movw	r30, r16
    1a3a:	80 83       	st	Z, r24
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	a2 83       	std	Z+2, r26	; 0x02
    1a40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a42:	fe 01       	movw	r30, r28
    1a44:	e3 54       	subi	r30, 0x43	; 67
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e8       	ldi	r20, 0x80	; 128
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	44 f4       	brge	.+16     	; 0x1a70 <A_LCD_void_SecondState+0x94>
		__ticks = 1;
    1a60:	fe 01       	movw	r30, r28
    1a62:	e5 54       	subi	r30, 0x45	; 69
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
    1a6e:	64 c0       	rjmp	.+200    	; 0x1b38 <A_LCD_void_SecondState+0x15c>
	else if (__tmp > 65535)
    1a70:	fe 01       	movw	r30, r28
    1a72:	e3 54       	subi	r30, 0x43	; 67
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	0c f0       	brlt	.+2      	; 0x1a90 <A_LCD_void_SecondState+0xb4>
    1a8e:	43 c0       	rjmp	.+134    	; 0x1b16 <A_LCD_void_SecondState+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	fe 01       	movw	r30, r28
    1a92:	ef 53       	subi	r30, 0x3F	; 63
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8e 01       	movw	r16, r28
    1ab0:	05 54       	subi	r16, 0x45	; 69
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
    1ac6:	1f c0       	rjmp	.+62     	; 0x1b06 <A_LCD_void_SecondState+0x12a>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e7 54       	subi	r30, 0x47	; 71
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 e9       	ldi	r24, 0x90	; 144
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	80 83       	st	Z, r24
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e7 54       	subi	r30, 0x47	; 71
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <A_LCD_void_SecondState+0x104>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e7 54       	subi	r30, 0x47	; 71
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	de 01       	movw	r26, r28
    1af0:	a5 54       	subi	r26, 0x45	; 69
    1af2:	bf 4f       	sbci	r27, 0xFF	; 255
    1af4:	fe 01       	movw	r30, r28
    1af6:	e5 54       	subi	r30, 0x45	; 69
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	11 96       	adiw	r26, 0x01	; 1
    1b02:	9c 93       	st	X, r25
    1b04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	fe 01       	movw	r30, r28
    1b08:	e5 54       	subi	r30, 0x45	; 69
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 81       	ld	r24, Z
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	d1 f6       	brne	.-76     	; 0x1ac8 <A_LCD_void_SecondState+0xec>
    1b14:	27 c0       	rjmp	.+78     	; 0x1b64 <A_LCD_void_SecondState+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	8e 01       	movw	r16, r28
    1b18:	05 54       	subi	r16, 0x45	; 69
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e3 54       	subi	r30, 0x43	; 67
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	f8 01       	movw	r30, r16
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	de 01       	movw	r26, r28
    1b3a:	a9 54       	subi	r26, 0x49	; 73
    1b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e5 54       	subi	r30, 0x45	; 69
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	8d 93       	st	X+, r24
    1b4a:	9c 93       	st	X, r25
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e9 54       	subi	r30, 0x49	; 73
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <A_LCD_void_SecondState+0x17a>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e9 54       	subi	r30, 0x49	; 73
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
	_delay_ms(20);
	LCD_voidWriteString("2/4");
    1b64:	89 eb       	ldi	r24, 0xB9	; 185
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_4,10);
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	6a e0       	ldi	r22, 0x0A	; 10
    1b70:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    1b74:	fe 01       	movw	r30, r28
    1b76:	ed 54       	subi	r30, 0x4D	; 77
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b80:	b1 e4       	ldi	r27, 0x41	; 65
    1b82:	80 83       	st	Z, r24
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	a2 83       	std	Z+2, r26	; 0x02
    1b88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8a:	8e 01       	movw	r16, r28
    1b8c:	01 55       	subi	r16, 0x51	; 81
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	fe 01       	movw	r30, r28
    1b92:	ed 54       	subi	r30, 0x4D	; 77
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a e7       	ldi	r20, 0x7A	; 122
    1ba4:	55 e4       	ldi	r21, 0x45	; 69
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	f8 01       	movw	r30, r16
    1bb0:	80 83       	st	Z, r24
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	a2 83       	std	Z+2, r26	; 0x02
    1bb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e1 55       	subi	r30, 0x51	; 81
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	44 f4       	brge	.+16     	; 0x1be6 <A_LCD_void_SecondState+0x20a>
		__ticks = 1;
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e3 55       	subi	r30, 0x53	; 83
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
    1be4:	64 c0       	rjmp	.+200    	; 0x1cae <A_LCD_void_SecondState+0x2d2>
	else if (__tmp > 65535)
    1be6:	fe 01       	movw	r30, r28
    1be8:	e1 55       	subi	r30, 0x51	; 81
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	3f ef       	ldi	r19, 0xFF	; 255
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	57 e4       	ldi	r21, 0x47	; 71
    1bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	0c f0       	brlt	.+2      	; 0x1c06 <A_LCD_void_SecondState+0x22a>
    1c04:	43 c0       	rjmp	.+134    	; 0x1c8c <A_LCD_void_SecondState+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	fe 01       	movw	r30, r28
    1c08:	ed 54       	subi	r30, 0x4D	; 77
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8e 01       	movw	r16, r28
    1c26:	03 55       	subi	r16, 0x53	; 83
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	1f c0       	rjmp	.+62     	; 0x1c7c <A_LCD_void_SecondState+0x2a0>
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e5 55       	subi	r30, 0x55	; 85
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 e9       	ldi	r24, 0x90	; 144
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e5 55       	subi	r30, 0x55	; 85
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <A_LCD_void_SecondState+0x27a>
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e5 55       	subi	r30, 0x55	; 85
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	de 01       	movw	r26, r28
    1c66:	a3 55       	subi	r26, 0x53	; 83
    1c68:	bf 4f       	sbci	r27, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e3 55       	subi	r30, 0x53	; 83
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	11 96       	adiw	r26, 0x01	; 1
    1c78:	9c 93       	st	X, r25
    1c7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e3 55       	subi	r30, 0x53	; 83
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	91 81       	ldd	r25, Z+1	; 0x01
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	d1 f6       	brne	.-76     	; 0x1c3e <A_LCD_void_SecondState+0x262>
    1c8a:	27 c0       	rjmp	.+78     	; 0x1cda <A_LCD_void_SecondState+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	03 55       	subi	r16, 0x53	; 83
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e1 55       	subi	r30, 0x51	; 81
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	f8 01       	movw	r30, r16
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	de 01       	movw	r26, r28
    1cb0:	a7 55       	subi	r26, 0x57	; 87
    1cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e3 55       	subi	r30, 0x53	; 83
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	8d 93       	st	X+, r24
    1cc0:	9c 93       	st	X, r25
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e7 55       	subi	r30, 0x57	; 87
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <A_LCD_void_SecondState+0x2f0>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e7 55       	subi	r30, 0x57	; 87
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
	_delay_ms(20);
	LCD_voidWriteString("DM:OFF");
    1cda:	8d eb       	ldi	r24, 0xBD	; 189
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_1,4);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	64 e0       	ldi	r22, 0x04	; 4
    1ce6:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    1cea:	fe 01       	movw	r30, r28
    1cec:	eb 55       	subi	r30, 0x5B	; 91
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 ea       	ldi	r26, 0xA0	; 160
    1cf6:	b1 e4       	ldi	r27, 0x41	; 65
    1cf8:	80 83       	st	Z, r24
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	a2 83       	std	Z+2, r26	; 0x02
    1cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	8e 01       	movw	r16, r28
    1d02:	0f 55       	subi	r16, 0x5F	; 95
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	eb 55       	subi	r30, 0x5B	; 91
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a e7       	ldi	r20, 0x7A	; 122
    1d1a:	55 e4       	ldi	r21, 0x45	; 69
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 83       	st	Z, r24
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	a2 83       	std	Z+2, r26	; 0x02
    1d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ef 55       	subi	r30, 0x5F	; 95
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	44 f4       	brge	.+16     	; 0x1d5c <A_LCD_void_SecondState+0x380>
		__ticks = 1;
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e1 56       	subi	r30, 0x61	; 97
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	64 c0       	rjmp	.+200    	; 0x1e24 <A_LCD_void_SecondState+0x448>
	else if (__tmp > 65535)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ef 55       	subi	r30, 0x5F	; 95
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <A_LCD_void_SecondState+0x3a0>
    1d7a:	43 c0       	rjmp	.+134    	; 0x1e02 <A_LCD_void_SecondState+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	eb 55       	subi	r30, 0x5B	; 91
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	01 56       	subi	r16, 0x61	; 97
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	f8 01       	movw	r30, r16
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	1f c0       	rjmp	.+62     	; 0x1df2 <A_LCD_void_SecondState+0x416>
    1db4:	fe 01       	movw	r30, r28
    1db6:	e3 56       	subi	r30, 0x63	; 99
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 e9       	ldi	r24, 0x90	; 144
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e3 56       	subi	r30, 0x63	; 99
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <A_LCD_void_SecondState+0x3f0>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e3 56       	subi	r30, 0x63	; 99
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	de 01       	movw	r26, r28
    1ddc:	a1 56       	subi	r26, 0x61	; 97
    1dde:	bf 4f       	sbci	r27, 0xFF	; 255
    1de0:	fe 01       	movw	r30, r28
    1de2:	e1 56       	subi	r30, 0x61	; 97
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	fe 01       	movw	r30, r28
    1df4:	e1 56       	subi	r30, 0x61	; 97
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	d1 f6       	brne	.-76     	; 0x1db4 <A_LCD_void_SecondState+0x3d8>
    1e00:	27 c0       	rjmp	.+78     	; 0x1e50 <A_LCD_void_SecondState+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	8e 01       	movw	r16, r28
    1e04:	01 56       	subi	r16, 0x61	; 97
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ef 55       	subi	r30, 0x5F	; 95
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	de 01       	movw	r26, r28
    1e26:	a5 56       	subi	r26, 0x65	; 101
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e1 56       	subi	r30, 0x61	; 97
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	8d 93       	st	X+, r24
    1e36:	9c 93       	st	X, r25
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e5 56       	subi	r30, 0x65	; 101
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <A_LCD_void_SecondState+0x466>
    1e46:	fe 01       	movw	r30, r28
    1e48:	e5 56       	subi	r30, 0x65	; 101
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
	_delay_ms(20);
	LCD_voidWriteString("CCS|BA|SP|DM");
    1e50:	8e e7       	ldi	r24, 0x7E	; 126
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e9 56       	subi	r30, 0x69	; 105
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 ea       	ldi	r26, 0xA0	; 160
    1e64:	b1 e4       	ldi	r27, 0x41	; 65
    1e66:	80 83       	st	Z, r24
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	a2 83       	std	Z+2, r26	; 0x02
    1e6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	8e 01       	movw	r16, r28
    1e70:	0d 56       	subi	r16, 0x6D	; 109
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	e9 56       	subi	r30, 0x69	; 105
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a e7       	ldi	r20, 0x7A	; 122
    1e88:	55 e4       	ldi	r21, 0x45	; 69
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	80 83       	st	Z, r24
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	a2 83       	std	Z+2, r26	; 0x02
    1e9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ed 56       	subi	r30, 0x6D	; 109
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	44 f4       	brge	.+16     	; 0x1eca <A_LCD_void_SecondState+0x4ee>
		__ticks = 1;
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ef 56       	subi	r30, 0x6F	; 111
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
    1ec8:	64 c0       	rjmp	.+200    	; 0x1f92 <A_LCD_void_SecondState+0x5b6>
	else if (__tmp > 65535)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ed 56       	subi	r30, 0x6D	; 109
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <A_LCD_void_SecondState+0x50e>
    1ee8:	43 c0       	rjmp	.+134    	; 0x1f70 <A_LCD_void_SecondState+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	fe 01       	movw	r30, r28
    1eec:	e9 56       	subi	r30, 0x69	; 105
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8e 01       	movw	r16, r28
    1f0a:	0f 56       	subi	r16, 0x6F	; 111
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	1f c0       	rjmp	.+62     	; 0x1f60 <A_LCD_void_SecondState+0x584>
    1f22:	fe 01       	movw	r30, r28
    1f24:	e1 57       	subi	r30, 0x71	; 113
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 e9       	ldi	r24, 0x90	; 144
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
    1f30:	fe 01       	movw	r30, r28
    1f32:	e1 57       	subi	r30, 0x71	; 113
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <A_LCD_void_SecondState+0x55e>
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e1 57       	subi	r30, 0x71	; 113
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	de 01       	movw	r26, r28
    1f4a:	af 56       	subi	r26, 0x6F	; 111
    1f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4e:	fe 01       	movw	r30, r28
    1f50:	ef 56       	subi	r30, 0x6F	; 111
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	11 96       	adiw	r26, 0x01	; 1
    1f5c:	9c 93       	st	X, r25
    1f5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	fe 01       	movw	r30, r28
    1f62:	ef 56       	subi	r30, 0x6F	; 111
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	d1 f6       	brne	.-76     	; 0x1f22 <A_LCD_void_SecondState+0x546>
    1f6e:	27 c0       	rjmp	.+78     	; 0x1fbe <A_LCD_void_SecondState+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	8e 01       	movw	r16, r28
    1f72:	0f 56       	subi	r16, 0x6F	; 111
    1f74:	1f 4f       	sbci	r17, 0xFF	; 255
    1f76:	fe 01       	movw	r30, r28
    1f78:	ed 56       	subi	r30, 0x6D	; 109
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
    1f92:	de 01       	movw	r26, r28
    1f94:	a3 57       	subi	r26, 0x73	; 115
    1f96:	bf 4f       	sbci	r27, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ef 56       	subi	r30, 0x6F	; 111
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	8d 93       	st	X+, r24
    1fa4:	9c 93       	st	X, r25
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e3 57       	subi	r30, 0x73	; 115
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <A_LCD_void_SecondState+0x5d4>
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e3 57       	subi	r30, 0x73	; 115
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
	_delay_ms(20);
	LCD_voidGoToXY(LINE_2,4);
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	64 e0       	ldi	r22, 0x04	; 4
    1fc2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteString("---------------------");
    1fc6:	84 ec       	ldi	r24, 0xC4	; 196
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e7 57       	subi	r30, 0x77	; 119
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 ea       	ldi	r26, 0xA0	; 160
    1fda:	b1 e4       	ldi	r27, 0x41	; 65
    1fdc:	80 83       	st	Z, r24
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	a2 83       	std	Z+2, r26	; 0x02
    1fe2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	8e 01       	movw	r16, r28
    1fe6:	0b 57       	subi	r16, 0x7B	; 123
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e7 57       	subi	r30, 0x77	; 119
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a e7       	ldi	r20, 0x7A	; 122
    1ffe:	55 e4       	ldi	r21, 0x45	; 69
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	f8 01       	movw	r30, r16
    200a:	80 83       	st	Z, r24
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	a2 83       	std	Z+2, r26	; 0x02
    2010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2012:	fe 01       	movw	r30, r28
    2014:	eb 57       	subi	r30, 0x7B	; 123
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	44 f4       	brge	.+16     	; 0x2040 <A_LCD_void_SecondState+0x664>
		__ticks = 1;
    2030:	fe 01       	movw	r30, r28
    2032:	ed 57       	subi	r30, 0x7D	; 125
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
    203e:	64 c0       	rjmp	.+200    	; 0x2108 <A_LCD_void_SecondState+0x72c>
	else if (__tmp > 65535)
    2040:	fe 01       	movw	r30, r28
    2042:	eb 57       	subi	r30, 0x7B	; 123
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	3f ef       	ldi	r19, 0xFF	; 255
    2052:	4f e7       	ldi	r20, 0x7F	; 127
    2054:	57 e4       	ldi	r21, 0x47	; 71
    2056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    205a:	18 16       	cp	r1, r24
    205c:	0c f0       	brlt	.+2      	; 0x2060 <A_LCD_void_SecondState+0x684>
    205e:	43 c0       	rjmp	.+134    	; 0x20e6 <A_LCD_void_SecondState+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	fe 01       	movw	r30, r28
    2062:	e7 57       	subi	r30, 0x77	; 119
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8e 01       	movw	r16, r28
    2080:	0d 57       	subi	r16, 0x7D	; 125
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	f8 01       	movw	r30, r16
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	1f c0       	rjmp	.+62     	; 0x20d6 <A_LCD_void_SecondState+0x6fa>
    2098:	fe 01       	movw	r30, r28
    209a:	ef 57       	subi	r30, 0x7F	; 127
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 e9       	ldi	r24, 0x90	; 144
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	fe 01       	movw	r30, r28
    20a8:	ef 57       	subi	r30, 0x7F	; 127
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <A_LCD_void_SecondState+0x6d4>
    20b4:	fe 01       	movw	r30, r28
    20b6:	ef 57       	subi	r30, 0x7F	; 127
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	de 01       	movw	r26, r28
    20c0:	ad 57       	subi	r26, 0x7D	; 125
    20c2:	bf 4f       	sbci	r27, 0xFF	; 255
    20c4:	fe 01       	movw	r30, r28
    20c6:	ed 57       	subi	r30, 0x7D	; 125
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	11 96       	adiw	r26, 0x01	; 1
    20d2:	9c 93       	st	X, r25
    20d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	fe 01       	movw	r30, r28
    20d8:	ed 57       	subi	r30, 0x7D	; 125
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	d1 f6       	brne	.-76     	; 0x2098 <A_LCD_void_SecondState+0x6bc>
    20e4:	27 c0       	rjmp	.+78     	; 0x2134 <A_LCD_void_SecondState+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	8e 01       	movw	r16, r28
    20e8:	0d 57       	subi	r16, 0x7D	; 125
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	fe 01       	movw	r30, r28
    20ee:	eb 57       	subi	r30, 0x7B	; 123
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	f8 01       	movw	r30, r16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	de 01       	movw	r26, r28
    210a:	a1 58       	subi	r26, 0x81	; 129
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	ed 57       	subi	r30, 0x7D	; 125
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	8d 93       	st	X+, r24
    211a:	9c 93       	st	X, r25
    211c:	fe 01       	movw	r30, r28
    211e:	e1 58       	subi	r30, 0x81	; 129
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <A_LCD_void_SecondState+0x74a>
    212a:	fe 01       	movw	r30, r28
    212c:	e1 58       	subi	r30, 0x81	; 129
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
	_delay_ms(20);
	/*Display all systems are off*/
	LCD_voidGoToXY(LINE_3,0);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    213c:	fe 01       	movw	r30, r28
    213e:	e5 58       	subi	r30, 0x85	; 133
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a0 ea       	ldi	r26, 0xA0	; 160
    2148:	b1 e4       	ldi	r27, 0x41	; 65
    214a:	80 83       	st	Z, r24
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	a2 83       	std	Z+2, r26	; 0x02
    2150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2152:	8e 01       	movw	r16, r28
    2154:	09 58       	subi	r16, 0x89	; 137
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e5 58       	subi	r30, 0x85	; 133
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	4a e7       	ldi	r20, 0x7A	; 122
    216c:	55 e4       	ldi	r21, 0x45	; 69
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	80 83       	st	Z, r24
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	a2 83       	std	Z+2, r26	; 0x02
    217e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2180:	fe 01       	movw	r30, r28
    2182:	e9 58       	subi	r30, 0x89	; 137
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	44 f4       	brge	.+16     	; 0x21ae <A_LCD_void_SecondState+0x7d2>
		__ticks = 1;
    219e:	fe 01       	movw	r30, r28
    21a0:	eb 58       	subi	r30, 0x8B	; 139
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	64 c0       	rjmp	.+200    	; 0x2276 <A_LCD_void_SecondState+0x89a>
	else if (__tmp > 65535)
    21ae:	fe 01       	movw	r30, r28
    21b0:	e9 58       	subi	r30, 0x89	; 137
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	0c f0       	brlt	.+2      	; 0x21ce <A_LCD_void_SecondState+0x7f2>
    21cc:	43 c0       	rjmp	.+134    	; 0x2254 <A_LCD_void_SecondState+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	fe 01       	movw	r30, r28
    21d0:	e5 58       	subi	r30, 0x85	; 133
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8e 01       	movw	r16, r28
    21ee:	0b 58       	subi	r16, 0x8B	; 139
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
    2204:	1f c0       	rjmp	.+62     	; 0x2244 <A_LCD_void_SecondState+0x868>
    2206:	fe 01       	movw	r30, r28
    2208:	ed 58       	subi	r30, 0x8D	; 141
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 e9       	ldi	r24, 0x90	; 144
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	fe 01       	movw	r30, r28
    2216:	ed 58       	subi	r30, 0x8D	; 141
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <A_LCD_void_SecondState+0x842>
    2222:	fe 01       	movw	r30, r28
    2224:	ed 58       	subi	r30, 0x8D	; 141
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	de 01       	movw	r26, r28
    222e:	ab 58       	subi	r26, 0x8B	; 139
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	fe 01       	movw	r30, r28
    2234:	eb 58       	subi	r30, 0x8B	; 139
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	11 96       	adiw	r26, 0x01	; 1
    2240:	9c 93       	st	X, r25
    2242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2244:	fe 01       	movw	r30, r28
    2246:	eb 58       	subi	r30, 0x8B	; 139
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	d1 f6       	brne	.-76     	; 0x2206 <A_LCD_void_SecondState+0x82a>
    2252:	27 c0       	rjmp	.+78     	; 0x22a2 <A_LCD_void_SecondState+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	8e 01       	movw	r16, r28
    2256:	0b 58       	subi	r16, 0x8B	; 139
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	e9 58       	subi	r30, 0x89	; 137
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	f8 01       	movw	r30, r16
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
    2276:	de 01       	movw	r26, r28
    2278:	af 58       	subi	r26, 0x8F	; 143
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	eb 58       	subi	r30, 0x8B	; 139
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	8d 93       	st	X+, r24
    2288:	9c 93       	st	X, r25
    228a:	fe 01       	movw	r30, r28
    228c:	ef 58       	subi	r30, 0x8F	; 143
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 81       	ld	r24, Z
    2292:	91 81       	ldd	r25, Z+1	; 0x01
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <A_LCD_void_SecondState+0x8b8>
    2298:	fe 01       	movw	r30, r28
    229a:	ef 58       	subi	r30, 0x8F	; 143
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	80 83       	st	Z, r24
	_delay_ms(20);
	LCD_voidWriteString("CCS:OFF");
    22a2:	8a ed       	ldi	r24, 0xDA	; 218
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_3,10);
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	6a e0       	ldi	r22, 0x0A	; 10
    22ae:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    22b2:	fe 01       	movw	r30, r28
    22b4:	e3 59       	subi	r30, 0x93	; 147
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 ea       	ldi	r26, 0xA0	; 160
    22be:	b1 e4       	ldi	r27, 0x41	; 65
    22c0:	80 83       	st	Z, r24
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	a2 83       	std	Z+2, r26	; 0x02
    22c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	8e 01       	movw	r16, r28
    22ca:	07 59       	subi	r16, 0x97	; 151
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	e3 59       	subi	r30, 0x93	; 147
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a e7       	ldi	r20, 0x7A	; 122
    22e2:	55 e4       	ldi	r21, 0x45	; 69
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f6:	fe 01       	movw	r30, r28
    22f8:	e7 59       	subi	r30, 0x97	; 151
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	44 f4       	brge	.+16     	; 0x2324 <A_LCD_void_SecondState+0x948>
		__ticks = 1;
    2314:	fe 01       	movw	r30, r28
    2316:	e9 59       	subi	r30, 0x99	; 153
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    2322:	64 c0       	rjmp	.+200    	; 0x23ec <A_LCD_void_SecondState+0xa10>
	else if (__tmp > 65535)
    2324:	fe 01       	movw	r30, r28
    2326:	e7 59       	subi	r30, 0x97	; 151
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	0c f0       	brlt	.+2      	; 0x2344 <A_LCD_void_SecondState+0x968>
    2342:	43 c0       	rjmp	.+134    	; 0x23ca <A_LCD_void_SecondState+0x9ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	fe 01       	movw	r30, r28
    2346:	e3 59       	subi	r30, 0x93	; 147
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8e 01       	movw	r16, r28
    2364:	09 59       	subi	r16, 0x99	; 153
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	f8 01       	movw	r30, r16
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
    237a:	1f c0       	rjmp	.+62     	; 0x23ba <A_LCD_void_SecondState+0x9de>
    237c:	fe 01       	movw	r30, r28
    237e:	eb 59       	subi	r30, 0x9B	; 155
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 e9       	ldi	r24, 0x90	; 144
    2384:	91 e0       	ldi	r25, 0x01	; 1
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
    238a:	fe 01       	movw	r30, r28
    238c:	eb 59       	subi	r30, 0x9B	; 155
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <A_LCD_void_SecondState+0x9b8>
    2398:	fe 01       	movw	r30, r28
    239a:	eb 59       	subi	r30, 0x9B	; 155
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	de 01       	movw	r26, r28
    23a4:	a9 59       	subi	r26, 0x99	; 153
    23a6:	bf 4f       	sbci	r27, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	e9 59       	subi	r30, 0x99	; 153
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	11 96       	adiw	r26, 0x01	; 1
    23b6:	9c 93       	st	X, r25
    23b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	fe 01       	movw	r30, r28
    23bc:	e9 59       	subi	r30, 0x99	; 153
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	d1 f6       	brne	.-76     	; 0x237c <A_LCD_void_SecondState+0x9a0>
    23c8:	27 c0       	rjmp	.+78     	; 0x2418 <A_LCD_void_SecondState+0xa3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	8e 01       	movw	r16, r28
    23cc:	09 59       	subi	r16, 0x99	; 153
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	fe 01       	movw	r30, r28
    23d2:	e7 59       	subi	r30, 0x97	; 151
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
    23ec:	de 01       	movw	r26, r28
    23ee:	ad 59       	subi	r26, 0x9D	; 157
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e9 59       	subi	r30, 0x99	; 153
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	8d 93       	st	X+, r24
    23fe:	9c 93       	st	X, r25
    2400:	fe 01       	movw	r30, r28
    2402:	ed 59       	subi	r30, 0x9D	; 157
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <A_LCD_void_SecondState+0xa2e>
    240e:	fe 01       	movw	r30, r28
    2410:	ed 59       	subi	r30, 0x9D	; 157
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
	_delay_ms(20);
	LCD_voidWriteString("BA:OFF");
    2418:	82 ee       	ldi	r24, 0xE2	; 226
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_4,0);
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    2428:	fe 01       	movw	r30, r28
    242a:	e1 5a       	subi	r30, 0xA1	; 161
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 ea       	ldi	r26, 0xA0	; 160
    2434:	b1 e4       	ldi	r27, 0x41	; 65
    2436:	80 83       	st	Z, r24
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	a2 83       	std	Z+2, r26	; 0x02
    243c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	8e 01       	movw	r16, r28
    2440:	05 5a       	subi	r16, 0xA5	; 165
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	fe 01       	movw	r30, r28
    2446:	e1 5a       	subi	r30, 0xA1	; 161
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	55 e4       	ldi	r21, 0x45	; 69
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	f8 01       	movw	r30, r16
    2464:	80 83       	st	Z, r24
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	a2 83       	std	Z+2, r26	; 0x02
    246a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    246c:	fe 01       	movw	r30, r28
    246e:	e5 5a       	subi	r30, 0xA5	; 165
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	44 f4       	brge	.+16     	; 0x249a <A_LCD_void_SecondState+0xabe>
		__ticks = 1;
    248a:	fe 01       	movw	r30, r28
    248c:	e7 5a       	subi	r30, 0xA7	; 167
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	64 c0       	rjmp	.+200    	; 0x2562 <A_LCD_void_SecondState+0xb86>
	else if (__tmp > 65535)
    249a:	fe 01       	movw	r30, r28
    249c:	e5 5a       	subi	r30, 0xA5	; 165
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	0c f0       	brlt	.+2      	; 0x24ba <A_LCD_void_SecondState+0xade>
    24b8:	43 c0       	rjmp	.+134    	; 0x2540 <A_LCD_void_SecondState+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	fe 01       	movw	r30, r28
    24bc:	e1 5a       	subi	r30, 0xA1	; 161
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8e 01       	movw	r16, r28
    24da:	07 5a       	subi	r16, 0xA7	; 167
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	f8 01       	movw	r30, r16
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
    24f0:	1f c0       	rjmp	.+62     	; 0x2530 <A_LCD_void_SecondState+0xb54>
    24f2:	fe 01       	movw	r30, r28
    24f4:	e9 5a       	subi	r30, 0xA9	; 169
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 e9       	ldi	r24, 0x90	; 144
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	fe 01       	movw	r30, r28
    2502:	e9 5a       	subi	r30, 0xA9	; 169
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <A_LCD_void_SecondState+0xb2e>
    250e:	fe 01       	movw	r30, r28
    2510:	e9 5a       	subi	r30, 0xA9	; 169
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	de 01       	movw	r26, r28
    251a:	a7 5a       	subi	r26, 0xA7	; 167
    251c:	bf 4f       	sbci	r27, 0xFF	; 255
    251e:	fe 01       	movw	r30, r28
    2520:	e7 5a       	subi	r30, 0xA7	; 167
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	9c 93       	st	X, r25
    252e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	fe 01       	movw	r30, r28
    2532:	e7 5a       	subi	r30, 0xA7	; 167
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	d1 f6       	brne	.-76     	; 0x24f2 <A_LCD_void_SecondState+0xb16>
    253e:	27 c0       	rjmp	.+78     	; 0x258e <A_LCD_void_SecondState+0xbb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	8e 01       	movw	r16, r28
    2542:	07 5a       	subi	r16, 0xA7	; 167
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	fe 01       	movw	r30, r28
    2548:	e5 5a       	subi	r30, 0xA5	; 165
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	f8 01       	movw	r30, r16
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	de 01       	movw	r26, r28
    2564:	ab 5a       	subi	r26, 0xAB	; 171
    2566:	bf 4f       	sbci	r27, 0xFF	; 255
    2568:	fe 01       	movw	r30, r28
    256a:	e7 5a       	subi	r30, 0xA7	; 167
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	8d 93       	st	X+, r24
    2574:	9c 93       	st	X, r25
    2576:	fe 01       	movw	r30, r28
    2578:	eb 5a       	subi	r30, 0xAB	; 171
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <A_LCD_void_SecondState+0xba4>
    2584:	fe 01       	movw	r30, r28
    2586:	eb 5a       	subi	r30, 0xAB	; 171
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
	_delay_ms(20);
	LCD_voidWriteString("SP:OFF");
    258e:	89 ee       	ldi	r24, 0xE9	; 233
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	if(GearPosition==N||GearPosition==R)
    2596:	80 91 5a 01 	lds	r24, 0x015A
    259a:	88 23       	and	r24, r24
    259c:	09 f4       	brne	.+2      	; 0x25a0 <A_LCD_void_SecondState+0xbc4>
    259e:	5a c3       	rjmp	.+1716   	; 0x2c54 <A_LCD_void_SecondState+0x1278>
    25a0:	80 91 5a 01 	lds	r24, 0x015A
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	09 f4       	brne	.+2      	; 0x25aa <A_LCD_void_SecondState+0xbce>
    25a8:	55 c3       	rjmp	.+1706   	; 0x2c54 <A_LCD_void_SecondState+0x1278>
	{

	}
	else if(GearPosition==D)
    25aa:	80 91 5a 01 	lds	r24, 0x015A
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <A_LCD_void_SecondState+0xbd8>
    25b2:	50 c3       	rjmp	.+1696   	; 0x2c54 <A_LCD_void_SecondState+0x1278>
	{
		if(CSSStatus==CSS_OFF)
    25b4:	80 91 56 01 	lds	r24, 0x0156
    25b8:	88 23       	and	r24, r24
    25ba:	09 f0       	breq	.+2      	; 0x25be <A_LCD_void_SecondState+0xbe2>
    25bc:	bc c0       	rjmp	.+376    	; 0x2736 <A_LCD_void_SecondState+0xd5a>
		{
			/*CCS:ON*/
			LCD_voidGoToXY(LINE_3,0);
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    25c6:	fe 01       	movw	r30, r28
    25c8:	ef 5a       	subi	r30, 0xAF	; 175
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 ea       	ldi	r26, 0xA0	; 160
    25d2:	b1 e4       	ldi	r27, 0x41	; 65
    25d4:	80 83       	st	Z, r24
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	a2 83       	std	Z+2, r26	; 0x02
    25da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25dc:	8e 01       	movw	r16, r28
    25de:	03 5b       	subi	r16, 0xB3	; 179
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	ef 5a       	subi	r30, 0xAF	; 175
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	55 e4       	ldi	r21, 0x45	; 69
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	f8 01       	movw	r30, r16
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    260a:	fe 01       	movw	r30, r28
    260c:	e3 5b       	subi	r30, 0xB3	; 179
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e8       	ldi	r20, 0x80	; 128
    261e:	5f e3       	ldi	r21, 0x3F	; 63
    2620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2624:	88 23       	and	r24, r24
    2626:	44 f4       	brge	.+16     	; 0x2638 <A_LCD_void_SecondState+0xc5c>
		__ticks = 1;
    2628:	fe 01       	movw	r30, r28
    262a:	e5 5b       	subi	r30, 0xB5	; 181
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	64 c0       	rjmp	.+200    	; 0x2700 <A_LCD_void_SecondState+0xd24>
	else if (__tmp > 65535)
    2638:	fe 01       	movw	r30, r28
    263a:	e3 5b       	subi	r30, 0xB3	; 179
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	57 e4       	ldi	r21, 0x47	; 71
    264e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	0c f0       	brlt	.+2      	; 0x2658 <A_LCD_void_SecondState+0xc7c>
    2656:	43 c0       	rjmp	.+134    	; 0x26de <A_LCD_void_SecondState+0xd02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	fe 01       	movw	r30, r28
    265a:	ef 5a       	subi	r30, 0xAF	; 175
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8e 01       	movw	r16, r28
    2678:	05 5b       	subi	r16, 0xB5	; 181
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	f8 01       	movw	r30, r16
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	1f c0       	rjmp	.+62     	; 0x26ce <A_LCD_void_SecondState+0xcf2>
    2690:	fe 01       	movw	r30, r28
    2692:	e7 5b       	subi	r30, 0xB7	; 183
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 e9       	ldi	r24, 0x90	; 144
    2698:	91 e0       	ldi	r25, 0x01	; 1
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
    269e:	fe 01       	movw	r30, r28
    26a0:	e7 5b       	subi	r30, 0xB7	; 183
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <A_LCD_void_SecondState+0xccc>
    26ac:	fe 01       	movw	r30, r28
    26ae:	e7 5b       	subi	r30, 0xB7	; 183
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	de 01       	movw	r26, r28
    26b8:	a5 5b       	subi	r26, 0xB5	; 181
    26ba:	bf 4f       	sbci	r27, 0xFF	; 255
    26bc:	fe 01       	movw	r30, r28
    26be:	e5 5b       	subi	r30, 0xB5	; 181
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	11 96       	adiw	r26, 0x01	; 1
    26ca:	9c 93       	st	X, r25
    26cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ce:	fe 01       	movw	r30, r28
    26d0:	e5 5b       	subi	r30, 0xB5	; 181
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	d1 f6       	brne	.-76     	; 0x2690 <A_LCD_void_SecondState+0xcb4>
    26dc:	27 c0       	rjmp	.+78     	; 0x272c <A_LCD_void_SecondState+0xd50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	8e 01       	movw	r16, r28
    26e0:	05 5b       	subi	r16, 0xB5	; 181
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
    26e4:	fe 01       	movw	r30, r28
    26e6:	e3 5b       	subi	r30, 0xB3	; 179
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	f8 01       	movw	r30, r16
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	de 01       	movw	r26, r28
    2702:	a9 5b       	subi	r26, 0xB9	; 185
    2704:	bf 4f       	sbci	r27, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	e5 5b       	subi	r30, 0xB5	; 181
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	8d 93       	st	X+, r24
    2712:	9c 93       	st	X, r25
    2714:	fe 01       	movw	r30, r28
    2716:	e9 5b       	subi	r30, 0xB9	; 185
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <A_LCD_void_SecondState+0xd42>
    2722:	fe 01       	movw	r30, r28
    2724:	e9 5b       	subi	r30, 0xB9	; 185
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
			_delay_ms(20);
			LCD_voidWriteString("CCS:OFF");
    272c:	8a ed       	ldi	r24, 0xDA	; 218
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    2734:	92 c0       	rjmp	.+292    	; 0x285a <A_LCD_void_SecondState+0xe7e>
		}
		else if(CSSStatus==CSS_ON)
    2736:	80 91 56 01 	lds	r24, 0x0156
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	09 f0       	breq	.+2      	; 0x2740 <A_LCD_void_SecondState+0xd64>
    273e:	8d c0       	rjmp	.+282    	; 0x285a <A_LCD_void_SecondState+0xe7e>
		{
			/*CCS:ON*/
			LCD_voidGoToXY(LINE_3,0);
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    2748:	fe 01       	movw	r30, r28
    274a:	ed 5b       	subi	r30, 0xBD	; 189
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a0 ea       	ldi	r26, 0xA0	; 160
    2754:	b1 e4       	ldi	r27, 0x41	; 65
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	8e 01       	movw	r16, r28
    2760:	01 5c       	subi	r16, 0xC1	; 193
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	fe 01       	movw	r30, r28
    2766:	ed 5b       	subi	r30, 0xBD	; 189
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	55 e4       	ldi	r21, 0x45	; 69
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	f8 01       	movw	r30, r16
    2784:	80 83       	st	Z, r24
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	a2 83       	std	Z+2, r26	; 0x02
    278a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    278c:	fe 01       	movw	r30, r28
    278e:	ff 96       	adiw	r30, 0x3f	; 63
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <A_LCD_void_SecondState+0xdd6>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9e af       	std	Y+62, r25	; 0x3e
    27ae:	8d af       	std	Y+61, r24	; 0x3d
    27b0:	46 c0       	rjmp	.+140    	; 0x283e <A_LCD_void_SecondState+0xe62>
	else if (__tmp > 65535)
    27b2:	fe 01       	movw	r30, r28
    27b4:	ff 96       	adiw	r30, 0x3f	; 63
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	64 f5       	brge	.+88     	; 0x2826 <A_LCD_void_SecondState+0xe4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	fe 01       	movw	r30, r28
    27d0:	ed 5b       	subi	r30, 0xBD	; 189
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9e af       	std	Y+62, r25	; 0x3e
    27fa:	8d af       	std	Y+61, r24	; 0x3d
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <A_LCD_void_SecondState+0xe40>
    27fe:	80 e9       	ldi	r24, 0x90	; 144
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	9c af       	std	Y+60, r25	; 0x3c
    2804:	8b af       	std	Y+59, r24	; 0x3b
    2806:	8b ad       	ldd	r24, Y+59	; 0x3b
    2808:	9c ad       	ldd	r25, Y+60	; 0x3c
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <A_LCD_void_SecondState+0xe2e>
    280e:	9c af       	std	Y+60, r25	; 0x3c
    2810:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8d ad       	ldd	r24, Y+61	; 0x3d
    2814:	9e ad       	ldd	r25, Y+62	; 0x3e
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9e af       	std	Y+62, r25	; 0x3e
    281a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8d ad       	ldd	r24, Y+61	; 0x3d
    281e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <A_LCD_void_SecondState+0xe22>
    2824:	16 c0       	rjmp	.+44     	; 0x2852 <A_LCD_void_SecondState+0xe76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	fe 01       	movw	r30, r28
    2828:	ff 96       	adiw	r30, 0x3f	; 63
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e af       	std	Y+62, r25	; 0x3e
    283c:	8d af       	std	Y+61, r24	; 0x3d
    283e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2840:	9e ad       	ldd	r25, Y+62	; 0x3e
    2842:	9a af       	std	Y+58, r25	; 0x3a
    2844:	89 af       	std	Y+57, r24	; 0x39
    2846:	89 ad       	ldd	r24, Y+57	; 0x39
    2848:	9a ad       	ldd	r25, Y+58	; 0x3a
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <A_LCD_void_SecondState+0xe6e>
    284e:	9a af       	std	Y+58, r25	; 0x3a
    2850:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(20);
			LCD_voidWriteString("CCS:ON ");
    2852:	80 ef       	ldi	r24, 0xF0	; 240
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		}
		if(BAStatus==BA_OFF)
    285a:	80 91 57 01 	lds	r24, 0x0157
    285e:	88 23       	and	r24, r24
    2860:	09 f0       	breq	.+2      	; 0x2864 <A_LCD_void_SecondState+0xe88>
    2862:	7b c0       	rjmp	.+246    	; 0x295a <A_LCD_void_SecondState+0xf7e>
		{
			/*BA:ON*/
			LCD_voidGoToXY(LINE_3,10);
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	6a e0       	ldi	r22, 0x0A	; 10
    2868:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 ea       	ldi	r26, 0xA0	; 160
    2872:	b1 e4       	ldi	r27, 0x41	; 65
    2874:	8d ab       	std	Y+53, r24	; 0x35
    2876:	9e ab       	std	Y+54, r25	; 0x36
    2878:	af ab       	std	Y+55, r26	; 0x37
    287a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	6d a9       	ldd	r22, Y+53	; 0x35
    287e:	7e a9       	ldd	r23, Y+54	; 0x36
    2880:	8f a9       	ldd	r24, Y+55	; 0x37
    2882:	98 ad       	ldd	r25, Y+56	; 0x38
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a e7       	ldi	r20, 0x7A	; 122
    288a:	55 e4       	ldi	r21, 0x45	; 69
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	89 ab       	std	Y+49, r24	; 0x31
    2896:	9a ab       	std	Y+50, r25	; 0x32
    2898:	ab ab       	std	Y+51, r26	; 0x33
    289a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    289c:	69 a9       	ldd	r22, Y+49	; 0x31
    289e:	7a a9       	ldd	r23, Y+50	; 0x32
    28a0:	8b a9       	ldd	r24, Y+51	; 0x33
    28a2:	9c a9       	ldd	r25, Y+52	; 0x34
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <A_LCD_void_SecondState+0xee2>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	98 ab       	std	Y+48, r25	; 0x30
    28ba:	8f a7       	std	Y+47, r24	; 0x2f
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <A_LCD_void_SecondState+0xf60>
	else if (__tmp > 65535)
    28be:	69 a9       	ldd	r22, Y+49	; 0x31
    28c0:	7a a9       	ldd	r23, Y+50	; 0x32
    28c2:	8b a9       	ldd	r24, Y+51	; 0x33
    28c4:	9c a9       	ldd	r25, Y+52	; 0x34
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <A_LCD_void_SecondState+0xf4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	6d a9       	ldd	r22, Y+53	; 0x35
    28d8:	7e a9       	ldd	r23, Y+54	; 0x36
    28da:	8f a9       	ldd	r24, Y+55	; 0x37
    28dc:	98 ad       	ldd	r25, Y+56	; 0x38
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	98 ab       	std	Y+48, r25	; 0x30
    28fc:	8f a7       	std	Y+47, r24	; 0x2f
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <A_LCD_void_SecondState+0xf42>
    2900:	80 e9       	ldi	r24, 0x90	; 144
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	9e a7       	std	Y+46, r25	; 0x2e
    2906:	8d a7       	std	Y+45, r24	; 0x2d
    2908:	8d a5       	ldd	r24, Y+45	; 0x2d
    290a:	9e a5       	ldd	r25, Y+46	; 0x2e
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <A_LCD_void_SecondState+0xf30>
    2910:	9e a7       	std	Y+46, r25	; 0x2e
    2912:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8f a5       	ldd	r24, Y+47	; 0x2f
    2916:	98 a9       	ldd	r25, Y+48	; 0x30
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	98 ab       	std	Y+48, r25	; 0x30
    291c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2920:	98 a9       	ldd	r25, Y+48	; 0x30
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <A_LCD_void_SecondState+0xf24>
    2926:	14 c0       	rjmp	.+40     	; 0x2950 <A_LCD_void_SecondState+0xf74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	69 a9       	ldd	r22, Y+49	; 0x31
    292a:	7a a9       	ldd	r23, Y+50	; 0x32
    292c:	8b a9       	ldd	r24, Y+51	; 0x33
    292e:	9c a9       	ldd	r25, Y+52	; 0x34
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	98 ab       	std	Y+48, r25	; 0x30
    293a:	8f a7       	std	Y+47, r24	; 0x2f
    293c:	8f a5       	ldd	r24, Y+47	; 0x2f
    293e:	98 a9       	ldd	r25, Y+48	; 0x30
    2940:	9c a7       	std	Y+44, r25	; 0x2c
    2942:	8b a7       	std	Y+43, r24	; 0x2b
    2944:	8b a5       	ldd	r24, Y+43	; 0x2b
    2946:	9c a5       	ldd	r25, Y+44	; 0x2c
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <A_LCD_void_SecondState+0xf6c>
    294c:	9c a7       	std	Y+44, r25	; 0x2c
    294e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(20);
			LCD_voidWriteString("BA:OFF");
    2950:	82 ee       	ldi	r24, 0xE2	; 226
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    2958:	7f c0       	rjmp	.+254    	; 0x2a58 <A_LCD_void_SecondState+0x107c>
		}
		else if(BAStatus==BA_ON)
    295a:	80 91 57 01 	lds	r24, 0x0157
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	09 f0       	breq	.+2      	; 0x2964 <A_LCD_void_SecondState+0xf88>
    2962:	7a c0       	rjmp	.+244    	; 0x2a58 <A_LCD_void_SecondState+0x107c>
		{
			/*BA:ON*/
			LCD_voidGoToXY(LINE_3,10);
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	6a e0       	ldi	r22, 0x0A	; 10
    2968:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	a0 ea       	ldi	r26, 0xA0	; 160
    2972:	b1 e4       	ldi	r27, 0x41	; 65
    2974:	8f a3       	std	Y+39, r24	; 0x27
    2976:	98 a7       	std	Y+40, r25	; 0x28
    2978:	a9 a7       	std	Y+41, r26	; 0x29
    297a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6f a1       	ldd	r22, Y+39	; 0x27
    297e:	78 a5       	ldd	r23, Y+40	; 0x28
    2980:	89 a5       	ldd	r24, Y+41	; 0x29
    2982:	9a a5       	ldd	r25, Y+42	; 0x2a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a e7       	ldi	r20, 0x7A	; 122
    298a:	55 e4       	ldi	r21, 0x45	; 69
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8b a3       	std	Y+35, r24	; 0x23
    2996:	9c a3       	std	Y+36, r25	; 0x24
    2998:	ad a3       	std	Y+37, r26	; 0x25
    299a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    299c:	6b a1       	ldd	r22, Y+35	; 0x23
    299e:	7c a1       	ldd	r23, Y+36	; 0x24
    29a0:	8d a1       	ldd	r24, Y+37	; 0x25
    29a2:	9e a1       	ldd	r25, Y+38	; 0x26
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <A_LCD_void_SecondState+0xfe2>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9a a3       	std	Y+34, r25	; 0x22
    29ba:	89 a3       	std	Y+33, r24	; 0x21
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <A_LCD_void_SecondState+0x1060>
	else if (__tmp > 65535)
    29be:	6b a1       	ldd	r22, Y+35	; 0x23
    29c0:	7c a1       	ldd	r23, Y+36	; 0x24
    29c2:	8d a1       	ldd	r24, Y+37	; 0x25
    29c4:	9e a1       	ldd	r25, Y+38	; 0x26
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <A_LCD_void_SecondState+0x104c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6f a1       	ldd	r22, Y+39	; 0x27
    29d8:	78 a5       	ldd	r23, Y+40	; 0x28
    29da:	89 a5       	ldd	r24, Y+41	; 0x29
    29dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <A_LCD_void_SecondState+0x1042>
    2a00:	80 e9       	ldi	r24, 0x90	; 144
    2a02:	91 e0       	ldi	r25, 0x01	; 1
    2a04:	98 a3       	std	Y+32, r25	; 0x20
    2a06:	8f 8f       	std	Y+31, r24	; 0x1f
    2a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a0a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <A_LCD_void_SecondState+0x1030>
    2a10:	98 a3       	std	Y+32, r25	; 0x20
    2a12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	89 a1       	ldd	r24, Y+33	; 0x21
    2a16:	9a a1       	ldd	r25, Y+34	; 0x22
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9a a3       	std	Y+34, r25	; 0x22
    2a1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a20:	9a a1       	ldd	r25, Y+34	; 0x22
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <A_LCD_void_SecondState+0x1024>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <A_LCD_void_SecondState+0x1074>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9a a3       	std	Y+34, r25	; 0x22
    2a3a:	89 a3       	std	Y+33, r24	; 0x21
    2a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a40:	9e 8f       	std	Y+30, r25	; 0x1e
    2a42:	8d 8f       	std	Y+29, r24	; 0x1d
    2a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <A_LCD_void_SecondState+0x106c>
    2a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a4e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(20);
			LCD_voidWriteString("BA:ON ");
    2a50:	88 ef       	ldi	r24, 0xF8	; 248
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		}
		if(SPStatus==SP_ON)
    2a58:	80 91 58 01 	lds	r24, 0x0158
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <A_LCD_void_SecondState+0x1086>
    2a60:	7a c0       	rjmp	.+244    	; 0x2b56 <A_LCD_void_SecondState+0x117a>
		{
			/*SP:ON*/
			LCD_voidGoToXY(LINE_4,0);
    2a62:	83 e0       	ldi	r24, 0x03	; 3
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a0 ea       	ldi	r26, 0xA0	; 160
    2a70:	b1 e4       	ldi	r27, 0x41	; 65
    2a72:	89 8f       	std	Y+25, r24	; 0x19
    2a74:	9a 8f       	std	Y+26, r25	; 0x1a
    2a76:	ab 8f       	std	Y+27, r26	; 0x1b
    2a78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a e7       	ldi	r20, 0x7A	; 122
    2a88:	55 e4       	ldi	r21, 0x45	; 69
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8d 8b       	std	Y+21, r24	; 0x15
    2a94:	9e 8b       	std	Y+22, r25	; 0x16
    2a96:	af 8b       	std	Y+23, r26	; 0x17
    2a98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	2c f4       	brge	.+10     	; 0x2abc <A_LCD_void_SecondState+0x10e0>
		__ticks = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9c 8b       	std	Y+20, r25	; 0x14
    2ab8:	8b 8b       	std	Y+19, r24	; 0x13
    2aba:	3f c0       	rjmp	.+126    	; 0x2b3a <A_LCD_void_SecondState+0x115e>
	else if (__tmp > 65535)
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	4f e7       	ldi	r20, 0x7F	; 127
    2aca:	57 e4       	ldi	r21, 0x47	; 71
    2acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad0:	18 16       	cp	r1, r24
    2ad2:	4c f5       	brge	.+82     	; 0x2b26 <A_LCD_void_SecondState+0x114a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e2       	ldi	r20, 0x20	; 32
    2ae2:	51 e4       	ldi	r21, 0x41	; 65
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
    2afc:	0f c0       	rjmp	.+30     	; 0x2b1c <A_LCD_void_SecondState+0x1140>
    2afe:	80 e9       	ldi	r24, 0x90	; 144
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	9a 8b       	std	Y+18, r25	; 0x12
    2b04:	89 8b       	std	Y+17, r24	; 0x11
    2b06:	89 89       	ldd	r24, Y+17	; 0x11
    2b08:	9a 89       	ldd	r25, Y+18	; 0x12
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <A_LCD_void_SecondState+0x112e>
    2b0e:	9a 8b       	std	Y+18, r25	; 0x12
    2b10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b12:	8b 89       	ldd	r24, Y+19	; 0x13
    2b14:	9c 89       	ldd	r25, Y+20	; 0x14
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	69 f7       	brne	.-38     	; 0x2afe <A_LCD_void_SecondState+0x1122>
    2b24:	14 c0       	rjmp	.+40     	; 0x2b4e <A_LCD_void_SecondState+0x1172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9c 8b       	std	Y+20, r25	; 0x14
    2b38:	8b 8b       	std	Y+19, r24	; 0x13
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3e:	98 8b       	std	Y+16, r25	; 0x10
    2b40:	8f 87       	std	Y+15, r24	; 0x0f
    2b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b44:	98 89       	ldd	r25, Y+16	; 0x10
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <A_LCD_void_SecondState+0x116a>
    2b4a:	98 8b       	std	Y+16, r25	; 0x10
    2b4c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			LCD_voidWriteString("SP:ON ");
    2b4e:	8f ef       	ldi	r24, 0xFF	; 255
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		}
		if(SPStatus==SP_OFF)
    2b56:	80 91 58 01 	lds	r24, 0x0158
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <A_LCD_void_SecondState+0x1184>
    2b5e:	7a c0       	rjmp	.+244    	; 0x2c54 <A_LCD_void_SecondState+0x1278>
		{
			/*SP:ON*/
			LCD_voidGoToXY(LINE_4,0);
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2b6e:	b1 e4       	ldi	r27, 0x41	; 65
    2b70:	8b 87       	std	Y+11, r24	; 0x0b
    2b72:	9c 87       	std	Y+12, r25	; 0x0c
    2b74:	ad 87       	std	Y+13, r26	; 0x0d
    2b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	55 e4       	ldi	r21, 0x45	; 69
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8f 83       	std	Y+7, r24	; 0x07
    2b92:	98 87       	std	Y+8, r25	; 0x08
    2b94:	a9 87       	std	Y+9, r26	; 0x09
    2b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <A_LCD_void_SecondState+0x11de>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <A_LCD_void_SecondState+0x125c>
	else if (__tmp > 65535)
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <A_LCD_void_SecondState+0x1248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <A_LCD_void_SecondState+0x123e>
    2bfc:	80 e9       	ldi	r24, 0x90	; 144
    2bfe:	91 e0       	ldi	r25, 0x01	; 1
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <A_LCD_void_SecondState+0x122c>
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <A_LCD_void_SecondState+0x1220>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <A_LCD_void_SecondState+0x1270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <A_LCD_void_SecondState+0x1268>
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			LCD_voidWriteString("SP:OFF");
    2c4c:	89 ee       	ldi	r24, 0xE9	; 233
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		}
	}

}
    2c54:	cc 53       	subi	r28, 0x3C	; 60
    2c56:	df 4f       	sbci	r29, 0xFF	; 255
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <A_LCD_void_ThirdState>:
void A_LCD_void_ThirdState(void)
{
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	c6 54       	subi	r28, 0x46	; 70
    2c7a:	d0 40       	sbci	r29, 0x00	; 0
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoToXY(LINE_4,17);
    2c86:	83 e0       	ldi	r24, 0x03	; 3
    2c88:	61 e1       	ldi	r22, 0x11	; 17
    2c8a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ed 5b       	subi	r30, 0xBD	; 189
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a0 ea       	ldi	r26, 0xA0	; 160
    2c9a:	b1 e4       	ldi	r27, 0x41	; 65
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	01 5c       	subi	r16, 0xC1	; 193
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	ed 5b       	subi	r30, 0xBD	; 189
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a e7       	ldi	r20, 0x7A	; 122
    2cbe:	55 e4       	ldi	r21, 0x45	; 69
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ff 96       	adiw	r30, 0x3f	; 63
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	2c f4       	brge	.+10     	; 0x2cf8 <A_LCD_void_ThirdState+0x8c>
		__ticks = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9e af       	std	Y+62, r25	; 0x3e
    2cf4:	8d af       	std	Y+61, r24	; 0x3d
    2cf6:	46 c0       	rjmp	.+140    	; 0x2d84 <A_LCD_void_ThirdState+0x118>
	else if (__tmp > 65535)
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	ff 96       	adiw	r30, 0x3f	; 63
    2cfc:	60 81       	ld	r22, Z
    2cfe:	71 81       	ldd	r23, Z+1	; 0x01
    2d00:	82 81       	ldd	r24, Z+2	; 0x02
    2d02:	93 81       	ldd	r25, Z+3	; 0x03
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	64 f5       	brge	.+88     	; 0x2d6c <A_LCD_void_ThirdState+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	fe 01       	movw	r30, r28
    2d16:	ed 5b       	subi	r30, 0xBD	; 189
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e2       	ldi	r20, 0x20	; 32
    2d28:	51 e4       	ldi	r21, 0x41	; 65
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	bc 01       	movw	r22, r24
    2d34:	cd 01       	movw	r24, r26
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	9e af       	std	Y+62, r25	; 0x3e
    2d40:	8d af       	std	Y+61, r24	; 0x3d
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <A_LCD_void_ThirdState+0xf6>
    2d44:	80 e9       	ldi	r24, 0x90	; 144
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	9c af       	std	Y+60, r25	; 0x3c
    2d4a:	8b af       	std	Y+59, r24	; 0x3b
    2d4c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d4e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <A_LCD_void_ThirdState+0xe4>
    2d54:	9c af       	std	Y+60, r25	; 0x3c
    2d56:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d58:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	9e af       	std	Y+62, r25	; 0x3e
    2d60:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d62:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d64:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	69 f7       	brne	.-38     	; 0x2d44 <A_LCD_void_ThirdState+0xd8>
    2d6a:	16 c0       	rjmp	.+44     	; 0x2d98 <A_LCD_void_ThirdState+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ff 96       	adiw	r30, 0x3f	; 63
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9e af       	std	Y+62, r25	; 0x3e
    2d82:	8d af       	std	Y+61, r24	; 0x3d
    2d84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d88:	9a af       	std	Y+58, r25	; 0x3a
    2d8a:	89 af       	std	Y+57, r24	; 0x39
    2d8c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <A_LCD_void_ThirdState+0x124>
    2d94:	9a af       	std	Y+58, r25	; 0x3a
    2d96:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(20);
		LCD_voidWriteString("3/4");
    2d98:	86 e0       	ldi	r24, 0x06	; 6
    2d9a:	91 e0       	ldi	r25, 0x01	; 1
    2d9c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		LCD_voidGoToXY(LINE_1,4);
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	64 e0       	ldi	r22, 0x04	; 4
    2da4:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	a0 ea       	ldi	r26, 0xA0	; 160
    2dae:	b1 e4       	ldi	r27, 0x41	; 65
    2db0:	8d ab       	std	Y+53, r24	; 0x35
    2db2:	9e ab       	std	Y+54, r25	; 0x36
    2db4:	af ab       	std	Y+55, r26	; 0x37
    2db6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dba:	7e a9       	ldd	r23, Y+54	; 0x36
    2dbc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dbe:	98 ad       	ldd	r25, Y+56	; 0x38
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	4a e7       	ldi	r20, 0x7A	; 122
    2dc6:	55 e4       	ldi	r21, 0x45	; 69
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	89 ab       	std	Y+49, r24	; 0x31
    2dd2:	9a ab       	std	Y+50, r25	; 0x32
    2dd4:	ab ab       	std	Y+51, r26	; 0x33
    2dd6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dd8:	69 a9       	ldd	r22, Y+49	; 0x31
    2dda:	7a a9       	ldd	r23, Y+50	; 0x32
    2ddc:	8b a9       	ldd	r24, Y+51	; 0x33
    2dde:	9c a9       	ldd	r25, Y+52	; 0x34
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	40 e8       	ldi	r20, 0x80	; 128
    2de6:	5f e3       	ldi	r21, 0x3F	; 63
    2de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dec:	88 23       	and	r24, r24
    2dee:	2c f4       	brge	.+10     	; 0x2dfa <A_LCD_void_ThirdState+0x18e>
		__ticks = 1;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	98 ab       	std	Y+48, r25	; 0x30
    2df6:	8f a7       	std	Y+47, r24	; 0x2f
    2df8:	3f c0       	rjmp	.+126    	; 0x2e78 <A_LCD_void_ThirdState+0x20c>
	else if (__tmp > 65535)
    2dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    2dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    2dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    2e00:	9c a9       	ldd	r25, Y+52	; 0x34
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	3f ef       	ldi	r19, 0xFF	; 255
    2e06:	4f e7       	ldi	r20, 0x7F	; 127
    2e08:	57 e4       	ldi	r21, 0x47	; 71
    2e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0e:	18 16       	cp	r1, r24
    2e10:	4c f5       	brge	.+82     	; 0x2e64 <A_LCD_void_ThirdState+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e12:	6d a9       	ldd	r22, Y+53	; 0x35
    2e14:	7e a9       	ldd	r23, Y+54	; 0x36
    2e16:	8f a9       	ldd	r24, Y+55	; 0x37
    2e18:	98 ad       	ldd	r25, Y+56	; 0x38
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e2       	ldi	r20, 0x20	; 32
    2e20:	51 e4       	ldi	r21, 0x41	; 65
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	98 ab       	std	Y+48, r25	; 0x30
    2e38:	8f a7       	std	Y+47, r24	; 0x2f
    2e3a:	0f c0       	rjmp	.+30     	; 0x2e5a <A_LCD_void_ThirdState+0x1ee>
    2e3c:	80 e9       	ldi	r24, 0x90	; 144
    2e3e:	91 e0       	ldi	r25, 0x01	; 1
    2e40:	9e a7       	std	Y+46, r25	; 0x2e
    2e42:	8d a7       	std	Y+45, r24	; 0x2d
    2e44:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e46:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <A_LCD_void_ThirdState+0x1dc>
    2e4c:	9e a7       	std	Y+46, r25	; 0x2e
    2e4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e52:	98 a9       	ldd	r25, Y+48	; 0x30
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	98 ab       	std	Y+48, r25	; 0x30
    2e58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	69 f7       	brne	.-38     	; 0x2e3c <A_LCD_void_ThirdState+0x1d0>
    2e62:	14 c0       	rjmp	.+40     	; 0x2e8c <A_LCD_void_ThirdState+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e64:	69 a9       	ldd	r22, Y+49	; 0x31
    2e66:	7a a9       	ldd	r23, Y+50	; 0x32
    2e68:	8b a9       	ldd	r24, Y+51	; 0x33
    2e6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	98 ab       	std	Y+48, r25	; 0x30
    2e76:	8f a7       	std	Y+47, r24	; 0x2f
    2e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e7c:	9c a7       	std	Y+44, r25	; 0x2c
    2e7e:	8b a7       	std	Y+43, r24	; 0x2b
    2e80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <A_LCD_void_ThirdState+0x218>
    2e88:	9c a7       	std	Y+44, r25	; 0x2c
    2e8a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		LCD_voidWriteString("CCS|BA|SP|DM");
    2e8c:	8e e7       	ldi	r24, 0x7E	; 126
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	a0 ea       	ldi	r26, 0xA0	; 160
    2e9a:	b1 e4       	ldi	r27, 0x41	; 65
    2e9c:	8f a3       	std	Y+39, r24	; 0x27
    2e9e:	98 a7       	std	Y+40, r25	; 0x28
    2ea0:	a9 a7       	std	Y+41, r26	; 0x29
    2ea2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ea8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4a e7       	ldi	r20, 0x7A	; 122
    2eb2:	55 e4       	ldi	r21, 0x45	; 69
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	8b a3       	std	Y+35, r24	; 0x23
    2ebe:	9c a3       	std	Y+36, r25	; 0x24
    2ec0:	ad a3       	std	Y+37, r26	; 0x25
    2ec2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ec4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eca:	9e a1       	ldd	r25, Y+38	; 0x26
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e8       	ldi	r20, 0x80	; 128
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	2c f4       	brge	.+10     	; 0x2ee6 <A_LCD_void_ThirdState+0x27a>
		__ticks = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9a a3       	std	Y+34, r25	; 0x22
    2ee2:	89 a3       	std	Y+33, r24	; 0x21
    2ee4:	3f c0       	rjmp	.+126    	; 0x2f64 <A_LCD_void_ThirdState+0x2f8>
	else if (__tmp > 65535)
    2ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eea:	8d a1       	ldd	r24, Y+37	; 0x25
    2eec:	9e a1       	ldd	r25, Y+38	; 0x26
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	3f ef       	ldi	r19, 0xFF	; 255
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	57 e4       	ldi	r21, 0x47	; 71
    2ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	4c f5       	brge	.+82     	; 0x2f50 <A_LCD_void_ThirdState+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efe:	6f a1       	ldd	r22, Y+39	; 0x27
    2f00:	78 a5       	ldd	r23, Y+40	; 0x28
    2f02:	89 a5       	ldd	r24, Y+41	; 0x29
    2f04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e2       	ldi	r20, 0x20	; 32
    2f0c:	51 e4       	ldi	r21, 0x41	; 65
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	9a a3       	std	Y+34, r25	; 0x22
    2f24:	89 a3       	std	Y+33, r24	; 0x21
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <A_LCD_void_ThirdState+0x2da>
    2f28:	80 e9       	ldi	r24, 0x90	; 144
    2f2a:	91 e0       	ldi	r25, 0x01	; 1
    2f2c:	98 a3       	std	Y+32, r25	; 0x20
    2f2e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f32:	98 a1       	ldd	r25, Y+32	; 0x20
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <A_LCD_void_ThirdState+0x2c8>
    2f38:	98 a3       	std	Y+32, r25	; 0x20
    2f3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	9a a3       	std	Y+34, r25	; 0x22
    2f44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	89 a1       	ldd	r24, Y+33	; 0x21
    2f48:	9a a1       	ldd	r25, Y+34	; 0x22
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <A_LCD_void_ThirdState+0x2bc>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <A_LCD_void_ThirdState+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	6b a1       	ldd	r22, Y+35	; 0x23
    2f52:	7c a1       	ldd	r23, Y+36	; 0x24
    2f54:	8d a1       	ldd	r24, Y+37	; 0x25
    2f56:	9e a1       	ldd	r25, Y+38	; 0x26
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9a a3       	std	Y+34, r25	; 0x22
    2f62:	89 a3       	std	Y+33, r24	; 0x21
    2f64:	89 a1       	ldd	r24, Y+33	; 0x21
    2f66:	9a a1       	ldd	r25, Y+34	; 0x22
    2f68:	9e 8f       	std	Y+30, r25	; 0x1e
    2f6a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <A_LCD_void_ThirdState+0x304>
    2f74:	9e 8f       	std	Y+30, r25	; 0x1e
    2f76:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		LCD_voidGoToXY(LINE_2,4);
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	64 e0       	ldi	r22, 0x04	; 4
    2f7c:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
		LCD_voidWriteString("---------------------");
    2f80:	84 ec       	ldi	r24, 0xC4	; 196
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	a0 ea       	ldi	r26, 0xA0	; 160
    2f8e:	b1 e4       	ldi	r27, 0x41	; 65
    2f90:	89 8f       	std	Y+25, r24	; 0x19
    2f92:	9a 8f       	std	Y+26, r25	; 0x1a
    2f94:	ab 8f       	std	Y+27, r26	; 0x1b
    2f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a e7       	ldi	r20, 0x7A	; 122
    2fa6:	55 e4       	ldi	r21, 0x45	; 69
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	8d 8b       	std	Y+21, r24	; 0x15
    2fb2:	9e 8b       	std	Y+22, r25	; 0x16
    2fb4:	af 8b       	std	Y+23, r26	; 0x17
    2fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fba:	7e 89       	ldd	r23, Y+22	; 0x16
    2fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <A_LCD_void_ThirdState+0x36e>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9c 8b       	std	Y+20, r25	; 0x14
    2fd6:	8b 8b       	std	Y+19, r24	; 0x13
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <A_LCD_void_ThirdState+0x3ec>
	else if (__tmp > 65535)
    2fda:	6d 89       	ldd	r22, Y+21	; 0x15
    2fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fde:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <A_LCD_void_ThirdState+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9c 8b       	std	Y+20, r25	; 0x14
    3018:	8b 8b       	std	Y+19, r24	; 0x13
    301a:	0f c0       	rjmp	.+30     	; 0x303a <A_LCD_void_ThirdState+0x3ce>
    301c:	80 e9       	ldi	r24, 0x90	; 144
    301e:	91 e0       	ldi	r25, 0x01	; 1
    3020:	9a 8b       	std	Y+18, r25	; 0x12
    3022:	89 8b       	std	Y+17, r24	; 0x11
    3024:	89 89       	ldd	r24, Y+17	; 0x11
    3026:	9a 89       	ldd	r25, Y+18	; 0x12
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <A_LCD_void_ThirdState+0x3bc>
    302c:	9a 8b       	std	Y+18, r25	; 0x12
    302e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	8b 89       	ldd	r24, Y+19	; 0x13
    3032:	9c 89       	ldd	r25, Y+20	; 0x14
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9c 8b       	std	Y+20, r25	; 0x14
    3038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	8b 89       	ldd	r24, Y+19	; 0x13
    303c:	9c 89       	ldd	r25, Y+20	; 0x14
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <A_LCD_void_ThirdState+0x3b0>
    3042:	14 c0       	rjmp	.+40     	; 0x306c <A_LCD_void_ThirdState+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	6d 89       	ldd	r22, Y+21	; 0x15
    3046:	7e 89       	ldd	r23, Y+22	; 0x16
    3048:	8f 89       	ldd	r24, Y+23	; 0x17
    304a:	98 8d       	ldd	r25, Y+24	; 0x18
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9c 8b       	std	Y+20, r25	; 0x14
    3056:	8b 8b       	std	Y+19, r24	; 0x13
    3058:	8b 89       	ldd	r24, Y+19	; 0x13
    305a:	9c 89       	ldd	r25, Y+20	; 0x14
    305c:	98 8b       	std	Y+16, r25	; 0x10
    305e:	8f 87       	std	Y+15, r24	; 0x0f
    3060:	8f 85       	ldd	r24, Y+15	; 0x0f
    3062:	98 89       	ldd	r25, Y+16	; 0x10
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <A_LCD_void_ThirdState+0x3f8>
    3068:	98 8b       	std	Y+16, r25	; 0x10
    306a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		LCD_voidGoToXY(LINE_3,0);
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 ea       	ldi	r26, 0xA0	; 160
    307a:	b1 e4       	ldi	r27, 0x41	; 65
    307c:	8b 87       	std	Y+11, r24	; 0x0b
    307e:	9c 87       	std	Y+12, r25	; 0x0c
    3080:	ad 87       	std	Y+13, r26	; 0x0d
    3082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3084:	6b 85       	ldd	r22, Y+11	; 0x0b
    3086:	7c 85       	ldd	r23, Y+12	; 0x0c
    3088:	8d 85       	ldd	r24, Y+13	; 0x0d
    308a:	9e 85       	ldd	r25, Y+14	; 0x0e
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4a e7       	ldi	r20, 0x7A	; 122
    3092:	55 e4       	ldi	r21, 0x45	; 69
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	8f 83       	std	Y+7, r24	; 0x07
    309e:	98 87       	std	Y+8, r25	; 0x08
    30a0:	a9 87       	std	Y+9, r26	; 0x09
    30a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a4:	6f 81       	ldd	r22, Y+7	; 0x07
    30a6:	78 85       	ldd	r23, Y+8	; 0x08
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e8       	ldi	r20, 0x80	; 128
    30b2:	5f e3       	ldi	r21, 0x3F	; 63
    30b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b8:	88 23       	and	r24, r24
    30ba:	2c f4       	brge	.+10     	; 0x30c6 <A_LCD_void_ThirdState+0x45a>
		__ticks = 1;
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	9e 83       	std	Y+6, r25	; 0x06
    30c2:	8d 83       	std	Y+5, r24	; 0x05
    30c4:	3f c0       	rjmp	.+126    	; 0x3144 <A_LCD_void_ThirdState+0x4d8>
	else if (__tmp > 65535)
    30c6:	6f 81       	ldd	r22, Y+7	; 0x07
    30c8:	78 85       	ldd	r23, Y+8	; 0x08
    30ca:	89 85       	ldd	r24, Y+9	; 0x09
    30cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	3f ef       	ldi	r19, 0xFF	; 255
    30d2:	4f e7       	ldi	r20, 0x7F	; 127
    30d4:	57 e4       	ldi	r21, 0x47	; 71
    30d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30da:	18 16       	cp	r1, r24
    30dc:	4c f5       	brge	.+82     	; 0x3130 <A_LCD_void_ThirdState+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30de:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e2       	ldi	r20, 0x20	; 32
    30ec:	51 e4       	ldi	r21, 0x41	; 65
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	9e 83       	std	Y+6, r25	; 0x06
    3104:	8d 83       	std	Y+5, r24	; 0x05
    3106:	0f c0       	rjmp	.+30     	; 0x3126 <A_LCD_void_ThirdState+0x4ba>
    3108:	80 e9       	ldi	r24, 0x90	; 144
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	9c 81       	ldd	r25, Y+4	; 0x04
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <A_LCD_void_ThirdState+0x4a8>
    3118:	9c 83       	std	Y+4, r25	; 0x04
    311a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	9e 81       	ldd	r25, Y+6	; 0x06
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3126:	8d 81       	ldd	r24, Y+5	; 0x05
    3128:	9e 81       	ldd	r25, Y+6	; 0x06
    312a:	00 97       	sbiw	r24, 0x00	; 0
    312c:	69 f7       	brne	.-38     	; 0x3108 <A_LCD_void_ThirdState+0x49c>
    312e:	14 c0       	rjmp	.+40     	; 0x3158 <A_LCD_void_ThirdState+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3130:	6f 81       	ldd	r22, Y+7	; 0x07
    3132:	78 85       	ldd	r23, Y+8	; 0x08
    3134:	89 85       	ldd	r24, Y+9	; 0x09
    3136:	9a 85       	ldd	r25, Y+10	; 0x0a
    3138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	9e 83       	std	Y+6, r25	; 0x06
    3142:	8d 83       	std	Y+5, r24	; 0x05
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <A_LCD_void_ThirdState+0x4e4>
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		if(GearPosition==D)
    3158:	80 91 5a 01 	lds	r24, 0x015A
    315c:	82 30       	cpi	r24, 0x02	; 2
    315e:	29 f4       	brne	.+10     	; 0x316a <A_LCD_void_ThirdState+0x4fe>
		{
			/*Display R,N,D:D*/
			LCD_voidWriteString("R,N,D:D");
    3160:	8a e0       	ldi	r24, 0x0A	; 10
    3162:	91 e0       	ldi	r25, 0x01	; 1
    3164:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    3168:	11 c0       	rjmp	.+34     	; 0x318c <A_LCD_void_ThirdState+0x520>
		}
		else if(GearPosition==N)
    316a:	80 91 5a 01 	lds	r24, 0x015A
    316e:	88 23       	and	r24, r24
    3170:	29 f4       	brne	.+10     	; 0x317c <A_LCD_void_ThirdState+0x510>
		{
			/*Display R,N,D:N*/
			LCD_voidWriteString("R,N,D:N");
    3172:	82 e1       	ldi	r24, 0x12	; 18
    3174:	91 e0       	ldi	r25, 0x01	; 1
    3176:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
    317a:	08 c0       	rjmp	.+16     	; 0x318c <A_LCD_void_ThirdState+0x520>
		}
		else if(GearPosition==R)
    317c:	80 91 5a 01 	lds	r24, 0x015A
    3180:	81 30       	cpi	r24, 0x01	; 1
    3182:	21 f4       	brne	.+8      	; 0x318c <A_LCD_void_ThirdState+0x520>
		{
			/*Display R,N,D:R*/
			LCD_voidWriteString("R,N,D:R");
    3184:	8a e1       	ldi	r24, 0x1A	; 26
    3186:	91 e0       	ldi	r25, 0x01	; 1
    3188:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
		}
}
    318c:	ca 5b       	subi	r28, 0xBA	; 186
    318e:	df 4f       	sbci	r29, 0xFF	; 255
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	cf 91       	pop	r28
    319c:	df 91       	pop	r29
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	08 95       	ret

000031a4 <A_DM_VoidUpdateTask>:
void A_DM_VoidUpdateTask(void)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <A_DM_VoidUpdateTask+0x6>
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
	if(GearPosition==D)
    31ae:	80 91 5a 01 	lds	r24, 0x015A
    31b2:	82 30       	cpi	r24, 0x02	; 2
    31b4:	e1 f4       	brne	.+56     	; 0x31ee <A_DM_VoidUpdateTask+0x4a>
		{
			switch(DMStatus)
    31b6:	80 91 59 01 	lds	r24, 0x0159
    31ba:	28 2f       	mov	r18, r24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	3a 83       	std	Y+2, r19	; 0x02
    31c0:	29 83       	std	Y+1, r18	; 0x01
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <A_DM_VoidUpdateTask+0x32>
    31ca:	29 81       	ldd	r18, Y+1	; 0x01
    31cc:	3a 81       	ldd	r19, Y+2	; 0x02
    31ce:	21 30       	cpi	r18, 0x01	; 1
    31d0:	31 05       	cpc	r19, r1
    31d2:	29 f0       	breq	.+10     	; 0x31de <A_DM_VoidUpdateTask+0x3a>
    31d4:	06 c0       	rjmp	.+12     	; 0x31e2 <A_DM_VoidUpdateTask+0x3e>
			{
			case DM_OFF:
				BAStatus=DM_ON;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	80 93 57 01 	sts	0x0157, r24
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <A_DM_VoidUpdateTask+0x3e>
				break;
			case DM_ON:
				BAStatus=DM_OFF;
    31de:	10 92 57 01 	sts	0x0157, r1
				break;
			default:
				break;
			}
			if(Page==LCD_THREE)
    31e2:	80 91 5b 01 	lds	r24, 0x015B
    31e6:	82 30       	cpi	r24, 0x02	; 2
    31e8:	11 f4       	brne	.+4      	; 0x31ee <A_DM_VoidUpdateTask+0x4a>
			{
				A_LCD_void_SecondState();
    31ea:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <A_LCD_void_SecondState>
			}
		}
}
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <A_CSS_Void_GearBox_Handle>:
void A_CSS_Void_GearBox_Handle(void)
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <A_CSS_Void_GearBox_Handle+0x6>
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62

	switch (GearPosition)
    3202:	80 91 5a 01 	lds	r24, 0x015A
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	3a 83       	std	Y+2, r19	; 0x02
    320c:	29 83       	std	Y+1, r18	; 0x01
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	81 30       	cpi	r24, 0x01	; 1
    3214:	91 05       	cpc	r25, r1
    3216:	d1 f1       	breq	.+116    	; 0x328c <A_CSS_Void_GearBox_Handle+0x94>
    3218:	29 81       	ldd	r18, Y+1	; 0x01
    321a:	3a 81       	ldd	r19, Y+2	; 0x02
    321c:	22 30       	cpi	r18, 0x02	; 2
    321e:	31 05       	cpc	r19, r1
    3220:	e9 f0       	breq	.+58     	; 0x325c <A_CSS_Void_GearBox_Handle+0x64>
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	9a 81       	ldd	r25, Y+2	; 0x02
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	09 f0       	breq	.+2      	; 0x322c <A_CSS_Void_GearBox_Handle+0x34>
    322a:	46 c0       	rjmp	.+140    	; 0x32b8 <A_CSS_Void_GearBox_Handle+0xc0>
	{
	case N :
		/* Check Park Button */
		if((KPD_voidGetPressedKey() == '2'))
    322c:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    3230:	82 33       	cpi	r24, 0x32	; 50
    3232:	61 f4       	brne	.+24     	; 0x324c <A_CSS_Void_GearBox_Handle+0x54>
		{
			GearPosition = D;
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	80 93 5a 01 	sts	0x015A, r24
			/* Open Buzzer For 10ms, then do no thing */
			H_Buzzer_Void_BuzzerOnce();
    323a:	0e 94 a2 1b 	call	0x3744	; 0x3744 <H_Buzzer_Void_BuzzerOnce>
			H_LED_Void_LedTog(GRN_LED);
    323e:	82 e0       	ldi	r24, 0x02	; 2
    3240:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <H_LED_Void_LedTog>
    3244:	39 c0       	rjmp	.+114    	; 0x32b8 <A_CSS_Void_GearBox_Handle+0xc0>
		else
		{
			/* Generate Alarm */
			while((KPD_voidGetPressedKey() == 'A'))
			{
				H_LED_Void_LedOn(ALARM_LED);
    3246:	84 e0       	ldi	r24, 0x04	; 4
    3248:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <H_LED_Void_LedOn>

		}
		else
		{
			/* Generate Alarm */
			while((KPD_voidGetPressedKey() == 'A'))
    324c:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    3250:	81 34       	cpi	r24, 0x41	; 65
    3252:	c9 f3       	breq	.-14     	; 0x3246 <A_CSS_Void_GearBox_Handle+0x4e>
			{
				H_LED_Void_LedOn(ALARM_LED);
			}
			H_LED_Void_LedOff(ALARM_LED);
    3254:	84 e0       	ldi	r24, 0x04	; 4
    3256:	0e 94 ae 28 	call	0x515c	; 0x515c <H_LED_Void_LedOff>
    325a:	2e c0       	rjmp	.+92     	; 0x32b8 <A_CSS_Void_GearBox_Handle+0xc0>
		}

		break;
	case D:
		/* Check Park Button */
		if((KPD_voidGetPressedKey() == '2'))
    325c:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    3260:	82 33       	cpi	r24, 0x32	; 50
    3262:	61 f4       	brne	.+24     	; 0x327c <A_CSS_Void_GearBox_Handle+0x84>
		{
			GearPosition = R;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	80 93 5a 01 	sts	0x015A, r24
			/* Open Buzzer For 10ms, then do no thing */
			H_Buzzer_Void_BuzzerOnce();
    326a:	0e 94 a2 1b 	call	0x3744	; 0x3744 <H_Buzzer_Void_BuzzerOnce>
			H_LED_Void_LedTog(GRN_LED);
    326e:	82 e0       	ldi	r24, 0x02	; 2
    3270:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <H_LED_Void_LedTog>
    3274:	21 c0       	rjmp	.+66     	; 0x32b8 <A_CSS_Void_GearBox_Handle+0xc0>
		else
		{
			/* Generate Alarm */
			while((KPD_voidGetPressedKey() == 'A'))
			{
				H_LED_Void_LedOn(ALARM_LED);
    3276:	84 e0       	ldi	r24, 0x04	; 4
    3278:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <H_LED_Void_LedOn>

		}
		else
		{
			/* Generate Alarm */
			while((KPD_voidGetPressedKey() == 'A'))
    327c:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    3280:	81 34       	cpi	r24, 0x41	; 65
    3282:	c9 f3       	breq	.-14     	; 0x3276 <A_CSS_Void_GearBox_Handle+0x7e>
			{
				H_LED_Void_LedOn(ALARM_LED);
			}
			H_LED_Void_LedOff(ALARM_LED);
    3284:	84 e0       	ldi	r24, 0x04	; 4
    3286:	0e 94 ae 28 	call	0x515c	; 0x515c <H_LED_Void_LedOff>
    328a:	16 c0       	rjmp	.+44     	; 0x32b8 <A_CSS_Void_GearBox_Handle+0xc0>
//			A_LCD_void_ThirdState();
//		}
		break;
	case R:
		/* Check Park Button */
		if((KPD_voidGetPressedKey() == '2'))
    328c:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    3290:	82 33       	cpi	r24, 0x32	; 50
    3292:	59 f4       	brne	.+22     	; 0x32aa <A_CSS_Void_GearBox_Handle+0xb2>
		{
			GearPosition = N;
    3294:	10 92 5a 01 	sts	0x015A, r1
			/* Open Buzzer For 10ms, then do no thing */
			H_Buzzer_Void_BuzzerOnce();
    3298:	0e 94 a2 1b 	call	0x3744	; 0x3744 <H_Buzzer_Void_BuzzerOnce>
			H_LED_Void_LedTog(GRN_LED);
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <H_LED_Void_LedTog>
    32a2:	0a c0       	rjmp	.+20     	; 0x32b8 <A_CSS_Void_GearBox_Handle+0xc0>
		else
		{
			/* Generate Alarm */
			while((KPD_voidGetPressedKey() == 'A'))
			{
				H_LED_Void_LedOn(ALARM_LED);
    32a4:	84 e0       	ldi	r24, 0x04	; 4
    32a6:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <H_LED_Void_LedOn>

		}
		else
		{
			/* Generate Alarm */
			while((KPD_voidGetPressedKey() == 'A'))
    32aa:	0e 94 3f 21 	call	0x427e	; 0x427e <KPD_voidGetPressedKey>
    32ae:	81 34       	cpi	r24, 0x41	; 65
    32b0:	c9 f3       	breq	.-14     	; 0x32a4 <A_CSS_Void_GearBox_Handle+0xac>
			{
				H_LED_Void_LedOn(ALARM_LED);
			}
			H_LED_Void_LedOff(ALARM_LED);
    32b2:	84 e0       	ldi	r24, 0x04	; 4
    32b4:	0e 94 ae 28 	call	0x515c	; 0x515c <H_LED_Void_LedOff>
//			A_LCD_void_ThirdState();
//		}
		break;
	default:                                   break;
	}
	if(Page==LCD_FOUR)
    32b8:	80 91 5b 01 	lds	r24, 0x015B
    32bc:	83 30       	cpi	r24, 0x03	; 3
    32be:	11 f4       	brne	.+4      	; 0x32c4 <A_CSS_Void_GearBox_Handle+0xcc>
	{
		A_LCD_void_ThirdState();
    32c0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <A_LCD_void_ThirdState>

	}


}
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <APP_Watch>:
void APP_Watch(u8 secound)
{
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	0f 92       	push	r0
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	89 83       	std	Y+1, r24	; 0x01
	Secound_1 = g_secoundCounter;
    32da:	80 91 4e 01 	lds	r24, 0x014E
    32de:	80 93 51 01 	sts	0x0151, r24
	if(Secound_1 > 9)
    32e2:	80 91 51 01 	lds	r24, 0x0151
    32e6:	8a 30       	cpi	r24, 0x0A	; 10
    32e8:	48 f0       	brcs	.+18     	; 0x32fc <APP_Watch+0x2e>
	{
		Secound_1 =0;
    32ea:	10 92 51 01 	sts	0x0151, r1
		Secound_2++;
    32ee:	80 91 52 01 	lds	r24, 0x0152
    32f2:	8f 5f       	subi	r24, 0xFF	; 255
    32f4:	80 93 52 01 	sts	0x0152, r24
		g_secoundCounter=0;
    32f8:	10 92 4e 01 	sts	0x014E, r1
	}
	if(Secound_2 > 5)
    32fc:	80 91 52 01 	lds	r24, 0x0152
    3300:	86 30       	cpi	r24, 0x06	; 6
    3302:	38 f0       	brcs	.+14     	; 0x3312 <APP_Watch+0x44>
	{
		Secound_2 =0;
    3304:	10 92 52 01 	sts	0x0152, r1
		Minute_1++;
    3308:	80 91 53 01 	lds	r24, 0x0153
    330c:	8f 5f       	subi	r24, 0xFF	; 255
    330e:	80 93 53 01 	sts	0x0153, r24
	}

	if(Minute_1 > 9)
    3312:	80 91 53 01 	lds	r24, 0x0153
    3316:	8a 30       	cpi	r24, 0x0A	; 10
    3318:	38 f0       	brcs	.+14     	; 0x3328 <APP_Watch+0x5a>
	{
		Minute_1 =0;
    331a:	10 92 53 01 	sts	0x0153, r1
		Minute_2++;
    331e:	80 91 3a 01 	lds	r24, 0x013A
    3322:	8f 5f       	subi	r24, 0xFF	; 255
    3324:	80 93 3a 01 	sts	0x013A, r24
	}
	if(Minute_2 > 5)
    3328:	80 91 3a 01 	lds	r24, 0x013A
    332c:	86 30       	cpi	r24, 0x06	; 6
    332e:	38 f0       	brcs	.+14     	; 0x333e <APP_Watch+0x70>
	{
		Minute_1 =0;
    3330:	10 92 53 01 	sts	0x0153, r1
		Hour_1++;
    3334:	80 91 54 01 	lds	r24, 0x0154
    3338:	8f 5f       	subi	r24, 0xFF	; 255
    333a:	80 93 54 01 	sts	0x0154, r24
	}
/* handel hours*/
	if(Hour_1 > 9)
    333e:	80 91 54 01 	lds	r24, 0x0154
    3342:	8a 30       	cpi	r24, 0x0A	; 10
    3344:	38 f0       	brcs	.+14     	; 0x3354 <APP_Watch+0x86>
	{
		Hour_1 =0;
    3346:	10 92 54 01 	sts	0x0154, r1
		Hour_2++;
    334a:	80 91 55 01 	lds	r24, 0x0155
    334e:	8f 5f       	subi	r24, 0xFF	; 255
    3350:	80 93 55 01 	sts	0x0155, r24
	}

	if(Hour_2 > 2)
    3354:	80 91 55 01 	lds	r24, 0x0155
    3358:	83 30       	cpi	r24, 0x03	; 3
    335a:	60 f0       	brcs	.+24     	; 0x3374 <APP_Watch+0xa6>
	{
		Secound_1  =0;
    335c:	10 92 51 01 	sts	0x0151, r1
		Secound_2  =0;
    3360:	10 92 52 01 	sts	0x0152, r1
		Minute_1   =0;
    3364:	10 92 53 01 	sts	0x0153, r1
		Minute_2   =0;
    3368:	10 92 3a 01 	sts	0x013A, r1
		Hour_1     =0;
    336c:	10 92 54 01 	sts	0x0154, r1
		Hour_2     =0;
    3370:	10 92 55 01 	sts	0x0155, r1
	}

}
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <APP_SecoundCounter>:
void APP_SecoundCounter(void)
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
	g_secoundCounter++;
    3384:	80 91 4e 01 	lds	r24, 0x014E
    3388:	8f 5f       	subi	r24, 0xFF	; 255
    338a:	80 93 4e 01 	sts	0x014E, r24
	g_WarrningCounter++;
    338e:	80 91 4f 01 	lds	r24, 0x014F
    3392:	8f 5f       	subi	r24, 0xFF	; 255
    3394:	80 93 4f 01 	sts	0x014F, r24
	APP_Watch(g_secoundCounter);
    3398:	80 91 4e 01 	lds	r24, 0x014E
    339c:	0e 94 67 19 	call	0x32ce	; 0x32ce <APP_Watch>
	if(relay_Flag == 1)
    33a0:	80 91 50 01 	lds	r24, 0x0150
    33a4:	81 30       	cpi	r24, 0x01	; 1
    33a6:	29 f4       	brne	.+10     	; 0x33b2 <APP_SecoundCounter+0x36>
	{
		M_DIO_Void_TogPin(DIO_PORTC ,DIO_PIN7);
    33a8:	83 e0       	ldi	r24, 0x03	; 3
    33aa:	67 e0       	ldi	r22, 0x07	; 7
    33ac:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <M_DIO_Void_TogPin>
    33b0:	05 c0       	rjmp	.+10     	; 0x33bc <APP_SecoundCounter+0x40>
	}else
	{
		M_DIO_Void_SetPinValue(DIO_PORTC ,DIO_PIN7,LOW);
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	67 e0       	ldi	r22, 0x07	; 7
    33b6:	40 e0       	ldi	r20, 0x00	; 0
    33b8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	/* if flag == 1 */
	/*toggle relay
	 *
	 *    */

}
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <APP_Disply_Watch>:
void APP_Disply_Watch(void)
{
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	2e 97       	sbiw	r28, 0x0e	; 14
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61

	LCD_voidGoToXY(LINE_1,4);
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	64 e0       	ldi	r22, 0x04	; 4
    33da:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteString("time");
    33de:	82 e2       	ldi	r24, 0x22	; 34
    33e0:	91 e0       	ldi	r25, 0x01	; 1
    33e2:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_2,4);
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	64 e0       	ldi	r22, 0x04	; 4
    33ea:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteString("00:00:00");
    33ee:	87 e2       	ldi	r24, 0x27	; 39
    33f0:	91 e0       	ldi	r25, 0x01	; 1
    33f2:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_2,4);
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	64 e0       	ldi	r22, 0x04	; 4
    33fa:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteNumber(Hour_2);
    33fe:	80 91 55 01 	lds	r24, 0x0155
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
	LCD_voidGoToXY(LINE_2,5);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	65 e0       	ldi	r22, 0x05	; 5
    3416:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteNumber(Hour_1);
    341a:	80 91 54 01 	lds	r24, 0x0154
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a0 e0       	ldi	r26, 0x00	; 0
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
	LCD_voidGoToXY(LINE_2,6);
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	66 e0       	ldi	r22, 0x06	; 6
    3432:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteString(":");
    3436:	80 e3       	ldi	r24, 0x30	; 48
    3438:	91 e0       	ldi	r25, 0x01	; 1
    343a:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_2,7);
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	67 e0       	ldi	r22, 0x07	; 7
    3442:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteNumber(Minute_2);
    3446:	80 91 3a 01 	lds	r24, 0x013A
    344a:	88 2f       	mov	r24, r24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
	LCD_voidGoToXY(LINE_2,8);
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	68 e0       	ldi	r22, 0x08	; 8
    345e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteNumber(Minute_1);
    3462:	80 91 53 01 	lds	r24, 0x0153
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	a0 e0       	ldi	r26, 0x00	; 0
    346c:	b0 e0       	ldi	r27, 0x00	; 0
    346e:	bc 01       	movw	r22, r24
    3470:	cd 01       	movw	r24, r26
    3472:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
	LCD_voidGoToXY(LINE_2,9);
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	69 e0       	ldi	r22, 0x09	; 9
    347a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteString(":");
    347e:	80 e3       	ldi	r24, 0x30	; 48
    3480:	91 e0       	ldi	r25, 0x01	; 1
    3482:	0e 94 12 27 	call	0x4e24	; 0x4e24 <LCD_voidWriteString>
	LCD_voidGoToXY(LINE_2,10);
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	6a e0       	ldi	r22, 0x0A	; 10
    348a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteNumber(Secound_2);
    348e:	80 91 52 01 	lds	r24, 0x0152
    3492:	88 2f       	mov	r24, r24
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	a0 e0       	ldi	r26, 0x00	; 0
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
	LCD_voidGoToXY(LINE_2,11);
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	6b e0       	ldi	r22, 0x0B	; 11
    34a6:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <LCD_voidGoToXY>
	LCD_voidWriteNumber(Secound_1);
    34aa:	80 91 51 01 	lds	r24, 0x0151
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	a0 e0       	ldi	r26, 0x00	; 0
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <LCD_voidWriteNumber>
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	a8 e4       	ldi	r26, 0x48	; 72
    34c4:	b2 e4       	ldi	r27, 0x42	; 66
    34c6:	8b 87       	std	Y+11, r24	; 0x0b
    34c8:	9c 87       	std	Y+12, r25	; 0x0c
    34ca:	ad 87       	std	Y+13, r26	; 0x0d
    34cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4a e7       	ldi	r20, 0x7A	; 122
    34dc:	55 e4       	ldi	r21, 0x45	; 69
    34de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	8f 83       	std	Y+7, r24	; 0x07
    34e8:	98 87       	std	Y+8, r25	; 0x08
    34ea:	a9 87       	std	Y+9, r26	; 0x09
    34ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ee:	6f 81       	ldd	r22, Y+7	; 0x07
    34f0:	78 85       	ldd	r23, Y+8	; 0x08
    34f2:	89 85       	ldd	r24, Y+9	; 0x09
    34f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	2c f4       	brge	.+10     	; 0x3510 <APP_Disply_Watch+0x14e>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
    350e:	3f c0       	rjmp	.+126    	; 0x358e <APP_Disply_Watch+0x1cc>
	else if (__tmp > 65535)
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	3f ef       	ldi	r19, 0xFF	; 255
    351c:	4f e7       	ldi	r20, 0x7F	; 127
    351e:	57 e4       	ldi	r21, 0x47	; 71
    3520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3524:	18 16       	cp	r1, r24
    3526:	4c f5       	brge	.+82     	; 0x357a <APP_Disply_Watch+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3528:	6b 85       	ldd	r22, Y+11	; 0x0b
    352a:	7c 85       	ldd	r23, Y+12	; 0x0c
    352c:	8d 85       	ldd	r24, Y+13	; 0x0d
    352e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e2       	ldi	r20, 0x20	; 32
    3536:	51 e4       	ldi	r21, 0x41	; 65
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	bc 01       	movw	r22, r24
    3542:	cd 01       	movw	r24, r26
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	9e 83       	std	Y+6, r25	; 0x06
    354e:	8d 83       	std	Y+5, r24	; 0x05
    3550:	0f c0       	rjmp	.+30     	; 0x3570 <APP_Disply_Watch+0x1ae>
    3552:	80 e9       	ldi	r24, 0x90	; 144
    3554:	91 e0       	ldi	r25, 0x01	; 1
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03
    355a:	8b 81       	ldd	r24, Y+3	; 0x03
    355c:	9c 81       	ldd	r25, Y+4	; 0x04
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <APP_Disply_Watch+0x19c>
    3562:	9c 83       	std	Y+4, r25	; 0x04
    3564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3566:	8d 81       	ldd	r24, Y+5	; 0x05
    3568:	9e 81       	ldd	r25, Y+6	; 0x06
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	9e 83       	std	Y+6, r25	; 0x06
    356e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3570:	8d 81       	ldd	r24, Y+5	; 0x05
    3572:	9e 81       	ldd	r25, Y+6	; 0x06
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	69 f7       	brne	.-38     	; 0x3552 <APP_Disply_Watch+0x190>
    3578:	14 c0       	rjmp	.+40     	; 0x35a2 <APP_Disply_Watch+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357a:	6f 81       	ldd	r22, Y+7	; 0x07
    357c:	78 85       	ldd	r23, Y+8	; 0x08
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	9a 85       	ldd	r25, Y+10	; 0x0a
    3582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	9e 83       	std	Y+6, r25	; 0x06
    358c:	8d 83       	std	Y+5, r24	; 0x05
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	9e 81       	ldd	r25, Y+6	; 0x06
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <APP_Disply_Watch+0x1d8>
    359e:	9a 83       	std	Y+2, r25	; 0x02
    35a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    35a2:	2e 96       	adiw	r28, 0x0e	; 14
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <A_LCD_void_FourthState>:
void  A_LCD_void_FourthState(void)
{
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
	APP_Disply_Watch();
    35bc:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <APP_Disply_Watch>

}
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	08 95       	ret

000035c6 <M_ADC_Void_ADCInit>:




void M_ADC_Void_ADCInit(void)
{
    35c6:	df 93       	push	r29
    35c8:	cf 93       	push	r28
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
    35ce:	a7 e2       	ldi	r26, 0x27	; 39
    35d0:	b0 e0       	ldi	r27, 0x00	; 0
    35d2:	e7 e2       	ldi	r30, 0x27	; 39
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	80 81       	ld	r24, Z
    35d8:	80 64       	ori	r24, 0x40	; 64
    35da:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    35dc:	a7 e2       	ldi	r26, 0x27	; 39
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	e7 e2       	ldi	r30, 0x27	; 39
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	8f 77       	andi	r24, 0x7F	; 127
    35e8:	8c 93       	st	X, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    35ea:	a7 e2       	ldi	r26, 0x27	; 39
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e7 e2       	ldi	r30, 0x27	; 39
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	8f 7d       	andi	r24, 0xDF	; 223
    35f6:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    35f8:	a6 e2       	ldi	r26, 0x26	; 38
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	e6 e2       	ldi	r30, 0x26	; 38
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	81 60       	ori	r24, 0x01	; 1
    3604:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    3606:	a6 e2       	ldi	r26, 0x26	; 38
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e6 e2       	ldi	r30, 0x26	; 38
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	82 60       	ori	r24, 0x02	; 2
    3612:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    3614:	a6 e2       	ldi	r26, 0x26	; 38
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	e6 e2       	ldi	r30, 0x26	; 38
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	84 60       	ori	r24, 0x04	; 4
    3620:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif
	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
    3622:	a6 e2       	ldi	r26, 0x26	; 38
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	e6 e2       	ldi	r30, 0x26	; 38
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	80 62       	ori	r24, 0x20	; 32
    362e:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCIUT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    3630:	a6 e2       	ldi	r26, 0x26	; 38
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	e6 e2       	ldi	r30, 0x26	; 38
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	80 68       	ori	r24, 0x80	; 128
    363c:	8c 93       	st	X, r24
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    363e:	a6 e2       	ldi	r26, 0x26	; 38
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e6 e2       	ldi	r30, 0x26	; 38
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	80 64       	ori	r24, 0x40	; 64
    364a:	8c 93       	st	X, r24
}
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	08 95       	ret

00003652 <M_ADC_U16_ADCRead>:

u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	00 d0       	rcall	.+0      	; 0x3658 <M_ADC_U16_ADCRead+0x6>
    3658:	00 d0       	rcall	.+0      	; 0x365a <M_ADC_U16_ADCRead+0x8>
    365a:	0f 92       	push	r0
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter = 0;
    3662:	19 82       	std	Y+1, r1	; 0x01
    3664:	1a 82       	std	Y+2, r1	; 0x02
    3666:	1b 82       	std	Y+3, r1	; 0x03
    3668:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX_REG = ADMUX_REG & 0b11100000;
    366a:	a7 e2       	ldi	r26, 0x27	; 39
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	e7 e2       	ldi	r30, 0x27	; 39
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	80 81       	ld	r24, Z
    3674:	80 7e       	andi	r24, 0xE0	; 224
    3676:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
    3678:	a7 e2       	ldi	r26, 0x27	; 39
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e7 e2       	ldi	r30, 0x27	; 39
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	90 81       	ld	r25, Z
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	89 2b       	or	r24, r25
    3686:	8c 93       	st	X, r24
    3688:	16 c0       	rjmp	.+44     	; 0x36b6 <M_ADC_U16_ADCRead+0x64>
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	ab 81       	ldd	r26, Y+3	; 0x03
    3690:	bc 81       	ldd	r27, Y+4	; 0x04
    3692:	01 96       	adiw	r24, 0x01	; 1
    3694:	a1 1d       	adc	r26, r1
    3696:	b1 1d       	adc	r27, r1
    3698:	89 83       	std	Y+1, r24	; 0x01
    369a:	9a 83       	std	Y+2, r25	; 0x02
    369c:	ab 83       	std	Y+3, r26	; 0x03
    369e:	bc 83       	std	Y+4, r27	; 0x04
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
    36a0:	e6 e2       	ldi	r30, 0x26	; 38
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 81       	ld	r24, Z
    36a6:	82 95       	swap	r24
    36a8:	8f 70       	andi	r24, 0x0F	; 15
    36aa:	88 2f       	mov	r24, r24
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	81 70       	andi	r24, 0x01	; 1
    36b0:	90 70       	andi	r25, 0x00	; 0
    36b2:	88 23       	and	r24, r24
    36b4:	61 f4       	brne	.+24     	; 0x36ce <M_ADC_U16_ADCRead+0x7c>
u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
	u32 Local_U32_Counter = 0;
	ADMUX_REG = ADMUX_REG & 0b11100000;
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
	while(Local_U32_Counter < 2000000)
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ba:	ab 81       	ldd	r26, Y+3	; 0x03
    36bc:	bc 81       	ldd	r27, Y+4	; 0x04
    36be:	80 38       	cpi	r24, 0x80	; 128
    36c0:	24 e8       	ldi	r18, 0x84	; 132
    36c2:	92 07       	cpc	r25, r18
    36c4:	2e e1       	ldi	r18, 0x1E	; 30
    36c6:	a2 07       	cpc	r26, r18
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	b2 07       	cpc	r27, r18
    36cc:	f0 f2       	brcs	.-68     	; 0x368a <M_ADC_U16_ADCRead+0x38>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCVALUE;
    36ce:	e4 e2       	ldi	r30, 0x24	; 36
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
}
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	08 95       	ret

000036e6 <H_Buzzer_Void_BuzzerInit>:
 *      Author: dell
 */
#include "Buzzer_Interface.h"

void H_Buzzer_Void_BuzzerInit(void)
{
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    36ee:	83 e0       	ldi	r24, 0x03	; 3
    36f0:	66 e0       	ldi	r22, 0x06	; 6
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
}
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <H_Buzzer_Void_BuzzerOn>:
void H_Buzzer_Void_BuzzerOn(void)
{
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PORT,BUZZER_PIN,HIGH);
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	66 e0       	ldi	r22, 0x06	; 6
    370a:	41 e0       	ldi	r20, 0x01	; 1
    370c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
}
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	08 95       	ret

00003716 <H_Buzzer_Void_BuzzerOff>:
void H_Buzzer_Void_BuzzerOff(void)
{
    3716:	df 93       	push	r29
    3718:	cf 93       	push	r28
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    371e:	83 e0       	ldi	r24, 0x03	; 3
    3720:	66 e0       	ldi	r22, 0x06	; 6
    3722:	40 e0       	ldi	r20, 0x00	; 0
    3724:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>

}
    3728:	cf 91       	pop	r28
    372a:	df 91       	pop	r29
    372c:	08 95       	ret

0000372e <H_Buzzer_Void_BuzzerTog>:
void H_Buzzer_Void_BuzzerTog(void)
{
    372e:	df 93       	push	r29
    3730:	cf 93       	push	r28
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(BUZZER_PORT,BUZZER_PIN);
    3736:	83 e0       	ldi	r24, 0x03	; 3
    3738:	66 e0       	ldi	r22, 0x06	; 6
    373a:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <M_DIO_Void_TogPin>
}
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <H_Buzzer_Void_BuzzerOnce>:
void H_Buzzer_Void_BuzzerOnce(void)
{
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	2e 97       	sbiw	r28, 0x0e	; 14
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PORT,BUZZER_PIN,HIGH);
    3758:	83 e0       	ldi	r24, 0x03	; 3
    375a:	66 e0       	ldi	r22, 0x06	; 6
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	a0 e2       	ldi	r26, 0x20	; 32
    3768:	b1 e4       	ldi	r27, 0x41	; 65
    376a:	8b 87       	std	Y+11, r24	; 0x0b
    376c:	9c 87       	std	Y+12, r25	; 0x0c
    376e:	ad 87       	std	Y+13, r26	; 0x0d
    3770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3772:	6b 85       	ldd	r22, Y+11	; 0x0b
    3774:	7c 85       	ldd	r23, Y+12	; 0x0c
    3776:	8d 85       	ldd	r24, Y+13	; 0x0d
    3778:	9e 85       	ldd	r25, Y+14	; 0x0e
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	4a e7       	ldi	r20, 0x7A	; 122
    3780:	55 e4       	ldi	r21, 0x45	; 69
    3782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	8f 83       	std	Y+7, r24	; 0x07
    378c:	98 87       	std	Y+8, r25	; 0x08
    378e:	a9 87       	std	Y+9, r26	; 0x09
    3790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3792:	6f 81       	ldd	r22, Y+7	; 0x07
    3794:	78 85       	ldd	r23, Y+8	; 0x08
    3796:	89 85       	ldd	r24, Y+9	; 0x09
    3798:	9a 85       	ldd	r25, Y+10	; 0x0a
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	40 e8       	ldi	r20, 0x80	; 128
    37a0:	5f e3       	ldi	r21, 0x3F	; 63
    37a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a6:	88 23       	and	r24, r24
    37a8:	2c f4       	brge	.+10     	; 0x37b4 <H_Buzzer_Void_BuzzerOnce+0x70>
		__ticks = 1;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	9e 83       	std	Y+6, r25	; 0x06
    37b0:	8d 83       	std	Y+5, r24	; 0x05
    37b2:	3f c0       	rjmp	.+126    	; 0x3832 <H_Buzzer_Void_BuzzerOnce+0xee>
	else if (__tmp > 65535)
    37b4:	6f 81       	ldd	r22, Y+7	; 0x07
    37b6:	78 85       	ldd	r23, Y+8	; 0x08
    37b8:	89 85       	ldd	r24, Y+9	; 0x09
    37ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	3f ef       	ldi	r19, 0xFF	; 255
    37c0:	4f e7       	ldi	r20, 0x7F	; 127
    37c2:	57 e4       	ldi	r21, 0x47	; 71
    37c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c8:	18 16       	cp	r1, r24
    37ca:	4c f5       	brge	.+82     	; 0x381e <H_Buzzer_Void_BuzzerOnce+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e2       	ldi	r20, 0x20	; 32
    37da:	51 e4       	ldi	r21, 0x41	; 65
    37dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	bc 01       	movw	r22, r24
    37e6:	cd 01       	movw	r24, r26
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
    37f4:	0f c0       	rjmp	.+30     	; 0x3814 <H_Buzzer_Void_BuzzerOnce+0xd0>
    37f6:	80 e9       	ldi	r24, 0x90	; 144
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	9c 83       	std	Y+4, r25	; 0x04
    37fc:	8b 83       	std	Y+3, r24	; 0x03
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	9c 81       	ldd	r25, Y+4	; 0x04
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <H_Buzzer_Void_BuzzerOnce+0xbe>
    3806:	9c 83       	std	Y+4, r25	; 0x04
    3808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380a:	8d 81       	ldd	r24, Y+5	; 0x05
    380c:	9e 81       	ldd	r25, Y+6	; 0x06
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	9e 83       	std	Y+6, r25	; 0x06
    3812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
    3816:	9e 81       	ldd	r25, Y+6	; 0x06
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	69 f7       	brne	.-38     	; 0x37f6 <H_Buzzer_Void_BuzzerOnce+0xb2>
    381c:	14 c0       	rjmp	.+40     	; 0x3846 <H_Buzzer_Void_BuzzerOnce+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	9e 83       	std	Y+6, r25	; 0x06
    3830:	8d 83       	std	Y+5, r24	; 0x05
    3832:	8d 81       	ldd	r24, Y+5	; 0x05
    3834:	9e 81       	ldd	r25, Y+6	; 0x06
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <H_Buzzer_Void_BuzzerOnce+0xfa>
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    3846:	83 e0       	ldi	r24, 0x03	; 3
    3848:	66 e0       	ldi	r22, 0x06	; 6
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
}
    3850:	2e 96       	adiw	r28, 0x0e	; 14
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <H_Buzzer_Void_BuzzerTwice>:
void H_Buzzer_Void_BuzzerTwice(void)
{
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	2e 97       	sbiw	r28, 0x0e	; 14
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
H_Buzzer_Void_BuzzerOnce();
    3876:	0e 94 a2 1b 	call	0x3744	; 0x3744 <H_Buzzer_Void_BuzzerOnce>
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	a0 ea       	ldi	r26, 0xA0	; 160
    3880:	b2 e4       	ldi	r27, 0x42	; 66
    3882:	8b 87       	std	Y+11, r24	; 0x0b
    3884:	9c 87       	std	Y+12, r25	; 0x0c
    3886:	ad 87       	std	Y+13, r26	; 0x0d
    3888:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    388a:	6b 85       	ldd	r22, Y+11	; 0x0b
    388c:	7c 85       	ldd	r23, Y+12	; 0x0c
    388e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3890:	9e 85       	ldd	r25, Y+14	; 0x0e
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	4a e7       	ldi	r20, 0x7A	; 122
    3898:	55 e4       	ldi	r21, 0x45	; 69
    389a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	8f 83       	std	Y+7, r24	; 0x07
    38a4:	98 87       	std	Y+8, r25	; 0x08
    38a6:	a9 87       	std	Y+9, r26	; 0x09
    38a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38aa:	6f 81       	ldd	r22, Y+7	; 0x07
    38ac:	78 85       	ldd	r23, Y+8	; 0x08
    38ae:	89 85       	ldd	r24, Y+9	; 0x09
    38b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	40 e8       	ldi	r20, 0x80	; 128
    38b8:	5f e3       	ldi	r21, 0x3F	; 63
    38ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38be:	88 23       	and	r24, r24
    38c0:	2c f4       	brge	.+10     	; 0x38cc <H_Buzzer_Void_BuzzerTwice+0x6a>
		__ticks = 1;
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	3f c0       	rjmp	.+126    	; 0x394a <H_Buzzer_Void_BuzzerTwice+0xe8>
	else if (__tmp > 65535)
    38cc:	6f 81       	ldd	r22, Y+7	; 0x07
    38ce:	78 85       	ldd	r23, Y+8	; 0x08
    38d0:	89 85       	ldd	r24, Y+9	; 0x09
    38d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	3f ef       	ldi	r19, 0xFF	; 255
    38d8:	4f e7       	ldi	r20, 0x7F	; 127
    38da:	57 e4       	ldi	r21, 0x47	; 71
    38dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38e0:	18 16       	cp	r1, r24
    38e2:	4c f5       	brge	.+82     	; 0x3936 <H_Buzzer_Void_BuzzerTwice+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	40 e2       	ldi	r20, 0x20	; 32
    38f2:	51 e4       	ldi	r21, 0x41	; 65
    38f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	bc 01       	movw	r22, r24
    38fe:	cd 01       	movw	r24, r26
    3900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
    390c:	0f c0       	rjmp	.+30     	; 0x392c <H_Buzzer_Void_BuzzerTwice+0xca>
    390e:	80 e9       	ldi	r24, 0x90	; 144
    3910:	91 e0       	ldi	r25, 0x01	; 1
    3912:	9c 83       	std	Y+4, r25	; 0x04
    3914:	8b 83       	std	Y+3, r24	; 0x03
    3916:	8b 81       	ldd	r24, Y+3	; 0x03
    3918:	9c 81       	ldd	r25, Y+4	; 0x04
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	f1 f7       	brne	.-4      	; 0x391a <H_Buzzer_Void_BuzzerTwice+0xb8>
    391e:	9c 83       	std	Y+4, r25	; 0x04
    3920:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3922:	8d 81       	ldd	r24, Y+5	; 0x05
    3924:	9e 81       	ldd	r25, Y+6	; 0x06
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	9e 83       	std	Y+6, r25	; 0x06
    392a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    392c:	8d 81       	ldd	r24, Y+5	; 0x05
    392e:	9e 81       	ldd	r25, Y+6	; 0x06
    3930:	00 97       	sbiw	r24, 0x00	; 0
    3932:	69 f7       	brne	.-38     	; 0x390e <H_Buzzer_Void_BuzzerTwice+0xac>
    3934:	14 c0       	rjmp	.+40     	; 0x395e <H_Buzzer_Void_BuzzerTwice+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3936:	6f 81       	ldd	r22, Y+7	; 0x07
    3938:	78 85       	ldd	r23, Y+8	; 0x08
    393a:	89 85       	ldd	r24, Y+9	; 0x09
    393c:	9a 85       	ldd	r25, Y+10	; 0x0a
    393e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	9e 83       	std	Y+6, r25	; 0x06
    3948:	8d 83       	std	Y+5, r24	; 0x05
    394a:	8d 81       	ldd	r24, Y+5	; 0x05
    394c:	9e 81       	ldd	r25, Y+6	; 0x06
    394e:	9a 83       	std	Y+2, r25	; 0x02
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	9a 81       	ldd	r25, Y+2	; 0x02
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	f1 f7       	brne	.-4      	; 0x3956 <H_Buzzer_Void_BuzzerTwice+0xf4>
    395a:	9a 83       	std	Y+2, r25	; 0x02
    395c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(BUZZER_TIME_OFF);
H_Buzzer_Void_BuzzerOnce();
    395e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <H_Buzzer_Void_BuzzerOnce>
}
    3962:	2e 96       	adiw	r28, 0x0e	; 14
    3964:	0f b6       	in	r0, 0x3f	; 63
    3966:	f8 94       	cli
    3968:	de bf       	out	0x3e, r29	; 62
    396a:	0f be       	out	0x3f, r0	; 63
    396c:	cd bf       	out	0x3d, r28	; 61
    396e:	cf 91       	pop	r28
    3970:	df 91       	pop	r29
    3972:	08 95       	ret

00003974 <M_DIO_Void_SetPinDirection>:
#include "DIO_Private.h"
#include "STD.h"
#include "BitMath.h"

void M_DIO_Void_SetPinDirection(u8 Copy_U8_Port, u8 Copy_U8_Pin, u8 Copy_U8_State)
{
    3974:	df 93       	push	r29
    3976:	cf 93       	push	r28
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    397c:	29 97       	sbiw	r28, 0x09	; 9
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	89 83       	std	Y+1, r24	; 0x01
    398a:	6a 83       	std	Y+2, r22	; 0x02
    398c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8_State)
    398e:	8b 81       	ldd	r24, Y+3	; 0x03
    3990:	28 2f       	mov	r18, r24
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	39 87       	std	Y+9, r19	; 0x09
    3996:	28 87       	std	Y+8, r18	; 0x08
    3998:	88 85       	ldd	r24, Y+8	; 0x08
    399a:	99 85       	ldd	r25, Y+9	; 0x09
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	39 f0       	breq	.+14     	; 0x39ae <M_DIO_Void_SetPinDirection+0x3a>
    39a0:	28 85       	ldd	r18, Y+8	; 0x08
    39a2:	39 85       	ldd	r19, Y+9	; 0x09
    39a4:	21 30       	cpi	r18, 0x01	; 1
    39a6:	31 05       	cpc	r19, r1
    39a8:	09 f4       	brne	.+2      	; 0x39ac <M_DIO_Void_SetPinDirection+0x38>
    39aa:	76 c0       	rjmp	.+236    	; 0x3a98 <M_DIO_Void_SetPinDirection+0x124>
    39ac:	e4 c0       	rjmp	.+456    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
	{
	case INPUT :
		switch(Copy_U8_Port)
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	28 2f       	mov	r18, r24
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	3f 83       	std	Y+7, r19	; 0x07
    39b6:	2e 83       	std	Y+6, r18	; 0x06
    39b8:	8e 81       	ldd	r24, Y+6	; 0x06
    39ba:	9f 81       	ldd	r25, Y+7	; 0x07
    39bc:	82 30       	cpi	r24, 0x02	; 2
    39be:	91 05       	cpc	r25, r1
    39c0:	61 f1       	breq	.+88     	; 0x3a1a <M_DIO_Void_SetPinDirection+0xa6>
    39c2:	2e 81       	ldd	r18, Y+6	; 0x06
    39c4:	3f 81       	ldd	r19, Y+7	; 0x07
    39c6:	23 30       	cpi	r18, 0x03	; 3
    39c8:	31 05       	cpc	r19, r1
    39ca:	34 f4       	brge	.+12     	; 0x39d8 <M_DIO_Void_SetPinDirection+0x64>
    39cc:	8e 81       	ldd	r24, Y+6	; 0x06
    39ce:	9f 81       	ldd	r25, Y+7	; 0x07
    39d0:	81 30       	cpi	r24, 0x01	; 1
    39d2:	91 05       	cpc	r25, r1
    39d4:	69 f0       	breq	.+26     	; 0x39f0 <M_DIO_Void_SetPinDirection+0x7c>
    39d6:	cf c0       	rjmp	.+414    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
    39d8:	2e 81       	ldd	r18, Y+6	; 0x06
    39da:	3f 81       	ldd	r19, Y+7	; 0x07
    39dc:	23 30       	cpi	r18, 0x03	; 3
    39de:	31 05       	cpc	r19, r1
    39e0:	89 f1       	breq	.+98     	; 0x3a44 <M_DIO_Void_SetPinDirection+0xd0>
    39e2:	8e 81       	ldd	r24, Y+6	; 0x06
    39e4:	9f 81       	ldd	r25, Y+7	; 0x07
    39e6:	84 30       	cpi	r24, 0x04	; 4
    39e8:	91 05       	cpc	r25, r1
    39ea:	09 f4       	brne	.+2      	; 0x39ee <M_DIO_Void_SetPinDirection+0x7a>
    39ec:	40 c0       	rjmp	.+128    	; 0x3a6e <M_DIO_Void_SetPinDirection+0xfa>
    39ee:	c3 c0       	rjmp	.+390    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		{
		case DIO_PORTA: CLR_BIT(DDRA_REG,Copy_U8_Pin); break;
    39f0:	aa e3       	ldi	r26, 0x3A	; 58
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	ea e3       	ldi	r30, 0x3A	; 58
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	48 2f       	mov	r20, r24
    39fc:	8a 81       	ldd	r24, Y+2	; 0x02
    39fe:	28 2f       	mov	r18, r24
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	02 2e       	mov	r0, r18
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <M_DIO_Void_SetPinDirection+0x9a>
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	0a 94       	dec	r0
    3a10:	e2 f7       	brpl	.-8      	; 0x3a0a <M_DIO_Void_SetPinDirection+0x96>
    3a12:	80 95       	com	r24
    3a14:	84 23       	and	r24, r20
    3a16:	8c 93       	st	X, r24
    3a18:	ae c0       	rjmp	.+348    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		case DIO_PORTB: CLR_BIT(DDRB_REG,Copy_U8_Pin); break;
    3a1a:	a7 e3       	ldi	r26, 0x37	; 55
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	e7 e3       	ldi	r30, 0x37	; 55
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	48 2f       	mov	r20, r24
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	28 2f       	mov	r18, r24
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	02 2e       	mov	r0, r18
    3a32:	02 c0       	rjmp	.+4      	; 0x3a38 <M_DIO_Void_SetPinDirection+0xc4>
    3a34:	88 0f       	add	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	0a 94       	dec	r0
    3a3a:	e2 f7       	brpl	.-8      	; 0x3a34 <M_DIO_Void_SetPinDirection+0xc0>
    3a3c:	80 95       	com	r24
    3a3e:	84 23       	and	r24, r20
    3a40:	8c 93       	st	X, r24
    3a42:	99 c0       	rjmp	.+306    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		case DIO_PORTC: CLR_BIT(DDRC_REG,Copy_U8_Pin); break;
    3a44:	a4 e3       	ldi	r26, 0x34	; 52
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	e4 e3       	ldi	r30, 0x34	; 52
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	48 2f       	mov	r20, r24
    3a50:	8a 81       	ldd	r24, Y+2	; 0x02
    3a52:	28 2f       	mov	r18, r24
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	02 2e       	mov	r0, r18
    3a5c:	02 c0       	rjmp	.+4      	; 0x3a62 <M_DIO_Void_SetPinDirection+0xee>
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	0a 94       	dec	r0
    3a64:	e2 f7       	brpl	.-8      	; 0x3a5e <M_DIO_Void_SetPinDirection+0xea>
    3a66:	80 95       	com	r24
    3a68:	84 23       	and	r24, r20
    3a6a:	8c 93       	st	X, r24
    3a6c:	84 c0       	rjmp	.+264    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		case DIO_PORTD: CLR_BIT(DDRD_REG,Copy_U8_Pin); break;
    3a6e:	a1 e3       	ldi	r26, 0x31	; 49
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	e1 e3       	ldi	r30, 0x31	; 49
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	48 2f       	mov	r20, r24
    3a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7c:	28 2f       	mov	r18, r24
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	02 2e       	mov	r0, r18
    3a86:	02 c0       	rjmp	.+4      	; 0x3a8c <M_DIO_Void_SetPinDirection+0x118>
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	0a 94       	dec	r0
    3a8e:	e2 f7       	brpl	.-8      	; 0x3a88 <M_DIO_Void_SetPinDirection+0x114>
    3a90:	80 95       	com	r24
    3a92:	84 23       	and	r24, r20
    3a94:	8c 93       	st	X, r24
    3a96:	6f c0       	rjmp	.+222    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		default:                                       break;
		}
		break;
	case OUTPUT:
		switch(Copy_U8_Port)
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	3d 83       	std	Y+5, r19	; 0x05
    3aa0:	2c 83       	std	Y+4, r18	; 0x04
    3aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa6:	82 30       	cpi	r24, 0x02	; 2
    3aa8:	91 05       	cpc	r25, r1
    3aaa:	51 f1       	breq	.+84     	; 0x3b00 <M_DIO_Void_SetPinDirection+0x18c>
    3aac:	2c 81       	ldd	r18, Y+4	; 0x04
    3aae:	3d 81       	ldd	r19, Y+5	; 0x05
    3ab0:	23 30       	cpi	r18, 0x03	; 3
    3ab2:	31 05       	cpc	r19, r1
    3ab4:	34 f4       	brge	.+12     	; 0x3ac2 <M_DIO_Void_SetPinDirection+0x14e>
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    3aba:	81 30       	cpi	r24, 0x01	; 1
    3abc:	91 05       	cpc	r25, r1
    3abe:	61 f0       	breq	.+24     	; 0x3ad8 <M_DIO_Void_SetPinDirection+0x164>
    3ac0:	5a c0       	rjmp	.+180    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
    3ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ac6:	23 30       	cpi	r18, 0x03	; 3
    3ac8:	31 05       	cpc	r19, r1
    3aca:	71 f1       	breq	.+92     	; 0x3b28 <M_DIO_Void_SetPinDirection+0x1b4>
    3acc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ace:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad0:	84 30       	cpi	r24, 0x04	; 4
    3ad2:	91 05       	cpc	r25, r1
    3ad4:	e9 f1       	breq	.+122    	; 0x3b50 <M_DIO_Void_SetPinDirection+0x1dc>
    3ad6:	4f c0       	rjmp	.+158    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		{
		case DIO_PORTA: SET_BIT(DDRA_REG,Copy_U8_Pin); break;
    3ad8:	aa e3       	ldi	r26, 0x3A	; 58
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	ea e3       	ldi	r30, 0x3A	; 58
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	48 2f       	mov	r20, r24
    3ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae6:	28 2f       	mov	r18, r24
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	02 2e       	mov	r0, r18
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <M_DIO_Void_SetPinDirection+0x182>
    3af2:	88 0f       	add	r24, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	0a 94       	dec	r0
    3af8:	e2 f7       	brpl	.-8      	; 0x3af2 <M_DIO_Void_SetPinDirection+0x17e>
    3afa:	84 2b       	or	r24, r20
    3afc:	8c 93       	st	X, r24
    3afe:	3b c0       	rjmp	.+118    	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		case DIO_PORTB: SET_BIT(DDRB_REG,Copy_U8_Pin); break;
    3b00:	a7 e3       	ldi	r26, 0x37	; 55
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	e7 e3       	ldi	r30, 0x37	; 55
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	80 81       	ld	r24, Z
    3b0a:	48 2f       	mov	r20, r24
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	02 2e       	mov	r0, r18
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <M_DIO_Void_SetPinDirection+0x1aa>
    3b1a:	88 0f       	add	r24, r24
    3b1c:	99 1f       	adc	r25, r25
    3b1e:	0a 94       	dec	r0
    3b20:	e2 f7       	brpl	.-8      	; 0x3b1a <M_DIO_Void_SetPinDirection+0x1a6>
    3b22:	84 2b       	or	r24, r20
    3b24:	8c 93       	st	X, r24
    3b26:	27 c0       	rjmp	.+78     	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		case DIO_PORTC: SET_BIT(DDRC_REG,Copy_U8_Pin); break;
    3b28:	a4 e3       	ldi	r26, 0x34	; 52
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	e4 e3       	ldi	r30, 0x34	; 52
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	80 81       	ld	r24, Z
    3b32:	48 2f       	mov	r20, r24
    3b34:	8a 81       	ldd	r24, Y+2	; 0x02
    3b36:	28 2f       	mov	r18, r24
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	02 2e       	mov	r0, r18
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <M_DIO_Void_SetPinDirection+0x1d2>
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	0a 94       	dec	r0
    3b48:	e2 f7       	brpl	.-8      	; 0x3b42 <M_DIO_Void_SetPinDirection+0x1ce>
    3b4a:	84 2b       	or	r24, r20
    3b4c:	8c 93       	st	X, r24
    3b4e:	13 c0       	rjmp	.+38     	; 0x3b76 <M_DIO_Void_SetPinDirection+0x202>
		case DIO_PORTD: SET_BIT(DDRD_REG,Copy_U8_Pin); break;
    3b50:	a1 e3       	ldi	r26, 0x31	; 49
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	e1 e3       	ldi	r30, 0x31	; 49
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	80 81       	ld	r24, Z
    3b5a:	48 2f       	mov	r20, r24
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	28 2f       	mov	r18, r24
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	02 2e       	mov	r0, r18
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <M_DIO_Void_SetPinDirection+0x1fa>
    3b6a:	88 0f       	add	r24, r24
    3b6c:	99 1f       	adc	r25, r25
    3b6e:	0a 94       	dec	r0
    3b70:	e2 f7       	brpl	.-8      	; 0x3b6a <M_DIO_Void_SetPinDirection+0x1f6>
    3b72:	84 2b       	or	r24, r20
    3b74:	8c 93       	st	X, r24
		default:                                       break;
		}
		break;
	}
}
    3b76:	29 96       	adiw	r28, 0x09	; 9
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	cf 91       	pop	r28
    3b84:	df 91       	pop	r29
    3b86:	08 95       	ret

00003b88 <M_DIO_Void_SetPinValue>:

void M_DIO_Void_SetPinValue(u8 Copy_U8_Port, u8 Copy_U8_Pin, u8 Copy_U8_State)
{
    3b88:	df 93       	push	r29
    3b8a:	cf 93       	push	r28
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	29 97       	sbiw	r28, 0x09	; 9
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	89 83       	std	Y+1, r24	; 0x01
    3b9e:	6a 83       	std	Y+2, r22	; 0x02
    3ba0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8_State)
    3ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba4:	28 2f       	mov	r18, r24
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	39 87       	std	Y+9, r19	; 0x09
    3baa:	28 87       	std	Y+8, r18	; 0x08
    3bac:	88 85       	ldd	r24, Y+8	; 0x08
    3bae:	99 85       	ldd	r25, Y+9	; 0x09
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	39 f0       	breq	.+14     	; 0x3bc2 <M_DIO_Void_SetPinValue+0x3a>
    3bb4:	28 85       	ldd	r18, Y+8	; 0x08
    3bb6:	39 85       	ldd	r19, Y+9	; 0x09
    3bb8:	21 30       	cpi	r18, 0x01	; 1
    3bba:	31 05       	cpc	r19, r1
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <M_DIO_Void_SetPinValue+0x38>
    3bbe:	76 c0       	rjmp	.+236    	; 0x3cac <M_DIO_Void_SetPinValue+0x124>
    3bc0:	e4 c0       	rjmp	.+456    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
	{
	case LOW :
		switch(Copy_U8_Port)
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	28 2f       	mov	r18, r24
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	3f 83       	std	Y+7, r19	; 0x07
    3bca:	2e 83       	std	Y+6, r18	; 0x06
    3bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bce:	9f 81       	ldd	r25, Y+7	; 0x07
    3bd0:	82 30       	cpi	r24, 0x02	; 2
    3bd2:	91 05       	cpc	r25, r1
    3bd4:	61 f1       	breq	.+88     	; 0x3c2e <M_DIO_Void_SetPinValue+0xa6>
    3bd6:	2e 81       	ldd	r18, Y+6	; 0x06
    3bd8:	3f 81       	ldd	r19, Y+7	; 0x07
    3bda:	23 30       	cpi	r18, 0x03	; 3
    3bdc:	31 05       	cpc	r19, r1
    3bde:	34 f4       	brge	.+12     	; 0x3bec <M_DIO_Void_SetPinValue+0x64>
    3be0:	8e 81       	ldd	r24, Y+6	; 0x06
    3be2:	9f 81       	ldd	r25, Y+7	; 0x07
    3be4:	81 30       	cpi	r24, 0x01	; 1
    3be6:	91 05       	cpc	r25, r1
    3be8:	69 f0       	breq	.+26     	; 0x3c04 <M_DIO_Void_SetPinValue+0x7c>
    3bea:	cf c0       	rjmp	.+414    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
    3bec:	2e 81       	ldd	r18, Y+6	; 0x06
    3bee:	3f 81       	ldd	r19, Y+7	; 0x07
    3bf0:	23 30       	cpi	r18, 0x03	; 3
    3bf2:	31 05       	cpc	r19, r1
    3bf4:	89 f1       	breq	.+98     	; 0x3c58 <M_DIO_Void_SetPinValue+0xd0>
    3bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    3bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    3bfa:	84 30       	cpi	r24, 0x04	; 4
    3bfc:	91 05       	cpc	r25, r1
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <M_DIO_Void_SetPinValue+0x7a>
    3c00:	40 c0       	rjmp	.+128    	; 0x3c82 <M_DIO_Void_SetPinValue+0xfa>
    3c02:	c3 c0       	rjmp	.+390    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
		{
		case DIO_PORTA: CLR_BIT(PORTA_REG,Copy_U8_Pin); break;
    3c04:	ab e3       	ldi	r26, 0x3B	; 59
    3c06:	b0 e0       	ldi	r27, 0x00	; 0
    3c08:	eb e3       	ldi	r30, 0x3B	; 59
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	80 81       	ld	r24, Z
    3c0e:	48 2f       	mov	r20, r24
    3c10:	8a 81       	ldd	r24, Y+2	; 0x02
    3c12:	28 2f       	mov	r18, r24
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	02 2e       	mov	r0, r18
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <M_DIO_Void_SetPinValue+0x9a>
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	0a 94       	dec	r0
    3c24:	e2 f7       	brpl	.-8      	; 0x3c1e <M_DIO_Void_SetPinValue+0x96>
    3c26:	80 95       	com	r24
    3c28:	84 23       	and	r24, r20
    3c2a:	8c 93       	st	X, r24
    3c2c:	ae c0       	rjmp	.+348    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
		case DIO_PORTB: CLR_BIT(PORTB_REG,Copy_U8_Pin); break;
    3c2e:	a8 e3       	ldi	r26, 0x38	; 56
    3c30:	b0 e0       	ldi	r27, 0x00	; 0
    3c32:	e8 e3       	ldi	r30, 0x38	; 56
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	80 81       	ld	r24, Z
    3c38:	48 2f       	mov	r20, r24
    3c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	02 2e       	mov	r0, r18
    3c46:	02 c0       	rjmp	.+4      	; 0x3c4c <M_DIO_Void_SetPinValue+0xc4>
    3c48:	88 0f       	add	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	0a 94       	dec	r0
    3c4e:	e2 f7       	brpl	.-8      	; 0x3c48 <M_DIO_Void_SetPinValue+0xc0>
    3c50:	80 95       	com	r24
    3c52:	84 23       	and	r24, r20
    3c54:	8c 93       	st	X, r24
    3c56:	99 c0       	rjmp	.+306    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
		case DIO_PORTC: CLR_BIT(PORTC_REG,Copy_U8_Pin); break;
    3c58:	a5 e3       	ldi	r26, 0x35	; 53
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e5 e3       	ldi	r30, 0x35	; 53
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	48 2f       	mov	r20, r24
    3c64:	8a 81       	ldd	r24, Y+2	; 0x02
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	02 2e       	mov	r0, r18
    3c70:	02 c0       	rjmp	.+4      	; 0x3c76 <M_DIO_Void_SetPinValue+0xee>
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	0a 94       	dec	r0
    3c78:	e2 f7       	brpl	.-8      	; 0x3c72 <M_DIO_Void_SetPinValue+0xea>
    3c7a:	80 95       	com	r24
    3c7c:	84 23       	and	r24, r20
    3c7e:	8c 93       	st	X, r24
    3c80:	84 c0       	rjmp	.+264    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
		case DIO_PORTD: CLR_BIT(PORTD_REG,Copy_U8_Pin); break;
    3c82:	a2 e3       	ldi	r26, 0x32	; 50
    3c84:	b0 e0       	ldi	r27, 0x00	; 0
    3c86:	e2 e3       	ldi	r30, 0x32	; 50
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	80 81       	ld	r24, Z
    3c8c:	48 2f       	mov	r20, r24
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	28 2f       	mov	r18, r24
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	02 2e       	mov	r0, r18
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <M_DIO_Void_SetPinValue+0x118>
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	0a 94       	dec	r0
    3ca2:	e2 f7       	brpl	.-8      	; 0x3c9c <M_DIO_Void_SetPinValue+0x114>
    3ca4:	80 95       	com	r24
    3ca6:	84 23       	and	r24, r20
    3ca8:	8c 93       	st	X, r24
    3caa:	6f c0       	rjmp	.+222    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
		default:                                        break;
		}
		break;
		case HIGH:
			switch(Copy_U8_Port)
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	28 2f       	mov	r18, r24
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	3d 83       	std	Y+5, r19	; 0x05
    3cb4:	2c 83       	std	Y+4, r18	; 0x04
    3cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cba:	82 30       	cpi	r24, 0x02	; 2
    3cbc:	91 05       	cpc	r25, r1
    3cbe:	51 f1       	breq	.+84     	; 0x3d14 <M_DIO_Void_SetPinValue+0x18c>
    3cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    3cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    3cc4:	23 30       	cpi	r18, 0x03	; 3
    3cc6:	31 05       	cpc	r19, r1
    3cc8:	34 f4       	brge	.+12     	; 0x3cd6 <M_DIO_Void_SetPinValue+0x14e>
    3cca:	8c 81       	ldd	r24, Y+4	; 0x04
    3ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    3cce:	81 30       	cpi	r24, 0x01	; 1
    3cd0:	91 05       	cpc	r25, r1
    3cd2:	61 f0       	breq	.+24     	; 0x3cec <M_DIO_Void_SetPinValue+0x164>
    3cd4:	5a c0       	rjmp	.+180    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
    3cd6:	2c 81       	ldd	r18, Y+4	; 0x04
    3cd8:	3d 81       	ldd	r19, Y+5	; 0x05
    3cda:	23 30       	cpi	r18, 0x03	; 3
    3cdc:	31 05       	cpc	r19, r1
    3cde:	71 f1       	breq	.+92     	; 0x3d3c <M_DIO_Void_SetPinValue+0x1b4>
    3ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce4:	84 30       	cpi	r24, 0x04	; 4
    3ce6:	91 05       	cpc	r25, r1
    3ce8:	e9 f1       	breq	.+122    	; 0x3d64 <M_DIO_Void_SetPinValue+0x1dc>
    3cea:	4f c0       	rjmp	.+158    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
			{
			case DIO_PORTA: SET_BIT(PORTA_REG,Copy_U8_Pin); break;
    3cec:	ab e3       	ldi	r26, 0x3B	; 59
    3cee:	b0 e0       	ldi	r27, 0x00	; 0
    3cf0:	eb e3       	ldi	r30, 0x3B	; 59
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	80 81       	ld	r24, Z
    3cf6:	48 2f       	mov	r20, r24
    3cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfa:	28 2f       	mov	r18, r24
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	02 2e       	mov	r0, r18
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <M_DIO_Void_SetPinValue+0x182>
    3d06:	88 0f       	add	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	0a 94       	dec	r0
    3d0c:	e2 f7       	brpl	.-8      	; 0x3d06 <M_DIO_Void_SetPinValue+0x17e>
    3d0e:	84 2b       	or	r24, r20
    3d10:	8c 93       	st	X, r24
    3d12:	3b c0       	rjmp	.+118    	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
			case DIO_PORTB: SET_BIT(PORTB_REG,Copy_U8_Pin); break;
    3d14:	a8 e3       	ldi	r26, 0x38	; 56
    3d16:	b0 e0       	ldi	r27, 0x00	; 0
    3d18:	e8 e3       	ldi	r30, 0x38	; 56
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
    3d1e:	48 2f       	mov	r20, r24
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	28 2f       	mov	r18, r24
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	02 2e       	mov	r0, r18
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <M_DIO_Void_SetPinValue+0x1aa>
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	0a 94       	dec	r0
    3d34:	e2 f7       	brpl	.-8      	; 0x3d2e <M_DIO_Void_SetPinValue+0x1a6>
    3d36:	84 2b       	or	r24, r20
    3d38:	8c 93       	st	X, r24
    3d3a:	27 c0       	rjmp	.+78     	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
			case DIO_PORTC: SET_BIT(PORTC_REG,Copy_U8_Pin); break;
    3d3c:	a5 e3       	ldi	r26, 0x35	; 53
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	e5 e3       	ldi	r30, 0x35	; 53
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	80 81       	ld	r24, Z
    3d46:	48 2f       	mov	r20, r24
    3d48:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4a:	28 2f       	mov	r18, r24
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	02 2e       	mov	r0, r18
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <M_DIO_Void_SetPinValue+0x1d2>
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	0a 94       	dec	r0
    3d5c:	e2 f7       	brpl	.-8      	; 0x3d56 <M_DIO_Void_SetPinValue+0x1ce>
    3d5e:	84 2b       	or	r24, r20
    3d60:	8c 93       	st	X, r24
    3d62:	13 c0       	rjmp	.+38     	; 0x3d8a <M_DIO_Void_SetPinValue+0x202>
			case DIO_PORTD: SET_BIT(PORTD_REG,Copy_U8_Pin); break;
    3d64:	a2 e3       	ldi	r26, 0x32	; 50
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	e2 e3       	ldi	r30, 0x32	; 50
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	48 2f       	mov	r20, r24
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	28 2f       	mov	r18, r24
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	02 2e       	mov	r0, r18
    3d7c:	02 c0       	rjmp	.+4      	; 0x3d82 <M_DIO_Void_SetPinValue+0x1fa>
    3d7e:	88 0f       	add	r24, r24
    3d80:	99 1f       	adc	r25, r25
    3d82:	0a 94       	dec	r0
    3d84:	e2 f7       	brpl	.-8      	; 0x3d7e <M_DIO_Void_SetPinValue+0x1f6>
    3d86:	84 2b       	or	r24, r20
    3d88:	8c 93       	st	X, r24
			default:                                        break;
			}
			break;
	}
}
    3d8a:	29 96       	adiw	r28, 0x09	; 9
    3d8c:	0f b6       	in	r0, 0x3f	; 63
    3d8e:	f8 94       	cli
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	0f be       	out	0x3f, r0	; 63
    3d94:	cd bf       	out	0x3d, r28	; 61
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret

00003d9c <M_DIO_Void_TogPin>:
void M_DIO_Void_TogPin(u8 Copy_U8_Port,u8 Copy_U8_Pin)
{
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <M_DIO_Void_TogPin+0x6>
    3da2:	00 d0       	rcall	.+0      	; 0x3da4 <M_DIO_Void_TogPin+0x8>
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	89 83       	std	Y+1, r24	; 0x01
    3daa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_Port)
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	28 2f       	mov	r18, r24
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	3c 83       	std	Y+4, r19	; 0x04
    3db4:	2b 83       	std	Y+3, r18	; 0x03
    3db6:	8b 81       	ldd	r24, Y+3	; 0x03
    3db8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dba:	82 30       	cpi	r24, 0x02	; 2
    3dbc:	91 05       	cpc	r25, r1
    3dbe:	51 f1       	breq	.+84     	; 0x3e14 <M_DIO_Void_TogPin+0x78>
    3dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    3dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    3dc4:	23 30       	cpi	r18, 0x03	; 3
    3dc6:	31 05       	cpc	r19, r1
    3dc8:	34 f4       	brge	.+12     	; 0x3dd6 <M_DIO_Void_TogPin+0x3a>
    3dca:	8b 81       	ldd	r24, Y+3	; 0x03
    3dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dce:	81 30       	cpi	r24, 0x01	; 1
    3dd0:	91 05       	cpc	r25, r1
    3dd2:	61 f0       	breq	.+24     	; 0x3dec <M_DIO_Void_TogPin+0x50>
    3dd4:	5a c0       	rjmp	.+180    	; 0x3e8a <M_DIO_Void_TogPin+0xee>
    3dd6:	2b 81       	ldd	r18, Y+3	; 0x03
    3dd8:	3c 81       	ldd	r19, Y+4	; 0x04
    3dda:	23 30       	cpi	r18, 0x03	; 3
    3ddc:	31 05       	cpc	r19, r1
    3dde:	71 f1       	breq	.+92     	; 0x3e3c <M_DIO_Void_TogPin+0xa0>
    3de0:	8b 81       	ldd	r24, Y+3	; 0x03
    3de2:	9c 81       	ldd	r25, Y+4	; 0x04
    3de4:	84 30       	cpi	r24, 0x04	; 4
    3de6:	91 05       	cpc	r25, r1
    3de8:	e9 f1       	breq	.+122    	; 0x3e64 <M_DIO_Void_TogPin+0xc8>
    3dea:	4f c0       	rjmp	.+158    	; 0x3e8a <M_DIO_Void_TogPin+0xee>
	{
	case DIO_PORTA: TOG_BIT(PORTA_REG,Copy_U8_Pin); break;
    3dec:	ab e3       	ldi	r26, 0x3B	; 59
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	eb e3       	ldi	r30, 0x3B	; 59
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	48 2f       	mov	r20, r24
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	28 2f       	mov	r18, r24
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	02 2e       	mov	r0, r18
    3e04:	02 c0       	rjmp	.+4      	; 0x3e0a <M_DIO_Void_TogPin+0x6e>
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	0a 94       	dec	r0
    3e0c:	e2 f7       	brpl	.-8      	; 0x3e06 <M_DIO_Void_TogPin+0x6a>
    3e0e:	84 27       	eor	r24, r20
    3e10:	8c 93       	st	X, r24
    3e12:	3b c0       	rjmp	.+118    	; 0x3e8a <M_DIO_Void_TogPin+0xee>
	case DIO_PORTB: TOG_BIT(PORTB_REG,Copy_U8_Pin); break;
    3e14:	a8 e3       	ldi	r26, 0x38	; 56
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	e8 e3       	ldi	r30, 0x38	; 56
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	48 2f       	mov	r20, r24
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	28 2f       	mov	r18, r24
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	02 2e       	mov	r0, r18
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <M_DIO_Void_TogPin+0x96>
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	0a 94       	dec	r0
    3e34:	e2 f7       	brpl	.-8      	; 0x3e2e <M_DIO_Void_TogPin+0x92>
    3e36:	84 27       	eor	r24, r20
    3e38:	8c 93       	st	X, r24
    3e3a:	27 c0       	rjmp	.+78     	; 0x3e8a <M_DIO_Void_TogPin+0xee>
	case DIO_PORTC: TOG_BIT(PORTC_REG,Copy_U8_Pin); break;
    3e3c:	a5 e3       	ldi	r26, 0x35	; 53
    3e3e:	b0 e0       	ldi	r27, 0x00	; 0
    3e40:	e5 e3       	ldi	r30, 0x35	; 53
    3e42:	f0 e0       	ldi	r31, 0x00	; 0
    3e44:	80 81       	ld	r24, Z
    3e46:	48 2f       	mov	r20, r24
    3e48:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	02 2e       	mov	r0, r18
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <M_DIO_Void_TogPin+0xbe>
    3e56:	88 0f       	add	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	0a 94       	dec	r0
    3e5c:	e2 f7       	brpl	.-8      	; 0x3e56 <M_DIO_Void_TogPin+0xba>
    3e5e:	84 27       	eor	r24, r20
    3e60:	8c 93       	st	X, r24
    3e62:	13 c0       	rjmp	.+38     	; 0x3e8a <M_DIO_Void_TogPin+0xee>
	case DIO_PORTD: TOG_BIT(PORTD_REG,Copy_U8_Pin); break;
    3e64:	a2 e3       	ldi	r26, 0x32	; 50
    3e66:	b0 e0       	ldi	r27, 0x00	; 0
    3e68:	e2 e3       	ldi	r30, 0x32	; 50
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	80 81       	ld	r24, Z
    3e6e:	48 2f       	mov	r20, r24
    3e70:	8a 81       	ldd	r24, Y+2	; 0x02
    3e72:	28 2f       	mov	r18, r24
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	02 2e       	mov	r0, r18
    3e7c:	02 c0       	rjmp	.+4      	; 0x3e82 <M_DIO_Void_TogPin+0xe6>
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	0a 94       	dec	r0
    3e84:	e2 f7       	brpl	.-8      	; 0x3e7e <M_DIO_Void_TogPin+0xe2>
    3e86:	84 27       	eor	r24, r20
    3e88:	8c 93       	st	X, r24
	default:                                        break;
	}
}
    3e8a:	0f 90       	pop	r0
    3e8c:	0f 90       	pop	r0
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <M_DIO_U8_GetPinValue>:
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Port, u8 Copy_U8_Pin)
{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <M_DIO_U8_GetPinValue+0x6>
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <M_DIO_U8_GetPinValue+0x8>
    3ea0:	0f 92       	push	r0
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	8a 83       	std	Y+2, r24	; 0x02
    3ea8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8_Reading = 0;
    3eaa:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8_Port)
    3eac:	8a 81       	ldd	r24, Y+2	; 0x02
    3eae:	28 2f       	mov	r18, r24
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	3d 83       	std	Y+5, r19	; 0x05
    3eb4:	2c 83       	std	Y+4, r18	; 0x04
    3eb6:	4c 81       	ldd	r20, Y+4	; 0x04
    3eb8:	5d 81       	ldd	r21, Y+5	; 0x05
    3eba:	42 30       	cpi	r20, 0x02	; 2
    3ebc:	51 05       	cpc	r21, r1
    3ebe:	41 f1       	breq	.+80     	; 0x3f10 <M_DIO_U8_GetPinValue+0x78>
    3ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ec4:	83 30       	cpi	r24, 0x03	; 3
    3ec6:	91 05       	cpc	r25, r1
    3ec8:	34 f4       	brge	.+12     	; 0x3ed6 <M_DIO_U8_GetPinValue+0x3e>
    3eca:	2c 81       	ldd	r18, Y+4	; 0x04
    3ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    3ece:	21 30       	cpi	r18, 0x01	; 1
    3ed0:	31 05       	cpc	r19, r1
    3ed2:	61 f0       	breq	.+24     	; 0x3eec <M_DIO_U8_GetPinValue+0x54>
    3ed4:	52 c0       	rjmp	.+164    	; 0x3f7a <M_DIO_U8_GetPinValue+0xe2>
    3ed6:	4c 81       	ldd	r20, Y+4	; 0x04
    3ed8:	5d 81       	ldd	r21, Y+5	; 0x05
    3eda:	43 30       	cpi	r20, 0x03	; 3
    3edc:	51 05       	cpc	r21, r1
    3ede:	51 f1       	breq	.+84     	; 0x3f34 <M_DIO_U8_GetPinValue+0x9c>
    3ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee4:	84 30       	cpi	r24, 0x04	; 4
    3ee6:	91 05       	cpc	r25, r1
    3ee8:	b9 f1       	breq	.+110    	; 0x3f58 <M_DIO_U8_GetPinValue+0xc0>
    3eea:	47 c0       	rjmp	.+142    	; 0x3f7a <M_DIO_U8_GetPinValue+0xe2>
	{
	case DIO_PORTA: Local_U8_Reading = GET_BIT(PINA_REG,Copy_U8_Pin); break;
    3eec:	e9 e3       	ldi	r30, 0x39	; 57
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	80 81       	ld	r24, Z
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef8:	88 2f       	mov	r24, r24
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	a9 01       	movw	r20, r18
    3efe:	02 c0       	rjmp	.+4      	; 0x3f04 <M_DIO_U8_GetPinValue+0x6c>
    3f00:	55 95       	asr	r21
    3f02:	47 95       	ror	r20
    3f04:	8a 95       	dec	r24
    3f06:	e2 f7       	brpl	.-8      	; 0x3f00 <M_DIO_U8_GetPinValue+0x68>
    3f08:	ca 01       	movw	r24, r20
    3f0a:	81 70       	andi	r24, 0x01	; 1
    3f0c:	89 83       	std	Y+1, r24	; 0x01
    3f0e:	35 c0       	rjmp	.+106    	; 0x3f7a <M_DIO_U8_GetPinValue+0xe2>
	case DIO_PORTB: Local_U8_Reading = GET_BIT(PINB_REG,Copy_U8_Pin); break;
    3f10:	e6 e3       	ldi	r30, 0x36	; 54
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	80 81       	ld	r24, Z
    3f16:	28 2f       	mov	r18, r24
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1c:	88 2f       	mov	r24, r24
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	a9 01       	movw	r20, r18
    3f22:	02 c0       	rjmp	.+4      	; 0x3f28 <M_DIO_U8_GetPinValue+0x90>
    3f24:	55 95       	asr	r21
    3f26:	47 95       	ror	r20
    3f28:	8a 95       	dec	r24
    3f2a:	e2 f7       	brpl	.-8      	; 0x3f24 <M_DIO_U8_GetPinValue+0x8c>
    3f2c:	ca 01       	movw	r24, r20
    3f2e:	81 70       	andi	r24, 0x01	; 1
    3f30:	89 83       	std	Y+1, r24	; 0x01
    3f32:	23 c0       	rjmp	.+70     	; 0x3f7a <M_DIO_U8_GetPinValue+0xe2>
	case DIO_PORTC: Local_U8_Reading = GET_BIT(PINC_REG,Copy_U8_Pin); break;
    3f34:	e3 e3       	ldi	r30, 0x33	; 51
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	80 81       	ld	r24, Z
    3f3a:	28 2f       	mov	r18, r24
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f40:	88 2f       	mov	r24, r24
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	a9 01       	movw	r20, r18
    3f46:	02 c0       	rjmp	.+4      	; 0x3f4c <M_DIO_U8_GetPinValue+0xb4>
    3f48:	55 95       	asr	r21
    3f4a:	47 95       	ror	r20
    3f4c:	8a 95       	dec	r24
    3f4e:	e2 f7       	brpl	.-8      	; 0x3f48 <M_DIO_U8_GetPinValue+0xb0>
    3f50:	ca 01       	movw	r24, r20
    3f52:	81 70       	andi	r24, 0x01	; 1
    3f54:	89 83       	std	Y+1, r24	; 0x01
    3f56:	11 c0       	rjmp	.+34     	; 0x3f7a <M_DIO_U8_GetPinValue+0xe2>
	case DIO_PORTD: Local_U8_Reading = GET_BIT(PIND_REG,Copy_U8_Pin); break;
    3f58:	e0 e3       	ldi	r30, 0x30	; 48
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	80 81       	ld	r24, Z
    3f5e:	28 2f       	mov	r18, r24
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	8b 81       	ldd	r24, Y+3	; 0x03
    3f64:	88 2f       	mov	r24, r24
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	a9 01       	movw	r20, r18
    3f6a:	02 c0       	rjmp	.+4      	; 0x3f70 <M_DIO_U8_GetPinValue+0xd8>
    3f6c:	55 95       	asr	r21
    3f6e:	47 95       	ror	r20
    3f70:	8a 95       	dec	r24
    3f72:	e2 f7       	brpl	.-8      	; 0x3f6c <M_DIO_U8_GetPinValue+0xd4>
    3f74:	ca 01       	movw	r24, r20
    3f76:	81 70       	andi	r24, 0x01	; 1
    3f78:	89 83       	std	Y+1, r24	; 0x01
	default:                                                          break;
	}
	return Local_U8_Reading;
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	08 95       	ret

00003f8c <M_EXTINT_Void_EXTINTInit>:
void(*ExtInt0_CallBack)(void);
void(*ExtInt1_CallBack)(void);
void(*ExtInt2_CallBack)(void);

void M_EXTINT_Void_EXTINTInit(u8 Copy_U8_ExtIntChannel)
{
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	00 d0       	rcall	.+0      	; 0x3f92 <M_EXTINT_Void_EXTINTInit+0x6>
    3f92:	0f 92       	push	r0
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
    3f98:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_ExtIntChannel)
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	28 2f       	mov	r18, r24
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	3b 83       	std	Y+3, r19	; 0x03
    3fa2:	2a 83       	std	Y+2, r18	; 0x02
    3fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa8:	81 30       	cpi	r24, 0x01	; 1
    3faa:	91 05       	cpc	r25, r1
    3fac:	f9 f0       	breq	.+62     	; 0x3fec <M_EXTINT_Void_EXTINTInit+0x60>
    3fae:	2a 81       	ldd	r18, Y+2	; 0x02
    3fb0:	3b 81       	ldd	r19, Y+3	; 0x03
    3fb2:	22 30       	cpi	r18, 0x02	; 2
    3fb4:	31 05       	cpc	r19, r1
    3fb6:	81 f1       	breq	.+96     	; 0x4018 <M_EXTINT_Void_EXTINTInit+0x8c>
    3fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fba:	9b 81       	ldd	r25, Y+3	; 0x03
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	d1 f5       	brne	.+116    	; 0x4034 <M_EXTINT_Void_EXTINTInit+0xa8>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC00_BIT);
    3fc0:	a5 e5       	ldi	r26, 0x55	; 85
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	e5 e5       	ldi	r30, 0x55	; 85
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	80 81       	ld	r24, Z
    3fca:	8e 7f       	andi	r24, 0xFE	; 254
    3fcc:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    3fce:	a5 e5       	ldi	r26, 0x55	; 85
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	e5 e5       	ldi	r30, 0x55	; 85
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	80 81       	ld	r24, Z
    3fd8:	82 60       	ori	r24, 0x02	; 2
    3fda:	8c 93       	st	X, r24
#elif EXTINT0_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable int0 local interrupt
		SET_BIT(GICR_REG,INT0_BIT);
    3fdc:	ab e5       	ldi	r26, 0x5B	; 91
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	eb e5       	ldi	r30, 0x5B	; 91
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	80 64       	ori	r24, 0x40	; 64
    3fe8:	8c 93       	st	X, r24
    3fea:	24 c0       	rjmp	.+72     	; 0x4034 <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT1_CHANNEL:
#if   EXTINT1_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    3fec:	a5 e5       	ldi	r26, 0x55	; 85
    3fee:	b0 e0       	ldi	r27, 0x00	; 0
    3ff0:	e5 e5       	ldi	r30, 0x55	; 85
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	8b 7f       	andi	r24, 0xFB	; 251
    3ff8:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    3ffa:	a5 e5       	ldi	r26, 0x55	; 85
    3ffc:	b0 e0       	ldi	r27, 0x00	; 0
    3ffe:	e5 e5       	ldi	r30, 0x55	; 85
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	80 81       	ld	r24, Z
    4004:	88 60       	ori	r24, 0x08	; 8
    4006:	8c 93       	st	X, r24
#elif EXTINT1_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable int0 local interrupt
		SET_BIT(GICR_REG,INT1_BIT);
    4008:	ab e5       	ldi	r26, 0x5B	; 91
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	eb e5       	ldi	r30, 0x5B	; 91
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	80 81       	ld	r24, Z
    4012:	80 68       	ori	r24, 0x80	; 128
    4014:	8c 93       	st	X, r24
    4016:	0e c0       	rjmp	.+28     	; 0x4034 <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT2_CHANNEL:
#if   EXTINT2_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#elif EXTINT2_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    4018:	a4 e5       	ldi	r26, 0x54	; 84
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	e4 e5       	ldi	r30, 0x54	; 84
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	80 64       	ori	r24, 0x40	; 64
    4024:	8c 93       	st	X, r24
#endif
		// to enable int0 local interrupt
		SET_BIT(GICR_REG,INT2_BIT);
    4026:	ab e5       	ldi	r26, 0x5B	; 91
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	eb e5       	ldi	r30, 0x5B	; 91
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	80 62       	ori	r24, 0x20	; 32
    4032:	8c 93       	st	X, r24
		break;
	default:                                           break;
	}
}
    4034:	0f 90       	pop	r0
    4036:	0f 90       	pop	r0
    4038:	0f 90       	pop	r0
    403a:	cf 91       	pop	r28
    403c:	df 91       	pop	r29
    403e:	08 95       	ret

00004040 <M_EXTINT_Void_SetCallBack>:

void M_EXTINT_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_ptr)(void))
{
    4040:	df 93       	push	r29
    4042:	cf 93       	push	r28
    4044:	00 d0       	rcall	.+0      	; 0x4046 <M_EXTINT_Void_SetCallBack+0x6>
    4046:	00 d0       	rcall	.+0      	; 0x4048 <M_EXTINT_Void_SetCallBack+0x8>
    4048:	0f 92       	push	r0
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	89 83       	std	Y+1, r24	; 0x01
    4050:	7b 83       	std	Y+3, r23	; 0x03
    4052:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_ExtIntChannel)
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	28 2f       	mov	r18, r24
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	3d 83       	std	Y+5, r19	; 0x05
    405c:	2c 83       	std	Y+4, r18	; 0x04
    405e:	8c 81       	ldd	r24, Y+4	; 0x04
    4060:	9d 81       	ldd	r25, Y+5	; 0x05
    4062:	81 30       	cpi	r24, 0x01	; 1
    4064:	91 05       	cpc	r25, r1
    4066:	81 f0       	breq	.+32     	; 0x4088 <M_EXTINT_Void_SetCallBack+0x48>
    4068:	2c 81       	ldd	r18, Y+4	; 0x04
    406a:	3d 81       	ldd	r19, Y+5	; 0x05
    406c:	22 30       	cpi	r18, 0x02	; 2
    406e:	31 05       	cpc	r19, r1
    4070:	91 f0       	breq	.+36     	; 0x4096 <M_EXTINT_Void_SetCallBack+0x56>
    4072:	8c 81       	ldd	r24, Y+4	; 0x04
    4074:	9d 81       	ldd	r25, Y+5	; 0x05
    4076:	00 97       	sbiw	r24, 0x00	; 0
    4078:	a1 f4       	brne	.+40     	; 0x40a2 <M_EXTINT_Void_SetCallBack+0x62>
	{
	case INT0_CHANNEL:ExtInt0_CallBack = Copy_ptr; break;
    407a:	8a 81       	ldd	r24, Y+2	; 0x02
    407c:	9b 81       	ldd	r25, Y+3	; 0x03
    407e:	90 93 67 01 	sts	0x0167, r25
    4082:	80 93 66 01 	sts	0x0166, r24
    4086:	0d c0       	rjmp	.+26     	; 0x40a2 <M_EXTINT_Void_SetCallBack+0x62>
	case INT1_CHANNEL:ExtInt1_CallBack = Copy_ptr; break;
    4088:	8a 81       	ldd	r24, Y+2	; 0x02
    408a:	9b 81       	ldd	r25, Y+3	; 0x03
    408c:	90 93 63 01 	sts	0x0163, r25
    4090:	80 93 62 01 	sts	0x0162, r24
    4094:	06 c0       	rjmp	.+12     	; 0x40a2 <M_EXTINT_Void_SetCallBack+0x62>
	case INT2_CHANNEL:ExtInt2_CallBack = Copy_ptr; break;
    4096:	8a 81       	ldd	r24, Y+2	; 0x02
    4098:	9b 81       	ldd	r25, Y+3	; 0x03
    409a:	90 93 65 01 	sts	0x0165, r25
    409e:	80 93 64 01 	sts	0x0164, r24
	default:                                       break;
	}
}
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	cf 91       	pop	r28
    40ae:	df 91       	pop	r29
    40b0:	08 95       	ret

000040b2 <__vector_1>:

ISR(INT0_vect)
{
    40b2:	1f 92       	push	r1
    40b4:	0f 92       	push	r0
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	0f 92       	push	r0
    40ba:	11 24       	eor	r1, r1
    40bc:	2f 93       	push	r18
    40be:	3f 93       	push	r19
    40c0:	4f 93       	push	r20
    40c2:	5f 93       	push	r21
    40c4:	6f 93       	push	r22
    40c6:	7f 93       	push	r23
    40c8:	8f 93       	push	r24
    40ca:	9f 93       	push	r25
    40cc:	af 93       	push	r26
    40ce:	bf 93       	push	r27
    40d0:	ef 93       	push	r30
    40d2:	ff 93       	push	r31
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
	ExtInt0_CallBack();
    40dc:	e0 91 66 01 	lds	r30, 0x0166
    40e0:	f0 91 67 01 	lds	r31, 0x0167
    40e4:	09 95       	icall
}
    40e6:	cf 91       	pop	r28
    40e8:	df 91       	pop	r29
    40ea:	ff 91       	pop	r31
    40ec:	ef 91       	pop	r30
    40ee:	bf 91       	pop	r27
    40f0:	af 91       	pop	r26
    40f2:	9f 91       	pop	r25
    40f4:	8f 91       	pop	r24
    40f6:	7f 91       	pop	r23
    40f8:	6f 91       	pop	r22
    40fa:	5f 91       	pop	r21
    40fc:	4f 91       	pop	r20
    40fe:	3f 91       	pop	r19
    4100:	2f 91       	pop	r18
    4102:	0f 90       	pop	r0
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	0f 90       	pop	r0
    4108:	1f 90       	pop	r1
    410a:	18 95       	reti

0000410c <__vector_2>:
ISR(INT1_vect)
{
    410c:	1f 92       	push	r1
    410e:	0f 92       	push	r0
    4110:	0f b6       	in	r0, 0x3f	; 63
    4112:	0f 92       	push	r0
    4114:	11 24       	eor	r1, r1
    4116:	2f 93       	push	r18
    4118:	3f 93       	push	r19
    411a:	4f 93       	push	r20
    411c:	5f 93       	push	r21
    411e:	6f 93       	push	r22
    4120:	7f 93       	push	r23
    4122:	8f 93       	push	r24
    4124:	9f 93       	push	r25
    4126:	af 93       	push	r26
    4128:	bf 93       	push	r27
    412a:	ef 93       	push	r30
    412c:	ff 93       	push	r31
    412e:	df 93       	push	r29
    4130:	cf 93       	push	r28
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
	ExtInt1_CallBack();
    4136:	e0 91 62 01 	lds	r30, 0x0162
    413a:	f0 91 63 01 	lds	r31, 0x0163
    413e:	09 95       	icall
}
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	ff 91       	pop	r31
    4146:	ef 91       	pop	r30
    4148:	bf 91       	pop	r27
    414a:	af 91       	pop	r26
    414c:	9f 91       	pop	r25
    414e:	8f 91       	pop	r24
    4150:	7f 91       	pop	r23
    4152:	6f 91       	pop	r22
    4154:	5f 91       	pop	r21
    4156:	4f 91       	pop	r20
    4158:	3f 91       	pop	r19
    415a:	2f 91       	pop	r18
    415c:	0f 90       	pop	r0
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	0f 90       	pop	r0
    4162:	1f 90       	pop	r1
    4164:	18 95       	reti

00004166 <__vector_3>:
ISR(INT2_vect)
{
    4166:	1f 92       	push	r1
    4168:	0f 92       	push	r0
    416a:	0f b6       	in	r0, 0x3f	; 63
    416c:	0f 92       	push	r0
    416e:	11 24       	eor	r1, r1
    4170:	2f 93       	push	r18
    4172:	3f 93       	push	r19
    4174:	4f 93       	push	r20
    4176:	5f 93       	push	r21
    4178:	6f 93       	push	r22
    417a:	7f 93       	push	r23
    417c:	8f 93       	push	r24
    417e:	9f 93       	push	r25
    4180:	af 93       	push	r26
    4182:	bf 93       	push	r27
    4184:	ef 93       	push	r30
    4186:	ff 93       	push	r31
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
	ExtInt2_CallBack();
    4190:	e0 91 64 01 	lds	r30, 0x0164
    4194:	f0 91 65 01 	lds	r31, 0x0165
    4198:	09 95       	icall
}
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	ff 91       	pop	r31
    41a0:	ef 91       	pop	r30
    41a2:	bf 91       	pop	r27
    41a4:	af 91       	pop	r26
    41a6:	9f 91       	pop	r25
    41a8:	8f 91       	pop	r24
    41aa:	7f 91       	pop	r23
    41ac:	6f 91       	pop	r22
    41ae:	5f 91       	pop	r21
    41b0:	4f 91       	pop	r20
    41b2:	3f 91       	pop	r19
    41b4:	2f 91       	pop	r18
    41b6:	0f 90       	pop	r0
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	0f 90       	pop	r0
    41bc:	1f 90       	pop	r1
    41be:	18 95       	reti

000041c0 <M_GIE_Void_GlobalIntEnable>:

#include "GIE_Interface.h"
#include "GIE_Private.h"

void M_GIE_Void_GlobalIntEnable(void)
{
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
    41c8:	af e5       	ldi	r26, 0x5F	; 95
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	ef e5       	ldi	r30, 0x5F	; 95
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
    41d2:	80 68       	ori	r24, 0x80	; 128
    41d4:	8c 93       	st	X, r24
}
    41d6:	cf 91       	pop	r28
    41d8:	df 91       	pop	r29
    41da:	08 95       	ret

000041dc <M_GIE_Void_GlobalIntDisable>:
void M_GIE_Void_GlobalIntDisable(void)
{
    41dc:	df 93       	push	r29
    41de:	cf 93       	push	r28
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,I_BIT);
    41e4:	af e5       	ldi	r26, 0x5F	; 95
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	ef e5       	ldi	r30, 0x5F	; 95
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	8f 77       	andi	r24, 0x7F	; 127
    41f0:	8c 93       	st	X, r24
}
    41f2:	cf 91       	pop	r28
    41f4:	df 91       	pop	r29
    41f6:	08 95       	ret

000041f8 <KPD_voidInit>:
 *  H_KPD_void_Init
 *  	-> This function shall initialize the Keypad i.e., sets all Rows as o/P
 *  	   and all Columns as Pulled-up I/P.
 */
void KPD_voidInit(void)
{
    41f8:	df 93       	push	r29
    41fa:	cf 93       	push	r28
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PORT,KEYPAD_R0_PIN,OUTPUT);
    4200:	83 e0       	ldi	r24, 0x03	; 3
    4202:	65 e0       	ldi	r22, 0x05	; 5
    4204:	41 e0       	ldi	r20, 0x01	; 1
    4206:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PORT,KEYPAD_R1_PIN,OUTPUT);
    420a:	83 e0       	ldi	r24, 0x03	; 3
    420c:	64 e0       	ldi	r22, 0x04	; 4
    420e:	41 e0       	ldi	r20, 0x01	; 1
    4210:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PORT,KEYPAD_R2_PIN,OUTPUT);
    4214:	83 e0       	ldi	r24, 0x03	; 3
    4216:	63 e0       	ldi	r22, 0x03	; 3
    4218:	41 e0       	ldi	r20, 0x01	; 1
    421a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PORT,KEYPAD_R3_PIN,OUTPUT);
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	62 e0       	ldi	r22, 0x02	; 2
    4222:	41 e0       	ldi	r20, 0x01	; 1
    4224:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PORT,KEYPAD_C0_PIN,INPUT);
    4228:	84 e0       	ldi	r24, 0x04	; 4
    422a:	67 e0       	ldi	r22, 0x07	; 7
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PORT,KEYPAD_C1_PIN,INPUT);
    4232:	84 e0       	ldi	r24, 0x04	; 4
    4234:	66 e0       	ldi	r22, 0x06	; 6
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PORT,KEYPAD_C2_PIN,INPUT);
    423c:	84 e0       	ldi	r24, 0x04	; 4
    423e:	65 e0       	ldi	r22, 0x05	; 5
    4240:	40 e0       	ldi	r20, 0x00	; 0
    4242:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PORT,KEYPAD_C3_PIN,INPUT);
    4246:	84 e0       	ldi	r24, 0x04	; 4
    4248:	63 e0       	ldi	r22, 0x03	; 3
    424a:	40 e0       	ldi	r20, 0x00	; 0
    424c:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    4250:	83 e0       	ldi	r24, 0x03	; 3
    4252:	65 e0       	ldi	r22, 0x05	; 5
    4254:	41 e0       	ldi	r20, 0x01	; 1
    4256:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    425a:	83 e0       	ldi	r24, 0x03	; 3
    425c:	64 e0       	ldi	r22, 0x04	; 4
    425e:	41 e0       	ldi	r20, 0x01	; 1
    4260:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    4264:	83 e0       	ldi	r24, 0x03	; 3
    4266:	63 e0       	ldi	r22, 0x03	; 3
    4268:	41 e0       	ldi	r20, 0x01	; 1
    426a:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    426e:	83 e0       	ldi	r24, 0x03	; 3
    4270:	62 e0       	ldi	r22, 0x02	; 2
    4272:	41 e0       	ldi	r20, 0x01	; 1
    4274:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
}
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	08 95       	ret

0000427e <KPD_voidGetPressedKey>:
 *  H_KPD_void_GetPressedKey
 *  	-> This function shall return the value of the pressed key
 *  	   or KPD_NOT_PRESSED otherwise.
 */
u8 KPD_voidGetPressedKey(void)
{
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	aa 97       	sbiw	r28, 0x2a	; 42
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_Arr[4][4] = {{ '1' , '2' , '3' , 'A' },
			                 { '4' , '5' , '6' , 'B' },
							 { '7' , '8' , '9' , 'C' },
							 { '*' , '0' , '#' , 'D' }};
    4292:	ae 01       	movw	r20, r28
    4294:	4e 5e       	subi	r20, 0xEE	; 238
    4296:	5f 4f       	sbci	r21, 0xFF	; 255
    4298:	5f a3       	std	Y+39, r21	; 0x27
    429a:	4e a3       	std	Y+38, r20	; 0x26
    429c:	8e e3       	ldi	r24, 0x3E	; 62
    429e:	91 e0       	ldi	r25, 0x01	; 1
    42a0:	99 a7       	std	Y+41, r25	; 0x29
    42a2:	88 a7       	std	Y+40, r24	; 0x28
    42a4:	90 e1       	ldi	r25, 0x10	; 16
    42a6:	9a a7       	std	Y+42, r25	; 0x2a
    42a8:	e8 a5       	ldd	r30, Y+40	; 0x28
    42aa:	f9 a5       	ldd	r31, Y+41	; 0x29
    42ac:	00 80       	ld	r0, Z
    42ae:	48 a5       	ldd	r20, Y+40	; 0x28
    42b0:	59 a5       	ldd	r21, Y+41	; 0x29
    42b2:	4f 5f       	subi	r20, 0xFF	; 255
    42b4:	5f 4f       	sbci	r21, 0xFF	; 255
    42b6:	59 a7       	std	Y+41, r21	; 0x29
    42b8:	48 a7       	std	Y+40, r20	; 0x28
    42ba:	ee a1       	ldd	r30, Y+38	; 0x26
    42bc:	ff a1       	ldd	r31, Y+39	; 0x27
    42be:	00 82       	st	Z, r0
    42c0:	4e a1       	ldd	r20, Y+38	; 0x26
    42c2:	5f a1       	ldd	r21, Y+39	; 0x27
    42c4:	4f 5f       	subi	r20, 0xFF	; 255
    42c6:	5f 4f       	sbci	r21, 0xFF	; 255
    42c8:	5f a3       	std	Y+39, r21	; 0x27
    42ca:	4e a3       	std	Y+38, r20	; 0x26
    42cc:	5a a5       	ldd	r21, Y+42	; 0x2a
    42ce:	51 50       	subi	r21, 0x01	; 1
    42d0:	5a a7       	std	Y+42, r21	; 0x2a
    42d2:	8a a5       	ldd	r24, Y+42	; 0x2a
    42d4:	88 23       	and	r24, r24
    42d6:	41 f7       	brne	.-48     	; 0x42a8 <KPD_voidGetPressedKey+0x2a>
	u8 Local_U8_Reading = KPD_NOT_PRESSED;
    42d8:	8f ef       	ldi	r24, 0xFF	; 255
    42da:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_U8_Col     = 0;
    42dc:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8_Row     = 0;
    42de:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Local_u8_colPin[4]={KEYPAD_C0_PIN ,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN };
    42e0:	87 e0       	ldi	r24, 0x07	; 7
    42e2:	8a a3       	std	Y+34, r24	; 0x22
    42e4:	86 e0       	ldi	r24, 0x06	; 6
    42e6:	8b a3       	std	Y+35, r24	; 0x23
    42e8:	85 e0       	ldi	r24, 0x05	; 5
    42ea:	8c a3       	std	Y+36, r24	; 0x24
    42ec:	83 e0       	ldi	r24, 0x03	; 3
    42ee:	8d a3       	std	Y+37, r24	; 0x25

	for(Local_U8_Row = KEYPAD_R0_PIN ; Local_U8_Row >= KEYPAD_R3_PIN ; Local_U8_Row--)
    42f0:	85 e0       	ldi	r24, 0x05	; 5
    42f2:	8f 87       	std	Y+15, r24	; 0x0f
    42f4:	1f c1       	rjmp	.+574    	; 0x4534 <KPD_voidGetPressedKey+0x2b6>
	{
		M_DIO_Void_SetPinValue(KEYPAD_R0_PORT,Local_U8_Row,LOW);
    42f6:	83 e0       	ldi	r24, 0x03	; 3
    42f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    42fa:	40 e0       	ldi	r20, 0x00	; 0
    42fc:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
		for(Local_U8_Col = 0 ; Local_U8_Col <= 3 ; Local_U8_Col++)
    4300:	18 8a       	std	Y+16, r1	; 0x10
    4302:	09 c1       	rjmp	.+530    	; 0x4516 <KPD_voidGetPressedKey+0x298>
		{
			if(M_DIO_U8_GetPinValue(KEYPAD_C0_PORT,Local_u8_colPin[Local_U8_Col]) == KPD_PRESSED)
    4304:	88 89       	ldd	r24, Y+16	; 0x10
    4306:	28 2f       	mov	r18, r24
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	ce 01       	movw	r24, r28
    430c:	82 96       	adiw	r24, 0x22	; 34
    430e:	fc 01       	movw	r30, r24
    4310:	e2 0f       	add	r30, r18
    4312:	f3 1f       	adc	r31, r19
    4314:	90 81       	ld	r25, Z
    4316:	84 e0       	ldi	r24, 0x04	; 4
    4318:	69 2f       	mov	r22, r25
    431a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <M_DIO_U8_GetPinValue>
    431e:	88 23       	and	r24, r24
    4320:	09 f0       	breq	.+2      	; 0x4324 <KPD_voidGetPressedKey+0xa6>
    4322:	f6 c0       	rjmp	.+492    	; 0x4510 <KPD_voidGetPressedKey+0x292>
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	a0 ef       	ldi	r26, 0xF0	; 240
    432a:	b2 e4       	ldi	r27, 0x42	; 66
    432c:	8b 87       	std	Y+11, r24	; 0x0b
    432e:	9c 87       	std	Y+12, r25	; 0x0c
    4330:	ad 87       	std	Y+13, r26	; 0x0d
    4332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4334:	6b 85       	ldd	r22, Y+11	; 0x0b
    4336:	7c 85       	ldd	r23, Y+12	; 0x0c
    4338:	8d 85       	ldd	r24, Y+13	; 0x0d
    433a:	9e 85       	ldd	r25, Y+14	; 0x0e
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	4a e7       	ldi	r20, 0x7A	; 122
    4342:	55 e4       	ldi	r21, 0x45	; 69
    4344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	8f 83       	std	Y+7, r24	; 0x07
    434e:	98 87       	std	Y+8, r25	; 0x08
    4350:	a9 87       	std	Y+9, r26	; 0x09
    4352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4354:	6f 81       	ldd	r22, Y+7	; 0x07
    4356:	78 85       	ldd	r23, Y+8	; 0x08
    4358:	89 85       	ldd	r24, Y+9	; 0x09
    435a:	9a 85       	ldd	r25, Y+10	; 0x0a
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e8       	ldi	r20, 0x80	; 128
    4362:	5f e3       	ldi	r21, 0x3F	; 63
    4364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4368:	88 23       	and	r24, r24
    436a:	2c f4       	brge	.+10     	; 0x4376 <KPD_voidGetPressedKey+0xf8>
		__ticks = 1;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	9e 83       	std	Y+6, r25	; 0x06
    4372:	8d 83       	std	Y+5, r24	; 0x05
    4374:	3f c0       	rjmp	.+126    	; 0x43f4 <KPD_voidGetPressedKey+0x176>
	else if (__tmp > 65535)
    4376:	6f 81       	ldd	r22, Y+7	; 0x07
    4378:	78 85       	ldd	r23, Y+8	; 0x08
    437a:	89 85       	ldd	r24, Y+9	; 0x09
    437c:	9a 85       	ldd	r25, Y+10	; 0x0a
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	3f ef       	ldi	r19, 0xFF	; 255
    4382:	4f e7       	ldi	r20, 0x7F	; 127
    4384:	57 e4       	ldi	r21, 0x47	; 71
    4386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    438a:	18 16       	cp	r1, r24
    438c:	4c f5       	brge	.+82     	; 0x43e0 <KPD_voidGetPressedKey+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4390:	7c 85       	ldd	r23, Y+12	; 0x0c
    4392:	8d 85       	ldd	r24, Y+13	; 0x0d
    4394:	9e 85       	ldd	r25, Y+14	; 0x0e
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e2       	ldi	r20, 0x20	; 32
    439c:	51 e4       	ldi	r21, 0x41	; 65
    439e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	9e 83       	std	Y+6, r25	; 0x06
    43b4:	8d 83       	std	Y+5, r24	; 0x05
    43b6:	0f c0       	rjmp	.+30     	; 0x43d6 <KPD_voidGetPressedKey+0x158>
    43b8:	80 e9       	ldi	r24, 0x90	; 144
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	9c 83       	std	Y+4, r25	; 0x04
    43be:	8b 83       	std	Y+3, r24	; 0x03
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	9c 81       	ldd	r25, Y+4	; 0x04
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	f1 f7       	brne	.-4      	; 0x43c4 <KPD_voidGetPressedKey+0x146>
    43c8:	9c 83       	std	Y+4, r25	; 0x04
    43ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43cc:	8d 81       	ldd	r24, Y+5	; 0x05
    43ce:	9e 81       	ldd	r25, Y+6	; 0x06
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	9e 83       	std	Y+6, r25	; 0x06
    43d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d6:	8d 81       	ldd	r24, Y+5	; 0x05
    43d8:	9e 81       	ldd	r25, Y+6	; 0x06
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	69 f7       	brne	.-38     	; 0x43b8 <KPD_voidGetPressedKey+0x13a>
    43de:	14 c0       	rjmp	.+40     	; 0x4408 <KPD_voidGetPressedKey+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e0:	6f 81       	ldd	r22, Y+7	; 0x07
    43e2:	78 85       	ldd	r23, Y+8	; 0x08
    43e4:	89 85       	ldd	r24, Y+9	; 0x09
    43e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	9e 83       	std	Y+6, r25	; 0x06
    43f2:	8d 83       	std	Y+5, r24	; 0x05
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	9e 81       	ldd	r25, Y+6	; 0x06
    43f8:	9a 83       	std	Y+2, r25	; 0x02
    43fa:	89 83       	std	Y+1, r24	; 0x01
    43fc:	89 81       	ldd	r24, Y+1	; 0x01
    43fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <KPD_voidGetPressedKey+0x182>
    4404:	9a 83       	std	Y+2, r25	; 0x02
    4406:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(KEYPAD_C0_PORT,Local_u8_colPin[Local_U8_Col]) == KPD_PRESSED)
    4408:	88 89       	ldd	r24, Y+16	; 0x10
    440a:	28 2f       	mov	r18, r24
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	ce 01       	movw	r24, r28
    4410:	82 96       	adiw	r24, 0x22	; 34
    4412:	fc 01       	movw	r30, r24
    4414:	e2 0f       	add	r30, r18
    4416:	f3 1f       	adc	r31, r19
    4418:	90 81       	ld	r25, Z
    441a:	84 e0       	ldi	r24, 0x04	; 4
    441c:	69 2f       	mov	r22, r25
    441e:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <M_DIO_U8_GetPinValue>
    4422:	88 23       	and	r24, r24
    4424:	09 f0       	breq	.+2      	; 0x4428 <KPD_voidGetPressedKey+0x1aa>
    4426:	74 c0       	rjmp	.+232    	; 0x4510 <KPD_voidGetPressedKey+0x292>
				{
					Local_U8_Reading = Local_U8_Arr[KEYPAD_R0_PIN - Local_U8_Row][Local_U8_Col];
    4428:	8f 85       	ldd	r24, Y+15	; 0x0f
    442a:	28 2f       	mov	r18, r24
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	85 e0       	ldi	r24, 0x05	; 5
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	fc 01       	movw	r30, r24
    4434:	e2 1b       	sub	r30, r18
    4436:	f3 0b       	sbc	r31, r19
    4438:	9f 01       	movw	r18, r30
    443a:	88 89       	ldd	r24, Y+16	; 0x10
    443c:	48 2f       	mov	r20, r24
    443e:	50 e0       	ldi	r21, 0x00	; 0
    4440:	22 0f       	add	r18, r18
    4442:	33 1f       	adc	r19, r19
    4444:	22 0f       	add	r18, r18
    4446:	33 1f       	adc	r19, r19
    4448:	ce 01       	movw	r24, r28
    444a:	01 96       	adiw	r24, 0x01	; 1
    444c:	82 0f       	add	r24, r18
    444e:	93 1f       	adc	r25, r19
    4450:	84 0f       	add	r24, r20
    4452:	95 1f       	adc	r25, r21
    4454:	fc 01       	movw	r30, r24
    4456:	71 96       	adiw	r30, 0x11	; 17
    4458:	80 81       	ld	r24, Z
    445a:	89 8b       	std	Y+17, r24	; 0x11
					if(Local_U8_Reading=='4'||Local_U8_Reading=='5'||Local_U8_Reading=='6'||Local_U8_Reading=='7'||Local_U8_Reading=='8'||Local_U8_Reading=='9')
    445c:	89 89       	ldd	r24, Y+17	; 0x11
    445e:	84 33       	cpi	r24, 0x34	; 52
    4460:	79 f0       	breq	.+30     	; 0x4480 <KPD_voidGetPressedKey+0x202>
    4462:	89 89       	ldd	r24, Y+17	; 0x11
    4464:	85 33       	cpi	r24, 0x35	; 53
    4466:	61 f0       	breq	.+24     	; 0x4480 <KPD_voidGetPressedKey+0x202>
    4468:	89 89       	ldd	r24, Y+17	; 0x11
    446a:	86 33       	cpi	r24, 0x36	; 54
    446c:	49 f0       	breq	.+18     	; 0x4480 <KPD_voidGetPressedKey+0x202>
    446e:	89 89       	ldd	r24, Y+17	; 0x11
    4470:	87 33       	cpi	r24, 0x37	; 55
    4472:	31 f0       	breq	.+12     	; 0x4480 <KPD_voidGetPressedKey+0x202>
    4474:	89 89       	ldd	r24, Y+17	; 0x11
    4476:	88 33       	cpi	r24, 0x38	; 56
    4478:	19 f0       	breq	.+6      	; 0x4480 <KPD_voidGetPressedKey+0x202>
    447a:	89 89       	ldd	r24, Y+17	; 0x11
    447c:	89 33       	cpi	r24, 0x39	; 57
    447e:	51 f5       	brne	.+84     	; 0x44d4 <KPD_voidGetPressedKey+0x256>
					{
						while(M_DIO_U8_GetPinValue(KEYPAD_C0_PORT,Local_u8_colPin[Local_U8_Col]) == KPD_PRESSED);
    4480:	88 89       	ldd	r24, Y+16	; 0x10
    4482:	28 2f       	mov	r18, r24
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	ce 01       	movw	r24, r28
    4488:	82 96       	adiw	r24, 0x22	; 34
    448a:	fc 01       	movw	r30, r24
    448c:	e2 0f       	add	r30, r18
    448e:	f3 1f       	adc	r31, r19
    4490:	90 81       	ld	r25, Z
    4492:	84 e0       	ldi	r24, 0x04	; 4
    4494:	69 2f       	mov	r22, r25
    4496:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <M_DIO_U8_GetPinValue>
    449a:	88 23       	and	r24, r24
    449c:	89 f3       	breq	.-30     	; 0x4480 <KPD_voidGetPressedKey+0x202>
						Local_U8_Reading = Local_U8_Arr[KEYPAD_R0_PIN - Local_U8_Row][Local_U8_Col];
    449e:	8f 85       	ldd	r24, Y+15	; 0x0f
    44a0:	28 2f       	mov	r18, r24
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	85 e0       	ldi	r24, 0x05	; 5
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	ac 01       	movw	r20, r24
    44aa:	42 1b       	sub	r20, r18
    44ac:	53 0b       	sbc	r21, r19
    44ae:	9a 01       	movw	r18, r20
    44b0:	88 89       	ldd	r24, Y+16	; 0x10
    44b2:	48 2f       	mov	r20, r24
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	22 0f       	add	r18, r18
    44b8:	33 1f       	adc	r19, r19
    44ba:	22 0f       	add	r18, r18
    44bc:	33 1f       	adc	r19, r19
    44be:	ce 01       	movw	r24, r28
    44c0:	01 96       	adiw	r24, 0x01	; 1
    44c2:	82 0f       	add	r24, r18
    44c4:	93 1f       	adc	r25, r19
    44c6:	84 0f       	add	r24, r20
    44c8:	95 1f       	adc	r25, r21
    44ca:	fc 01       	movw	r30, r24
    44cc:	71 96       	adiw	r30, 0x11	; 17
    44ce:	80 81       	ld	r24, Z
    44d0:	89 8b       	std	Y+17, r24	; 0x11
    44d2:	25 c0       	rjmp	.+74     	; 0x451e <KPD_voidGetPressedKey+0x2a0>
					}
					else if(Local_U8_Reading=='2'/*||Local_U8_Reading!='1'*/)
    44d4:	89 89       	ldd	r24, Y+17	; 0x11
    44d6:	82 33       	cpi	r24, 0x32	; 50
    44d8:	11 f5       	brne	.+68     	; 0x451e <KPD_voidGetPressedKey+0x2a0>
					{
						/*1 represent brake 2 represente LCD display menus*/
					   Local_U8_Reading = Local_U8_Arr[KEYPAD_R0_PIN - Local_U8_Row][Local_U8_Col];
    44da:	8f 85       	ldd	r24, Y+15	; 0x0f
    44dc:	28 2f       	mov	r18, r24
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	85 e0       	ldi	r24, 0x05	; 5
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	fc 01       	movw	r30, r24
    44e6:	e2 1b       	sub	r30, r18
    44e8:	f3 0b       	sbc	r31, r19
    44ea:	9f 01       	movw	r18, r30
    44ec:	88 89       	ldd	r24, Y+16	; 0x10
    44ee:	48 2f       	mov	r20, r24
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	22 0f       	add	r18, r18
    44f4:	33 1f       	adc	r19, r19
    44f6:	22 0f       	add	r18, r18
    44f8:	33 1f       	adc	r19, r19
    44fa:	ce 01       	movw	r24, r28
    44fc:	01 96       	adiw	r24, 0x01	; 1
    44fe:	82 0f       	add	r24, r18
    4500:	93 1f       	adc	r25, r19
    4502:	84 0f       	add	r24, r20
    4504:	95 1f       	adc	r25, r21
    4506:	fc 01       	movw	r30, r24
    4508:	71 96       	adiw	r30, 0x11	; 17
    450a:	80 81       	ld	r24, Z
    450c:	89 8b       	std	Y+17, r24	; 0x11
    450e:	07 c0       	rjmp	.+14     	; 0x451e <KPD_voidGetPressedKey+0x2a0>
	u8 Local_u8_colPin[4]={KEYPAD_C0_PIN ,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN };

	for(Local_U8_Row = KEYPAD_R0_PIN ; Local_U8_Row >= KEYPAD_R3_PIN ; Local_U8_Row--)
	{
		M_DIO_Void_SetPinValue(KEYPAD_R0_PORT,Local_U8_Row,LOW);
		for(Local_U8_Col = 0 ; Local_U8_Col <= 3 ; Local_U8_Col++)
    4510:	88 89       	ldd	r24, Y+16	; 0x10
    4512:	8f 5f       	subi	r24, 0xFF	; 255
    4514:	88 8b       	std	Y+16, r24	; 0x10
    4516:	88 89       	ldd	r24, Y+16	; 0x10
    4518:	84 30       	cpi	r24, 0x04	; 4
    451a:	08 f4       	brcc	.+2      	; 0x451e <KPD_voidGetPressedKey+0x2a0>
    451c:	f3 ce       	rjmp	.-538    	; 0x4304 <KPD_voidGetPressedKey+0x86>
					}
					break;
				}
			}
		}
		M_DIO_Void_SetPinValue(KEYPAD_R0_PORT,Local_U8_Row,HIGH);
    451e:	83 e0       	ldi	r24, 0x03	; 3
    4520:	6f 85       	ldd	r22, Y+15	; 0x0f
    4522:	41 e0       	ldi	r20, 0x01	; 1
    4524:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
		if(Local_U8_Reading != KPD_NOT_PRESSED)
    4528:	89 89       	ldd	r24, Y+17	; 0x11
    452a:	8f 3f       	cpi	r24, 0xFF	; 255
    452c:	39 f4       	brne	.+14     	; 0x453c <KPD_voidGetPressedKey+0x2be>
	u8 Local_U8_Reading = KPD_NOT_PRESSED;
	u8 Local_U8_Col     = 0;
	u8 Local_U8_Row     = 0;
	u8 Local_u8_colPin[4]={KEYPAD_C0_PIN ,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN };

	for(Local_U8_Row = KEYPAD_R0_PIN ; Local_U8_Row >= KEYPAD_R3_PIN ; Local_U8_Row--)
    452e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4530:	81 50       	subi	r24, 0x01	; 1
    4532:	8f 87       	std	Y+15, r24	; 0x0f
    4534:	8f 85       	ldd	r24, Y+15	; 0x0f
    4536:	82 30       	cpi	r24, 0x02	; 2
    4538:	08 f0       	brcs	.+2      	; 0x453c <KPD_voidGetPressedKey+0x2be>
    453a:	dd ce       	rjmp	.-582    	; 0x42f6 <KPD_voidGetPressedKey+0x78>
		if(Local_U8_Reading != KPD_NOT_PRESSED)
		{
			break;
		}
	}
	return Local_U8_Reading;
    453c:	89 89       	ldd	r24, Y+17	; 0x11
}
    453e:	aa 96       	adiw	r28, 0x2a	; 42
    4540:	0f b6       	in	r0, 0x3f	; 63
    4542:	f8 94       	cli
    4544:	de bf       	out	0x3e, r29	; 62
    4546:	0f be       	out	0x3f, r0	; 63
    4548:	cd bf       	out	0x3d, r28	; 61
    454a:	cf 91       	pop	r28
    454c:	df 91       	pop	r29
    454e:	08 95       	ret

00004550 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"
#include "DIO_Interface.h"
#include <util/delay.h>
void LCD_voidInit(void)
{
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	cd b7       	in	r28, 0x3d	; 61
    4556:	de b7       	in	r29, 0x3e	; 62
    4558:	e8 97       	sbiw	r28, 0x38	; 56
    455a:	0f b6       	in	r0, 0x3f	; 63
    455c:	f8 94       	cli
    455e:	de bf       	out	0x3e, r29	; 62
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,OUTPUT);
    4564:	82 e0       	ldi	r24, 0x02	; 2
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	41 e0       	ldi	r20, 0x01	; 1
    456a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,OUTPUT);
    456e:	82 e0       	ldi	r24, 0x02	; 2
    4570:	61 e0       	ldi	r22, 0x01	; 1
    4572:	41 e0       	ldi	r20, 0x01	; 1
    4574:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,OUTPUT);
    4578:	82 e0       	ldi	r24, 0x02	; 2
    457a:	62 e0       	ldi	r22, 0x02	; 2
    457c:	41 e0       	ldi	r20, 0x01	; 1
    457e:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,OUTPUT);
    4582:	82 e0       	ldi	r24, 0x02	; 2
    4584:	64 e0       	ldi	r22, 0x04	; 4
    4586:	41 e0       	ldi	r20, 0x01	; 1
    4588:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	63 e0       	ldi	r22, 0x03	; 3
    4590:	41 e0       	ldi	r20, 0x01	; 1
    4592:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	62 e0       	ldi	r22, 0x02	; 2
    459a:	41 e0       	ldi	r20, 0x01	; 1
    459c:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	a0 ef       	ldi	r26, 0xF0	; 240
    45a6:	b1 e4       	ldi	r27, 0x41	; 65
    45a8:	8d ab       	std	Y+53, r24	; 0x35
    45aa:	9e ab       	std	Y+54, r25	; 0x36
    45ac:	af ab       	std	Y+55, r26	; 0x37
    45ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45b0:	6d a9       	ldd	r22, Y+53	; 0x35
    45b2:	7e a9       	ldd	r23, Y+54	; 0x36
    45b4:	8f a9       	ldd	r24, Y+55	; 0x37
    45b6:	98 ad       	ldd	r25, Y+56	; 0x38
    45b8:	20 e0       	ldi	r18, 0x00	; 0
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	4a e7       	ldi	r20, 0x7A	; 122
    45be:	55 e4       	ldi	r21, 0x45	; 69
    45c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	89 ab       	std	Y+49, r24	; 0x31
    45ca:	9a ab       	std	Y+50, r25	; 0x32
    45cc:	ab ab       	std	Y+51, r26	; 0x33
    45ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    45d0:	69 a9       	ldd	r22, Y+49	; 0x31
    45d2:	7a a9       	ldd	r23, Y+50	; 0x32
    45d4:	8b a9       	ldd	r24, Y+51	; 0x33
    45d6:	9c a9       	ldd	r25, Y+52	; 0x34
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e8       	ldi	r20, 0x80	; 128
    45de:	5f e3       	ldi	r21, 0x3F	; 63
    45e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45e4:	88 23       	and	r24, r24
    45e6:	2c f4       	brge	.+10     	; 0x45f2 <LCD_voidInit+0xa2>
		__ticks = 1;
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	98 ab       	std	Y+48, r25	; 0x30
    45ee:	8f a7       	std	Y+47, r24	; 0x2f
    45f0:	3f c0       	rjmp	.+126    	; 0x4670 <LCD_voidInit+0x120>
	else if (__tmp > 65535)
    45f2:	69 a9       	ldd	r22, Y+49	; 0x31
    45f4:	7a a9       	ldd	r23, Y+50	; 0x32
    45f6:	8b a9       	ldd	r24, Y+51	; 0x33
    45f8:	9c a9       	ldd	r25, Y+52	; 0x34
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	3f ef       	ldi	r19, 0xFF	; 255
    45fe:	4f e7       	ldi	r20, 0x7F	; 127
    4600:	57 e4       	ldi	r21, 0x47	; 71
    4602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4606:	18 16       	cp	r1, r24
    4608:	4c f5       	brge	.+82     	; 0x465c <LCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    460a:	6d a9       	ldd	r22, Y+53	; 0x35
    460c:	7e a9       	ldd	r23, Y+54	; 0x36
    460e:	8f a9       	ldd	r24, Y+55	; 0x37
    4610:	98 ad       	ldd	r25, Y+56	; 0x38
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	40 e2       	ldi	r20, 0x20	; 32
    4618:	51 e4       	ldi	r21, 0x41	; 65
    461a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	bc 01       	movw	r22, r24
    4624:	cd 01       	movw	r24, r26
    4626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	98 ab       	std	Y+48, r25	; 0x30
    4630:	8f a7       	std	Y+47, r24	; 0x2f
    4632:	0f c0       	rjmp	.+30     	; 0x4652 <LCD_voidInit+0x102>
    4634:	80 e9       	ldi	r24, 0x90	; 144
    4636:	91 e0       	ldi	r25, 0x01	; 1
    4638:	9e a7       	std	Y+46, r25	; 0x2e
    463a:	8d a7       	std	Y+45, r24	; 0x2d
    463c:	8d a5       	ldd	r24, Y+45	; 0x2d
    463e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4640:	01 97       	sbiw	r24, 0x01	; 1
    4642:	f1 f7       	brne	.-4      	; 0x4640 <LCD_voidInit+0xf0>
    4644:	9e a7       	std	Y+46, r25	; 0x2e
    4646:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4648:	8f a5       	ldd	r24, Y+47	; 0x2f
    464a:	98 a9       	ldd	r25, Y+48	; 0x30
    464c:	01 97       	sbiw	r24, 0x01	; 1
    464e:	98 ab       	std	Y+48, r25	; 0x30
    4650:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4652:	8f a5       	ldd	r24, Y+47	; 0x2f
    4654:	98 a9       	ldd	r25, Y+48	; 0x30
    4656:	00 97       	sbiw	r24, 0x00	; 0
    4658:	69 f7       	brne	.-38     	; 0x4634 <LCD_voidInit+0xe4>
    465a:	14 c0       	rjmp	.+40     	; 0x4684 <LCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465c:	69 a9       	ldd	r22, Y+49	; 0x31
    465e:	7a a9       	ldd	r23, Y+50	; 0x32
    4660:	8b a9       	ldd	r24, Y+51	; 0x33
    4662:	9c a9       	ldd	r25, Y+52	; 0x34
    4664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	98 ab       	std	Y+48, r25	; 0x30
    466e:	8f a7       	std	Y+47, r24	; 0x2f
    4670:	8f a5       	ldd	r24, Y+47	; 0x2f
    4672:	98 a9       	ldd	r25, Y+48	; 0x30
    4674:	9c a7       	std	Y+44, r25	; 0x2c
    4676:	8b a7       	std	Y+43, r24	; 0x2b
    4678:	8b a5       	ldd	r24, Y+43	; 0x2b
    467a:	9c a5       	ldd	r25, Y+44	; 0x2c
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	f1 f7       	brne	.-4      	; 0x467c <LCD_voidInit+0x12c>
    4680:	9c a7       	std	Y+44, r25	; 0x2c
    4682:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    4684:	88 e2       	ldi	r24, 0x28	; 40
    4686:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	a0 e0       	ldi	r26, 0x00	; 0
    4690:	b0 e4       	ldi	r27, 0x40	; 64
    4692:	8f a3       	std	Y+39, r24	; 0x27
    4694:	98 a7       	std	Y+40, r25	; 0x28
    4696:	a9 a7       	std	Y+41, r26	; 0x29
    4698:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    469a:	6f a1       	ldd	r22, Y+39	; 0x27
    469c:	78 a5       	ldd	r23, Y+40	; 0x28
    469e:	89 a5       	ldd	r24, Y+41	; 0x29
    46a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	4a e7       	ldi	r20, 0x7A	; 122
    46a8:	55 e4       	ldi	r21, 0x45	; 69
    46aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	8b a3       	std	Y+35, r24	; 0x23
    46b4:	9c a3       	std	Y+36, r25	; 0x24
    46b6:	ad a3       	std	Y+37, r26	; 0x25
    46b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46ba:	6b a1       	ldd	r22, Y+35	; 0x23
    46bc:	7c a1       	ldd	r23, Y+36	; 0x24
    46be:	8d a1       	ldd	r24, Y+37	; 0x25
    46c0:	9e a1       	ldd	r25, Y+38	; 0x26
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	40 e8       	ldi	r20, 0x80	; 128
    46c8:	5f e3       	ldi	r21, 0x3F	; 63
    46ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46ce:	88 23       	and	r24, r24
    46d0:	2c f4       	brge	.+10     	; 0x46dc <LCD_voidInit+0x18c>
		__ticks = 1;
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	9a a3       	std	Y+34, r25	; 0x22
    46d8:	89 a3       	std	Y+33, r24	; 0x21
    46da:	3f c0       	rjmp	.+126    	; 0x475a <LCD_voidInit+0x20a>
	else if (__tmp > 65535)
    46dc:	6b a1       	ldd	r22, Y+35	; 0x23
    46de:	7c a1       	ldd	r23, Y+36	; 0x24
    46e0:	8d a1       	ldd	r24, Y+37	; 0x25
    46e2:	9e a1       	ldd	r25, Y+38	; 0x26
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	3f ef       	ldi	r19, 0xFF	; 255
    46e8:	4f e7       	ldi	r20, 0x7F	; 127
    46ea:	57 e4       	ldi	r21, 0x47	; 71
    46ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46f0:	18 16       	cp	r1, r24
    46f2:	4c f5       	brge	.+82     	; 0x4746 <LCD_voidInit+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f4:	6f a1       	ldd	r22, Y+39	; 0x27
    46f6:	78 a5       	ldd	r23, Y+40	; 0x28
    46f8:	89 a5       	ldd	r24, Y+41	; 0x29
    46fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	40 e2       	ldi	r20, 0x20	; 32
    4702:	51 e4       	ldi	r21, 0x41	; 65
    4704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	bc 01       	movw	r22, r24
    470e:	cd 01       	movw	r24, r26
    4710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	9a a3       	std	Y+34, r25	; 0x22
    471a:	89 a3       	std	Y+33, r24	; 0x21
    471c:	0f c0       	rjmp	.+30     	; 0x473c <LCD_voidInit+0x1ec>
    471e:	80 e9       	ldi	r24, 0x90	; 144
    4720:	91 e0       	ldi	r25, 0x01	; 1
    4722:	98 a3       	std	Y+32, r25	; 0x20
    4724:	8f 8f       	std	Y+31, r24	; 0x1f
    4726:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4728:	98 a1       	ldd	r25, Y+32	; 0x20
    472a:	01 97       	sbiw	r24, 0x01	; 1
    472c:	f1 f7       	brne	.-4      	; 0x472a <LCD_voidInit+0x1da>
    472e:	98 a3       	std	Y+32, r25	; 0x20
    4730:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4732:	89 a1       	ldd	r24, Y+33	; 0x21
    4734:	9a a1       	ldd	r25, Y+34	; 0x22
    4736:	01 97       	sbiw	r24, 0x01	; 1
    4738:	9a a3       	std	Y+34, r25	; 0x22
    473a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473c:	89 a1       	ldd	r24, Y+33	; 0x21
    473e:	9a a1       	ldd	r25, Y+34	; 0x22
    4740:	00 97       	sbiw	r24, 0x00	; 0
    4742:	69 f7       	brne	.-38     	; 0x471e <LCD_voidInit+0x1ce>
    4744:	14 c0       	rjmp	.+40     	; 0x476e <LCD_voidInit+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4746:	6b a1       	ldd	r22, Y+35	; 0x23
    4748:	7c a1       	ldd	r23, Y+36	; 0x24
    474a:	8d a1       	ldd	r24, Y+37	; 0x25
    474c:	9e a1       	ldd	r25, Y+38	; 0x26
    474e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4752:	dc 01       	movw	r26, r24
    4754:	cb 01       	movw	r24, r22
    4756:	9a a3       	std	Y+34, r25	; 0x22
    4758:	89 a3       	std	Y+33, r24	; 0x21
    475a:	89 a1       	ldd	r24, Y+33	; 0x21
    475c:	9a a1       	ldd	r25, Y+34	; 0x22
    475e:	9e 8f       	std	Y+30, r25	; 0x1e
    4760:	8d 8f       	std	Y+29, r24	; 0x1d
    4762:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4764:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4766:	01 97       	sbiw	r24, 0x01	; 1
    4768:	f1 f7       	brne	.-4      	; 0x4766 <LCD_voidInit+0x216>
    476a:	9e 8f       	std	Y+30, r25	; 0x1e
    476c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    476e:	8c e0       	ldi	r24, 0x0C	; 12
    4770:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	a0 e0       	ldi	r26, 0x00	; 0
    477a:	b0 e4       	ldi	r27, 0x40	; 64
    477c:	89 8f       	std	Y+25, r24	; 0x19
    477e:	9a 8f       	std	Y+26, r25	; 0x1a
    4780:	ab 8f       	std	Y+27, r26	; 0x1b
    4782:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4784:	69 8d       	ldd	r22, Y+25	; 0x19
    4786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    478a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	4a e7       	ldi	r20, 0x7A	; 122
    4792:	55 e4       	ldi	r21, 0x45	; 69
    4794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	8d 8b       	std	Y+21, r24	; 0x15
    479e:	9e 8b       	std	Y+22, r25	; 0x16
    47a0:	af 8b       	std	Y+23, r26	; 0x17
    47a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47a4:	6d 89       	ldd	r22, Y+21	; 0x15
    47a6:	7e 89       	ldd	r23, Y+22	; 0x16
    47a8:	8f 89       	ldd	r24, Y+23	; 0x17
    47aa:	98 8d       	ldd	r25, Y+24	; 0x18
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	40 e8       	ldi	r20, 0x80	; 128
    47b2:	5f e3       	ldi	r21, 0x3F	; 63
    47b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47b8:	88 23       	and	r24, r24
    47ba:	2c f4       	brge	.+10     	; 0x47c6 <LCD_voidInit+0x276>
		__ticks = 1;
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	9c 8b       	std	Y+20, r25	; 0x14
    47c2:	8b 8b       	std	Y+19, r24	; 0x13
    47c4:	3f c0       	rjmp	.+126    	; 0x4844 <LCD_voidInit+0x2f4>
	else if (__tmp > 65535)
    47c6:	6d 89       	ldd	r22, Y+21	; 0x15
    47c8:	7e 89       	ldd	r23, Y+22	; 0x16
    47ca:	8f 89       	ldd	r24, Y+23	; 0x17
    47cc:	98 8d       	ldd	r25, Y+24	; 0x18
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	3f ef       	ldi	r19, 0xFF	; 255
    47d2:	4f e7       	ldi	r20, 0x7F	; 127
    47d4:	57 e4       	ldi	r21, 0x47	; 71
    47d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47da:	18 16       	cp	r1, r24
    47dc:	4c f5       	brge	.+82     	; 0x4830 <LCD_voidInit+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47de:	69 8d       	ldd	r22, Y+25	; 0x19
    47e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	40 e2       	ldi	r20, 0x20	; 32
    47ec:	51 e4       	ldi	r21, 0x41	; 65
    47ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	bc 01       	movw	r22, r24
    47f8:	cd 01       	movw	r24, r26
    47fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fe:	dc 01       	movw	r26, r24
    4800:	cb 01       	movw	r24, r22
    4802:	9c 8b       	std	Y+20, r25	; 0x14
    4804:	8b 8b       	std	Y+19, r24	; 0x13
    4806:	0f c0       	rjmp	.+30     	; 0x4826 <LCD_voidInit+0x2d6>
    4808:	80 e9       	ldi	r24, 0x90	; 144
    480a:	91 e0       	ldi	r25, 0x01	; 1
    480c:	9a 8b       	std	Y+18, r25	; 0x12
    480e:	89 8b       	std	Y+17, r24	; 0x11
    4810:	89 89       	ldd	r24, Y+17	; 0x11
    4812:	9a 89       	ldd	r25, Y+18	; 0x12
    4814:	01 97       	sbiw	r24, 0x01	; 1
    4816:	f1 f7       	brne	.-4      	; 0x4814 <LCD_voidInit+0x2c4>
    4818:	9a 8b       	std	Y+18, r25	; 0x12
    481a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    481c:	8b 89       	ldd	r24, Y+19	; 0x13
    481e:	9c 89       	ldd	r25, Y+20	; 0x14
    4820:	01 97       	sbiw	r24, 0x01	; 1
    4822:	9c 8b       	std	Y+20, r25	; 0x14
    4824:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4826:	8b 89       	ldd	r24, Y+19	; 0x13
    4828:	9c 89       	ldd	r25, Y+20	; 0x14
    482a:	00 97       	sbiw	r24, 0x00	; 0
    482c:	69 f7       	brne	.-38     	; 0x4808 <LCD_voidInit+0x2b8>
    482e:	14 c0       	rjmp	.+40     	; 0x4858 <LCD_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4830:	6d 89       	ldd	r22, Y+21	; 0x15
    4832:	7e 89       	ldd	r23, Y+22	; 0x16
    4834:	8f 89       	ldd	r24, Y+23	; 0x17
    4836:	98 8d       	ldd	r25, Y+24	; 0x18
    4838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483c:	dc 01       	movw	r26, r24
    483e:	cb 01       	movw	r24, r22
    4840:	9c 8b       	std	Y+20, r25	; 0x14
    4842:	8b 8b       	std	Y+19, r24	; 0x13
    4844:	8b 89       	ldd	r24, Y+19	; 0x13
    4846:	9c 89       	ldd	r25, Y+20	; 0x14
    4848:	98 8b       	std	Y+16, r25	; 0x10
    484a:	8f 87       	std	Y+15, r24	; 0x0f
    484c:	8f 85       	ldd	r24, Y+15	; 0x0f
    484e:	98 89       	ldd	r25, Y+16	; 0x10
    4850:	01 97       	sbiw	r24, 0x01	; 1
    4852:	f1 f7       	brne	.-4      	; 0x4850 <LCD_voidInit+0x300>
    4854:	98 8b       	std	Y+16, r25	; 0x10
    4856:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    4858:	81 e0       	ldi	r24, 0x01	; 1
    485a:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	a0 e0       	ldi	r26, 0x00	; 0
    4864:	b0 e4       	ldi	r27, 0x40	; 64
    4866:	8b 87       	std	Y+11, r24	; 0x0b
    4868:	9c 87       	std	Y+12, r25	; 0x0c
    486a:	ad 87       	std	Y+13, r26	; 0x0d
    486c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    486e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4870:	7c 85       	ldd	r23, Y+12	; 0x0c
    4872:	8d 85       	ldd	r24, Y+13	; 0x0d
    4874:	9e 85       	ldd	r25, Y+14	; 0x0e
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	4a e7       	ldi	r20, 0x7A	; 122
    487c:	55 e4       	ldi	r21, 0x45	; 69
    487e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	8f 83       	std	Y+7, r24	; 0x07
    4888:	98 87       	std	Y+8, r25	; 0x08
    488a:	a9 87       	std	Y+9, r26	; 0x09
    488c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    488e:	6f 81       	ldd	r22, Y+7	; 0x07
    4890:	78 85       	ldd	r23, Y+8	; 0x08
    4892:	89 85       	ldd	r24, Y+9	; 0x09
    4894:	9a 85       	ldd	r25, Y+10	; 0x0a
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	40 e8       	ldi	r20, 0x80	; 128
    489c:	5f e3       	ldi	r21, 0x3F	; 63
    489e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48a2:	88 23       	and	r24, r24
    48a4:	2c f4       	brge	.+10     	; 0x48b0 <LCD_voidInit+0x360>
		__ticks = 1;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	9e 83       	std	Y+6, r25	; 0x06
    48ac:	8d 83       	std	Y+5, r24	; 0x05
    48ae:	3f c0       	rjmp	.+126    	; 0x492e <LCD_voidInit+0x3de>
	else if (__tmp > 65535)
    48b0:	6f 81       	ldd	r22, Y+7	; 0x07
    48b2:	78 85       	ldd	r23, Y+8	; 0x08
    48b4:	89 85       	ldd	r24, Y+9	; 0x09
    48b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	3f ef       	ldi	r19, 0xFF	; 255
    48bc:	4f e7       	ldi	r20, 0x7F	; 127
    48be:	57 e4       	ldi	r21, 0x47	; 71
    48c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48c4:	18 16       	cp	r1, r24
    48c6:	4c f5       	brge	.+82     	; 0x491a <LCD_voidInit+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    48cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	40 e2       	ldi	r20, 0x20	; 32
    48d6:	51 e4       	ldi	r21, 0x41	; 65
    48d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	bc 01       	movw	r22, r24
    48e2:	cd 01       	movw	r24, r26
    48e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	9e 83       	std	Y+6, r25	; 0x06
    48ee:	8d 83       	std	Y+5, r24	; 0x05
    48f0:	0f c0       	rjmp	.+30     	; 0x4910 <LCD_voidInit+0x3c0>
    48f2:	80 e9       	ldi	r24, 0x90	; 144
    48f4:	91 e0       	ldi	r25, 0x01	; 1
    48f6:	9c 83       	std	Y+4, r25	; 0x04
    48f8:	8b 83       	std	Y+3, r24	; 0x03
    48fa:	8b 81       	ldd	r24, Y+3	; 0x03
    48fc:	9c 81       	ldd	r25, Y+4	; 0x04
    48fe:	01 97       	sbiw	r24, 0x01	; 1
    4900:	f1 f7       	brne	.-4      	; 0x48fe <LCD_voidInit+0x3ae>
    4902:	9c 83       	std	Y+4, r25	; 0x04
    4904:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4906:	8d 81       	ldd	r24, Y+5	; 0x05
    4908:	9e 81       	ldd	r25, Y+6	; 0x06
    490a:	01 97       	sbiw	r24, 0x01	; 1
    490c:	9e 83       	std	Y+6, r25	; 0x06
    490e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4910:	8d 81       	ldd	r24, Y+5	; 0x05
    4912:	9e 81       	ldd	r25, Y+6	; 0x06
    4914:	00 97       	sbiw	r24, 0x00	; 0
    4916:	69 f7       	brne	.-38     	; 0x48f2 <LCD_voidInit+0x3a2>
    4918:	14 c0       	rjmp	.+40     	; 0x4942 <LCD_voidInit+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    491a:	6f 81       	ldd	r22, Y+7	; 0x07
    491c:	78 85       	ldd	r23, Y+8	; 0x08
    491e:	89 85       	ldd	r24, Y+9	; 0x09
    4920:	9a 85       	ldd	r25, Y+10	; 0x0a
    4922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	9e 83       	std	Y+6, r25	; 0x06
    492c:	8d 83       	std	Y+5, r24	; 0x05
    492e:	8d 81       	ldd	r24, Y+5	; 0x05
    4930:	9e 81       	ldd	r25, Y+6	; 0x06
    4932:	9a 83       	std	Y+2, r25	; 0x02
    4934:	89 83       	std	Y+1, r24	; 0x01
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	9a 81       	ldd	r25, Y+2	; 0x02
    493a:	01 97       	sbiw	r24, 0x01	; 1
    493c:	f1 f7       	brne	.-4      	; 0x493a <LCD_voidInit+0x3ea>
    493e:	9a 83       	std	Y+2, r25	; 0x02
    4940:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCommand(RETURN_HOME);
    4942:	82 e0       	ldi	r24, 0x02	; 2
    4944:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>

}
    4948:	e8 96       	adiw	r28, 0x38	; 56
    494a:	0f b6       	in	r0, 0x3f	; 63
    494c:	f8 94       	cli
    494e:	de bf       	out	0x3e, r29	; 62
    4950:	0f be       	out	0x3f, r0	; 63
    4952:	cd bf       	out	0x3d, r28	; 61
    4954:	cf 91       	pop	r28
    4956:	df 91       	pop	r29
    4958:	08 95       	ret

0000495a <LCD_voidWriteBitsToSend>:

static void LCD_voidWriteBitsToSend(u8 Copy_U8_Character)
{
    495a:	df 93       	push	r29
    495c:	cf 93       	push	r28
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	e9 97       	sbiw	r28, 0x39	; 57
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    4970:	89 ad       	ldd	r24, Y+57	; 0x39
    4972:	82 95       	swap	r24
    4974:	8f 70       	andi	r24, 0x0F	; 15
    4976:	98 2f       	mov	r25, r24
    4978:	91 70       	andi	r25, 0x01	; 1
    497a:	82 e0       	ldi	r24, 0x02	; 2
    497c:	60 e0       	ldi	r22, 0x00	; 0
    497e:	49 2f       	mov	r20, r25
    4980:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    4984:	89 ad       	ldd	r24, Y+57	; 0x39
    4986:	82 95       	swap	r24
    4988:	86 95       	lsr	r24
    498a:	87 70       	andi	r24, 0x07	; 7
    498c:	98 2f       	mov	r25, r24
    498e:	91 70       	andi	r25, 0x01	; 1
    4990:	82 e0       	ldi	r24, 0x02	; 2
    4992:	61 e0       	ldi	r22, 0x01	; 1
    4994:	49 2f       	mov	r20, r25
    4996:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    499a:	89 ad       	ldd	r24, Y+57	; 0x39
    499c:	82 95       	swap	r24
    499e:	86 95       	lsr	r24
    49a0:	86 95       	lsr	r24
    49a2:	83 70       	andi	r24, 0x03	; 3
    49a4:	98 2f       	mov	r25, r24
    49a6:	91 70       	andi	r25, 0x01	; 1
    49a8:	82 e0       	ldi	r24, 0x02	; 2
    49aa:	62 e0       	ldi	r22, 0x02	; 2
    49ac:	49 2f       	mov	r20, r25
    49ae:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    49b2:	89 ad       	ldd	r24, Y+57	; 0x39
    49b4:	98 2f       	mov	r25, r24
    49b6:	99 1f       	adc	r25, r25
    49b8:	99 27       	eor	r25, r25
    49ba:	99 1f       	adc	r25, r25
    49bc:	82 e0       	ldi	r24, 0x02	; 2
    49be:	64 e0       	ldi	r22, 0x04	; 4
    49c0:	49 2f       	mov	r20, r25
    49c2:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	62 e0       	ldi	r22, 0x02	; 2
    49ca:	41 e0       	ldi	r20, 0x01	; 1
    49cc:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	a0 e8       	ldi	r26, 0x80	; 128
    49d6:	bf e3       	ldi	r27, 0x3F	; 63
    49d8:	8d ab       	std	Y+53, r24	; 0x35
    49da:	9e ab       	std	Y+54, r25	; 0x36
    49dc:	af ab       	std	Y+55, r26	; 0x37
    49de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49e0:	6d a9       	ldd	r22, Y+53	; 0x35
    49e2:	7e a9       	ldd	r23, Y+54	; 0x36
    49e4:	8f a9       	ldd	r24, Y+55	; 0x37
    49e6:	98 ad       	ldd	r25, Y+56	; 0x38
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	4a e7       	ldi	r20, 0x7A	; 122
    49ee:	55 e4       	ldi	r21, 0x45	; 69
    49f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f4:	dc 01       	movw	r26, r24
    49f6:	cb 01       	movw	r24, r22
    49f8:	89 ab       	std	Y+49, r24	; 0x31
    49fa:	9a ab       	std	Y+50, r25	; 0x32
    49fc:	ab ab       	std	Y+51, r26	; 0x33
    49fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a00:	69 a9       	ldd	r22, Y+49	; 0x31
    4a02:	7a a9       	ldd	r23, Y+50	; 0x32
    4a04:	8b a9       	ldd	r24, Y+51	; 0x33
    4a06:	9c a9       	ldd	r25, Y+52	; 0x34
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	40 e8       	ldi	r20, 0x80	; 128
    4a0e:	5f e3       	ldi	r21, 0x3F	; 63
    4a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a14:	88 23       	and	r24, r24
    4a16:	2c f4       	brge	.+10     	; 0x4a22 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	98 ab       	std	Y+48, r25	; 0x30
    4a1e:	8f a7       	std	Y+47, r24	; 0x2f
    4a20:	3f c0       	rjmp	.+126    	; 0x4aa0 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    4a22:	69 a9       	ldd	r22, Y+49	; 0x31
    4a24:	7a a9       	ldd	r23, Y+50	; 0x32
    4a26:	8b a9       	ldd	r24, Y+51	; 0x33
    4a28:	9c a9       	ldd	r25, Y+52	; 0x34
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	3f ef       	ldi	r19, 0xFF	; 255
    4a2e:	4f e7       	ldi	r20, 0x7F	; 127
    4a30:	57 e4       	ldi	r21, 0x47	; 71
    4a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a36:	18 16       	cp	r1, r24
    4a38:	4c f5       	brge	.+82     	; 0x4a8c <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3a:	6d a9       	ldd	r22, Y+53	; 0x35
    4a3c:	7e a9       	ldd	r23, Y+54	; 0x36
    4a3e:	8f a9       	ldd	r24, Y+55	; 0x37
    4a40:	98 ad       	ldd	r25, Y+56	; 0x38
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	40 e2       	ldi	r20, 0x20	; 32
    4a48:	51 e4       	ldi	r21, 0x41	; 65
    4a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a4e:	dc 01       	movw	r26, r24
    4a50:	cb 01       	movw	r24, r22
    4a52:	bc 01       	movw	r22, r24
    4a54:	cd 01       	movw	r24, r26
    4a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	98 ab       	std	Y+48, r25	; 0x30
    4a60:	8f a7       	std	Y+47, r24	; 0x2f
    4a62:	0f c0       	rjmp	.+30     	; 0x4a82 <LCD_voidWriteBitsToSend+0x128>
    4a64:	80 e9       	ldi	r24, 0x90	; 144
    4a66:	91 e0       	ldi	r25, 0x01	; 1
    4a68:	9e a7       	std	Y+46, r25	; 0x2e
    4a6a:	8d a7       	std	Y+45, r24	; 0x2d
    4a6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a70:	01 97       	sbiw	r24, 0x01	; 1
    4a72:	f1 f7       	brne	.-4      	; 0x4a70 <LCD_voidWriteBitsToSend+0x116>
    4a74:	9e a7       	std	Y+46, r25	; 0x2e
    4a76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    4a7c:	01 97       	sbiw	r24, 0x01	; 1
    4a7e:	98 ab       	std	Y+48, r25	; 0x30
    4a80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a84:	98 a9       	ldd	r25, Y+48	; 0x30
    4a86:	00 97       	sbiw	r24, 0x00	; 0
    4a88:	69 f7       	brne	.-38     	; 0x4a64 <LCD_voidWriteBitsToSend+0x10a>
    4a8a:	14 c0       	rjmp	.+40     	; 0x4ab4 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a8c:	69 a9       	ldd	r22, Y+49	; 0x31
    4a8e:	7a a9       	ldd	r23, Y+50	; 0x32
    4a90:	8b a9       	ldd	r24, Y+51	; 0x33
    4a92:	9c a9       	ldd	r25, Y+52	; 0x34
    4a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a98:	dc 01       	movw	r26, r24
    4a9a:	cb 01       	movw	r24, r22
    4a9c:	98 ab       	std	Y+48, r25	; 0x30
    4a9e:	8f a7       	std	Y+47, r24	; 0x2f
    4aa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4aa2:	98 a9       	ldd	r25, Y+48	; 0x30
    4aa4:	9c a7       	std	Y+44, r25	; 0x2c
    4aa6:	8b a7       	std	Y+43, r24	; 0x2b
    4aa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4aaa:	9c a5       	ldd	r25, Y+44	; 0x2c
    4aac:	01 97       	sbiw	r24, 0x01	; 1
    4aae:	f1 f7       	brne	.-4      	; 0x4aac <LCD_voidWriteBitsToSend+0x152>
    4ab0:	9c a7       	std	Y+44, r25	; 0x2c
    4ab2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	62 e0       	ldi	r22, 0x02	; 2
    4ab8:	40 e0       	ldi	r20, 0x00	; 0
    4aba:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	a0 ea       	ldi	r26, 0xA0	; 160
    4ac4:	b0 e4       	ldi	r27, 0x40	; 64
    4ac6:	8f a3       	std	Y+39, r24	; 0x27
    4ac8:	98 a7       	std	Y+40, r25	; 0x28
    4aca:	a9 a7       	std	Y+41, r26	; 0x29
    4acc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ace:	6f a1       	ldd	r22, Y+39	; 0x27
    4ad0:	78 a5       	ldd	r23, Y+40	; 0x28
    4ad2:	89 a5       	ldd	r24, Y+41	; 0x29
    4ad4:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	4a e7       	ldi	r20, 0x7A	; 122
    4adc:	55 e4       	ldi	r21, 0x45	; 69
    4ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	8b a3       	std	Y+35, r24	; 0x23
    4ae8:	9c a3       	std	Y+36, r25	; 0x24
    4aea:	ad a3       	std	Y+37, r26	; 0x25
    4aec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4aee:	6b a1       	ldd	r22, Y+35	; 0x23
    4af0:	7c a1       	ldd	r23, Y+36	; 0x24
    4af2:	8d a1       	ldd	r24, Y+37	; 0x25
    4af4:	9e a1       	ldd	r25, Y+38	; 0x26
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	40 e8       	ldi	r20, 0x80	; 128
    4afc:	5f e3       	ldi	r21, 0x3F	; 63
    4afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b02:	88 23       	and	r24, r24
    4b04:	2c f4       	brge	.+10     	; 0x4b10 <LCD_voidWriteBitsToSend+0x1b6>
		__ticks = 1;
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	9a a3       	std	Y+34, r25	; 0x22
    4b0c:	89 a3       	std	Y+33, r24	; 0x21
    4b0e:	3f c0       	rjmp	.+126    	; 0x4b8e <LCD_voidWriteBitsToSend+0x234>
	else if (__tmp > 65535)
    4b10:	6b a1       	ldd	r22, Y+35	; 0x23
    4b12:	7c a1       	ldd	r23, Y+36	; 0x24
    4b14:	8d a1       	ldd	r24, Y+37	; 0x25
    4b16:	9e a1       	ldd	r25, Y+38	; 0x26
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	3f ef       	ldi	r19, 0xFF	; 255
    4b1c:	4f e7       	ldi	r20, 0x7F	; 127
    4b1e:	57 e4       	ldi	r21, 0x47	; 71
    4b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b24:	18 16       	cp	r1, r24
    4b26:	4c f5       	brge	.+82     	; 0x4b7a <LCD_voidWriteBitsToSend+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b28:	6f a1       	ldd	r22, Y+39	; 0x27
    4b2a:	78 a5       	ldd	r23, Y+40	; 0x28
    4b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    4b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	40 e2       	ldi	r20, 0x20	; 32
    4b36:	51 e4       	ldi	r21, 0x41	; 65
    4b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	cb 01       	movw	r24, r22
    4b40:	bc 01       	movw	r22, r24
    4b42:	cd 01       	movw	r24, r26
    4b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b48:	dc 01       	movw	r26, r24
    4b4a:	cb 01       	movw	r24, r22
    4b4c:	9a a3       	std	Y+34, r25	; 0x22
    4b4e:	89 a3       	std	Y+33, r24	; 0x21
    4b50:	0f c0       	rjmp	.+30     	; 0x4b70 <LCD_voidWriteBitsToSend+0x216>
    4b52:	80 e9       	ldi	r24, 0x90	; 144
    4b54:	91 e0       	ldi	r25, 0x01	; 1
    4b56:	98 a3       	std	Y+32, r25	; 0x20
    4b58:	8f 8f       	std	Y+31, r24	; 0x1f
    4b5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b5c:	98 a1       	ldd	r25, Y+32	; 0x20
    4b5e:	01 97       	sbiw	r24, 0x01	; 1
    4b60:	f1 f7       	brne	.-4      	; 0x4b5e <LCD_voidWriteBitsToSend+0x204>
    4b62:	98 a3       	std	Y+32, r25	; 0x20
    4b64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b66:	89 a1       	ldd	r24, Y+33	; 0x21
    4b68:	9a a1       	ldd	r25, Y+34	; 0x22
    4b6a:	01 97       	sbiw	r24, 0x01	; 1
    4b6c:	9a a3       	std	Y+34, r25	; 0x22
    4b6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b70:	89 a1       	ldd	r24, Y+33	; 0x21
    4b72:	9a a1       	ldd	r25, Y+34	; 0x22
    4b74:	00 97       	sbiw	r24, 0x00	; 0
    4b76:	69 f7       	brne	.-38     	; 0x4b52 <LCD_voidWriteBitsToSend+0x1f8>
    4b78:	14 c0       	rjmp	.+40     	; 0x4ba2 <LCD_voidWriteBitsToSend+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    4b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    4b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    4b80:	9e a1       	ldd	r25, Y+38	; 0x26
    4b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	9a a3       	std	Y+34, r25	; 0x22
    4b8c:	89 a3       	std	Y+33, r24	; 0x21
    4b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    4b90:	9a a1       	ldd	r25, Y+34	; 0x22
    4b92:	9e 8f       	std	Y+30, r25	; 0x1e
    4b94:	8d 8f       	std	Y+29, r24	; 0x1d
    4b96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b9a:	01 97       	sbiw	r24, 0x01	; 1
    4b9c:	f1 f7       	brne	.-4      	; 0x4b9a <LCD_voidWriteBitsToSend+0x240>
    4b9e:	9e 8f       	std	Y+30, r25	; 0x1e
    4ba0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	M_DIO_Void_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    4ba2:	89 ad       	ldd	r24, Y+57	; 0x39
    4ba4:	98 2f       	mov	r25, r24
    4ba6:	91 70       	andi	r25, 0x01	; 1
    4ba8:	82 e0       	ldi	r24, 0x02	; 2
    4baa:	60 e0       	ldi	r22, 0x00	; 0
    4bac:	49 2f       	mov	r20, r25
    4bae:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    4bb2:	89 ad       	ldd	r24, Y+57	; 0x39
    4bb4:	86 95       	lsr	r24
    4bb6:	98 2f       	mov	r25, r24
    4bb8:	91 70       	andi	r25, 0x01	; 1
    4bba:	82 e0       	ldi	r24, 0x02	; 2
    4bbc:	61 e0       	ldi	r22, 0x01	; 1
    4bbe:	49 2f       	mov	r20, r25
    4bc0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    4bc4:	89 ad       	ldd	r24, Y+57	; 0x39
    4bc6:	86 95       	lsr	r24
    4bc8:	86 95       	lsr	r24
    4bca:	98 2f       	mov	r25, r24
    4bcc:	91 70       	andi	r25, 0x01	; 1
    4bce:	82 e0       	ldi	r24, 0x02	; 2
    4bd0:	62 e0       	ldi	r22, 0x02	; 2
    4bd2:	49 2f       	mov	r20, r25
    4bd4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    4bd8:	89 ad       	ldd	r24, Y+57	; 0x39
    4bda:	86 95       	lsr	r24
    4bdc:	86 95       	lsr	r24
    4bde:	86 95       	lsr	r24
    4be0:	98 2f       	mov	r25, r24
    4be2:	91 70       	andi	r25, 0x01	; 1
    4be4:	82 e0       	ldi	r24, 0x02	; 2
    4be6:	64 e0       	ldi	r22, 0x04	; 4
    4be8:	49 2f       	mov	r20, r25
    4bea:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	62 e0       	ldi	r22, 0x02	; 2
    4bf2:	41 e0       	ldi	r20, 0x01	; 1
    4bf4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	a0 e8       	ldi	r26, 0x80	; 128
    4bfe:	bf e3       	ldi	r27, 0x3F	; 63
    4c00:	89 8f       	std	Y+25, r24	; 0x19
    4c02:	9a 8f       	std	Y+26, r25	; 0x1a
    4c04:	ab 8f       	std	Y+27, r26	; 0x1b
    4c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c08:	69 8d       	ldd	r22, Y+25	; 0x19
    4c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	4a e7       	ldi	r20, 0x7A	; 122
    4c16:	55 e4       	ldi	r21, 0x45	; 69
    4c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	8d 8b       	std	Y+21, r24	; 0x15
    4c22:	9e 8b       	std	Y+22, r25	; 0x16
    4c24:	af 8b       	std	Y+23, r26	; 0x17
    4c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c28:	6d 89       	ldd	r22, Y+21	; 0x15
    4c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    4c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    4c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	40 e8       	ldi	r20, 0x80	; 128
    4c36:	5f e3       	ldi	r21, 0x3F	; 63
    4c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c3c:	88 23       	and	r24, r24
    4c3e:	2c f4       	brge	.+10     	; 0x4c4a <LCD_voidWriteBitsToSend+0x2f0>
		__ticks = 1;
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	9c 8b       	std	Y+20, r25	; 0x14
    4c46:	8b 8b       	std	Y+19, r24	; 0x13
    4c48:	3f c0       	rjmp	.+126    	; 0x4cc8 <LCD_voidWriteBitsToSend+0x36e>
	else if (__tmp > 65535)
    4c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    4c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    4c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c50:	98 8d       	ldd	r25, Y+24	; 0x18
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	3f ef       	ldi	r19, 0xFF	; 255
    4c56:	4f e7       	ldi	r20, 0x7F	; 127
    4c58:	57 e4       	ldi	r21, 0x47	; 71
    4c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c5e:	18 16       	cp	r1, r24
    4c60:	4c f5       	brge	.+82     	; 0x4cb4 <LCD_voidWriteBitsToSend+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c62:	69 8d       	ldd	r22, Y+25	; 0x19
    4c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	40 e2       	ldi	r20, 0x20	; 32
    4c70:	51 e4       	ldi	r21, 0x41	; 65
    4c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c76:	dc 01       	movw	r26, r24
    4c78:	cb 01       	movw	r24, r22
    4c7a:	bc 01       	movw	r22, r24
    4c7c:	cd 01       	movw	r24, r26
    4c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	9c 8b       	std	Y+20, r25	; 0x14
    4c88:	8b 8b       	std	Y+19, r24	; 0x13
    4c8a:	0f c0       	rjmp	.+30     	; 0x4caa <LCD_voidWriteBitsToSend+0x350>
    4c8c:	80 e9       	ldi	r24, 0x90	; 144
    4c8e:	91 e0       	ldi	r25, 0x01	; 1
    4c90:	9a 8b       	std	Y+18, r25	; 0x12
    4c92:	89 8b       	std	Y+17, r24	; 0x11
    4c94:	89 89       	ldd	r24, Y+17	; 0x11
    4c96:	9a 89       	ldd	r25, Y+18	; 0x12
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	f1 f7       	brne	.-4      	; 0x4c98 <LCD_voidWriteBitsToSend+0x33e>
    4c9c:	9a 8b       	std	Y+18, r25	; 0x12
    4c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	9c 8b       	std	Y+20, r25	; 0x14
    4ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4caa:	8b 89       	ldd	r24, Y+19	; 0x13
    4cac:	9c 89       	ldd	r25, Y+20	; 0x14
    4cae:	00 97       	sbiw	r24, 0x00	; 0
    4cb0:	69 f7       	brne	.-38     	; 0x4c8c <LCD_voidWriteBitsToSend+0x332>
    4cb2:	14 c0       	rjmp	.+40     	; 0x4cdc <LCD_voidWriteBitsToSend+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    4cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    4cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cba:	98 8d       	ldd	r25, Y+24	; 0x18
    4cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc0:	dc 01       	movw	r26, r24
    4cc2:	cb 01       	movw	r24, r22
    4cc4:	9c 8b       	std	Y+20, r25	; 0x14
    4cc6:	8b 8b       	std	Y+19, r24	; 0x13
    4cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    4cca:	9c 89       	ldd	r25, Y+20	; 0x14
    4ccc:	98 8b       	std	Y+16, r25	; 0x10
    4cce:	8f 87       	std	Y+15, r24	; 0x0f
    4cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cd2:	98 89       	ldd	r25, Y+16	; 0x10
    4cd4:	01 97       	sbiw	r24, 0x01	; 1
    4cd6:	f1 f7       	brne	.-4      	; 0x4cd4 <LCD_voidWriteBitsToSend+0x37a>
    4cd8:	98 8b       	std	Y+16, r25	; 0x10
    4cda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    4cdc:	81 e0       	ldi	r24, 0x01	; 1
    4cde:	62 e0       	ldi	r22, 0x02	; 2
    4ce0:	40 e0       	ldi	r20, 0x00	; 0
    4ce2:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    4ce6:	80 e0       	ldi	r24, 0x00	; 0
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	a0 ea       	ldi	r26, 0xA0	; 160
    4cec:	b0 e4       	ldi	r27, 0x40	; 64
    4cee:	8b 87       	std	Y+11, r24	; 0x0b
    4cf0:	9c 87       	std	Y+12, r25	; 0x0c
    4cf2:	ad 87       	std	Y+13, r26	; 0x0d
    4cf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	4a e7       	ldi	r20, 0x7A	; 122
    4d04:	55 e4       	ldi	r21, 0x45	; 69
    4d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	8f 83       	std	Y+7, r24	; 0x07
    4d10:	98 87       	std	Y+8, r25	; 0x08
    4d12:	a9 87       	std	Y+9, r26	; 0x09
    4d14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d16:	6f 81       	ldd	r22, Y+7	; 0x07
    4d18:	78 85       	ldd	r23, Y+8	; 0x08
    4d1a:	89 85       	ldd	r24, Y+9	; 0x09
    4d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	40 e8       	ldi	r20, 0x80	; 128
    4d24:	5f e3       	ldi	r21, 0x3F	; 63
    4d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d2a:	88 23       	and	r24, r24
    4d2c:	2c f4       	brge	.+10     	; 0x4d38 <LCD_voidWriteBitsToSend+0x3de>
		__ticks = 1;
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	9e 83       	std	Y+6, r25	; 0x06
    4d34:	8d 83       	std	Y+5, r24	; 0x05
    4d36:	3f c0       	rjmp	.+126    	; 0x4db6 <LCD_voidWriteBitsToSend+0x45c>
	else if (__tmp > 65535)
    4d38:	6f 81       	ldd	r22, Y+7	; 0x07
    4d3a:	78 85       	ldd	r23, Y+8	; 0x08
    4d3c:	89 85       	ldd	r24, Y+9	; 0x09
    4d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	3f ef       	ldi	r19, 0xFF	; 255
    4d44:	4f e7       	ldi	r20, 0x7F	; 127
    4d46:	57 e4       	ldi	r21, 0x47	; 71
    4d48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d4c:	18 16       	cp	r1, r24
    4d4e:	4c f5       	brge	.+82     	; 0x4da2 <LCD_voidWriteBitsToSend+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d58:	20 e0       	ldi	r18, 0x00	; 0
    4d5a:	30 e0       	ldi	r19, 0x00	; 0
    4d5c:	40 e2       	ldi	r20, 0x20	; 32
    4d5e:	51 e4       	ldi	r21, 0x41	; 65
    4d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	bc 01       	movw	r22, r24
    4d6a:	cd 01       	movw	r24, r26
    4d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d70:	dc 01       	movw	r26, r24
    4d72:	cb 01       	movw	r24, r22
    4d74:	9e 83       	std	Y+6, r25	; 0x06
    4d76:	8d 83       	std	Y+5, r24	; 0x05
    4d78:	0f c0       	rjmp	.+30     	; 0x4d98 <LCD_voidWriteBitsToSend+0x43e>
    4d7a:	80 e9       	ldi	r24, 0x90	; 144
    4d7c:	91 e0       	ldi	r25, 0x01	; 1
    4d7e:	9c 83       	std	Y+4, r25	; 0x04
    4d80:	8b 83       	std	Y+3, r24	; 0x03
    4d82:	8b 81       	ldd	r24, Y+3	; 0x03
    4d84:	9c 81       	ldd	r25, Y+4	; 0x04
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	f1 f7       	brne	.-4      	; 0x4d86 <LCD_voidWriteBitsToSend+0x42c>
    4d8a:	9c 83       	std	Y+4, r25	; 0x04
    4d8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d90:	9e 81       	ldd	r25, Y+6	; 0x06
    4d92:	01 97       	sbiw	r24, 0x01	; 1
    4d94:	9e 83       	std	Y+6, r25	; 0x06
    4d96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d98:	8d 81       	ldd	r24, Y+5	; 0x05
    4d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d9c:	00 97       	sbiw	r24, 0x00	; 0
    4d9e:	69 f7       	brne	.-38     	; 0x4d7a <LCD_voidWriteBitsToSend+0x420>
    4da0:	14 c0       	rjmp	.+40     	; 0x4dca <LCD_voidWriteBitsToSend+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4da2:	6f 81       	ldd	r22, Y+7	; 0x07
    4da4:	78 85       	ldd	r23, Y+8	; 0x08
    4da6:	89 85       	ldd	r24, Y+9	; 0x09
    4da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	9e 83       	std	Y+6, r25	; 0x06
    4db4:	8d 83       	std	Y+5, r24	; 0x05
    4db6:	8d 81       	ldd	r24, Y+5	; 0x05
    4db8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dba:	9a 83       	std	Y+2, r25	; 0x02
    4dbc:	89 83       	std	Y+1, r24	; 0x01
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc2:	01 97       	sbiw	r24, 0x01	; 1
    4dc4:	f1 f7       	brne	.-4      	; 0x4dc2 <LCD_voidWriteBitsToSend+0x468>
    4dc6:	9a 83       	std	Y+2, r25	; 0x02
    4dc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    4dca:	e9 96       	adiw	r28, 0x39	; 57
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	08 95       	ret

00004ddc <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Copy_U8_Character)
{
    4ddc:	df 93       	push	r29
    4dde:	cf 93       	push	r28
    4de0:	0f 92       	push	r0
    4de2:	cd b7       	in	r28, 0x3d	; 61
    4de4:	de b7       	in	r29, 0x3e	; 62
    4de6:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	63 e0       	ldi	r22, 0x03	; 3
    4dec:	41 e0       	ldi	r20, 0x01	; 1
    4dee:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	LCD_voidWriteBitsToSend(Copy_U8_Character);
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	0e 94 ad 24 	call	0x495a	; 0x495a <LCD_voidWriteBitsToSend>

}
    4df8:	0f 90       	pop	r0
    4dfa:	cf 91       	pop	r28
    4dfc:	df 91       	pop	r29
    4dfe:	08 95       	ret

00004e00 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(u8 Copy_U8_Command)
{
    4e00:	df 93       	push	r29
    4e02:	cf 93       	push	r28
    4e04:	0f 92       	push	r0
    4e06:	cd b7       	in	r28, 0x3d	; 61
    4e08:	de b7       	in	r29, 0x3e	; 62
    4e0a:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    4e0c:	81 e0       	ldi	r24, 0x01	; 1
    4e0e:	63 e0       	ldi	r22, 0x03	; 3
    4e10:	40 e0       	ldi	r20, 0x00	; 0
    4e12:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	LCD_voidWriteBitsToSend(Copy_U8_Command);
    4e16:	89 81       	ldd	r24, Y+1	; 0x01
    4e18:	0e 94 ad 24 	call	0x495a	; 0x495a <LCD_voidWriteBitsToSend>
}
    4e1c:	0f 90       	pop	r0
    4e1e:	cf 91       	pop	r28
    4e20:	df 91       	pop	r29
    4e22:	08 95       	ret

00004e24 <LCD_voidWriteString>:

void LCD_voidWriteString(u8 * Copy_U8_Ptr)
{
    4e24:	df 93       	push	r29
    4e26:	cf 93       	push	r28
    4e28:	00 d0       	rcall	.+0      	; 0x4e2a <LCD_voidWriteString+0x6>
    4e2a:	0f 92       	push	r0
    4e2c:	cd b7       	in	r28, 0x3d	; 61
    4e2e:	de b7       	in	r29, 0x3e	; 62
    4e30:	9b 83       	std	Y+3, r25	; 0x03
    4e32:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    4e34:	19 82       	std	Y+1, r1	; 0x01
    4e36:	0e c0       	rjmp	.+28     	; 0x4e54 <LCD_voidWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != '\0')
	{
		LCD_voidWriteData(Copy_U8_Ptr[Local_U8_Counter]);
    4e38:	89 81       	ldd	r24, Y+1	; 0x01
    4e3a:	28 2f       	mov	r18, r24
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	9b 81       	ldd	r25, Y+3	; 0x03
    4e42:	fc 01       	movw	r30, r24
    4e44:	e2 0f       	add	r30, r18
    4e46:	f3 1f       	adc	r31, r19
    4e48:	80 81       	ld	r24, Z
    4e4a:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <LCD_voidWriteData>
		Local_U8_Counter++;
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
    4e50:	8f 5f       	subi	r24, 0xFF	; 255
    4e52:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 * Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != '\0')
    4e54:	89 81       	ldd	r24, Y+1	; 0x01
    4e56:	28 2f       	mov	r18, r24
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e5e:	fc 01       	movw	r30, r24
    4e60:	e2 0f       	add	r30, r18
    4e62:	f3 1f       	adc	r31, r19
    4e64:	80 81       	ld	r24, Z
    4e66:	88 23       	and	r24, r24
    4e68:	39 f7       	brne	.-50     	; 0x4e38 <LCD_voidWriteString+0x14>
	{
		LCD_voidWriteData(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	cf 91       	pop	r28
    4e72:	df 91       	pop	r29
    4e74:	08 95       	ret

00004e76 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    4e76:	df 93       	push	r29
    4e78:	cf 93       	push	r28
    4e7a:	00 d0       	rcall	.+0      	; 0x4e7c <LCD_voidGoToXY+0x6>
    4e7c:	00 d0       	rcall	.+0      	; 0x4e7e <LCD_voidGoToXY+0x8>
    4e7e:	00 d0       	rcall	.+0      	; 0x4e80 <LCD_voidGoToXY+0xa>
    4e80:	cd b7       	in	r28, 0x3d	; 61
    4e82:	de b7       	in	r29, 0x3e	; 62
    4e84:	8d 83       	std	Y+5, r24	; 0x05
    4e86:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr[4] = {LCD_GOTO_R0_COMMAND , LCD_GOTO_R1_COMMAND ,LCD_GOTO_R2_COMMAND,LCD_GOTO_R3_COMMAND};
    4e88:	19 82       	std	Y+1, r1	; 0x01
    4e8a:	80 e4       	ldi	r24, 0x40	; 64
    4e8c:	8a 83       	std	Y+2, r24	; 0x02
    4e8e:	84 e1       	ldi	r24, 0x14	; 20
    4e90:	8b 83       	std	Y+3, r24	; 0x03
    4e92:	84 e5       	ldi	r24, 0x54	; 84
    4e94:	8c 83       	std	Y+4, r24	; 0x04
	LCD_voidWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col + LCD_BASE_ADDRESS);
    4e96:	8d 81       	ldd	r24, Y+5	; 0x05
    4e98:	28 2f       	mov	r18, r24
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	01 96       	adiw	r24, 0x01	; 1
    4ea0:	fc 01       	movw	r30, r24
    4ea2:	e2 0f       	add	r30, r18
    4ea4:	f3 1f       	adc	r31, r19
    4ea6:	90 81       	ld	r25, Z
    4ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    4eaa:	89 0f       	add	r24, r25
    4eac:	80 58       	subi	r24, 0x80	; 128
    4eae:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>
}
    4eb2:	26 96       	adiw	r28, 0x06	; 6
    4eb4:	0f b6       	in	r0, 0x3f	; 63
    4eb6:	f8 94       	cli
    4eb8:	de bf       	out	0x3e, r29	; 62
    4eba:	0f be       	out	0x3f, r0	; 63
    4ebc:	cd bf       	out	0x3d, r28	; 61
    4ebe:	cf 91       	pop	r28
    4ec0:	df 91       	pop	r29
    4ec2:	08 95       	ret

00004ec4 <LCD_voidClear>:

void LCD_voidClear(void)
{
    4ec4:	df 93       	push	r29
    4ec6:	cf 93       	push	r28
    4ec8:	cd b7       	in	r28, 0x3d	; 61
    4eca:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>
}
    4ed2:	cf 91       	pop	r28
    4ed4:	df 91       	pop	r29
    4ed6:	08 95       	ret

00004ed8 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber( u32 Copy_S32_Num )
{
    4ed8:	0f 93       	push	r16
    4eda:	1f 93       	push	r17
    4edc:	df 93       	push	r29
    4ede:	cf 93       	push	r28
    4ee0:	cd b7       	in	r28, 0x3d	; 61
    4ee2:	de b7       	in	r29, 0x3e	; 62
    4ee4:	2f 97       	sbiw	r28, 0x0f	; 15
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	de bf       	out	0x3e, r29	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	cd bf       	out	0x3d, r28	; 61
    4ef0:	6c 87       	std	Y+12, r22	; 0x0c
    4ef2:	7d 87       	std	Y+13, r23	; 0x0d
    4ef4:	8e 87       	std	Y+14, r24	; 0x0e
    4ef6:	9f 87       	std	Y+15, r25	; 0x0f
	if(Copy_S32_Num < 0)
	{
		Copy_S32_Num = Copy_S32_Num * -1;
		LCD_voidWriteData('-');
	}
	u8 Local_U8_Arr[10] = {0};
    4ef8:	8a e0       	ldi	r24, 0x0A	; 10
    4efa:	fe 01       	movw	r30, r28
    4efc:	32 96       	adiw	r30, 0x02	; 2
    4efe:	df 01       	movw	r26, r30
    4f00:	98 2f       	mov	r25, r24
    4f02:	1d 92       	st	X+, r1
    4f04:	9a 95       	dec	r25
    4f06:	e9 f7       	brne	.-6      	; 0x4f02 <LCD_voidWriteNumber+0x2a>
	s8 Local_S8_Counter = -1;
    4f08:	8f ef       	ldi	r24, 0xFF	; 255
    4f0a:	89 83       	std	Y+1, r24	; 0x01
    4f0c:	2f c0       	rjmp	.+94     	; 0x4f6c <LCD_voidWriteNumber+0x94>
	while(Copy_S32_Num != 0)
	{
		Local_S8_Counter++;
    4f0e:	89 81       	ldd	r24, Y+1	; 0x01
    4f10:	8f 5f       	subi	r24, 0xFF	; 255
    4f12:	89 83       	std	Y+1, r24	; 0x01
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Num % 10;
    4f14:	89 81       	ldd	r24, Y+1	; 0x01
    4f16:	08 2f       	mov	r16, r24
    4f18:	11 27       	eor	r17, r17
    4f1a:	07 fd       	sbrc	r16, 7
    4f1c:	10 95       	com	r17
    4f1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f20:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f22:	ae 85       	ldd	r26, Y+14	; 0x0e
    4f24:	bf 85       	ldd	r27, Y+15	; 0x0f
    4f26:	2a e0       	ldi	r18, 0x0A	; 10
    4f28:	30 e0       	ldi	r19, 0x00	; 0
    4f2a:	40 e0       	ldi	r20, 0x00	; 0
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	bc 01       	movw	r22, r24
    4f30:	cd 01       	movw	r24, r26
    4f32:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__udivmodsi4>
    4f36:	dc 01       	movw	r26, r24
    4f38:	cb 01       	movw	r24, r22
    4f3a:	28 2f       	mov	r18, r24
    4f3c:	ce 01       	movw	r24, r28
    4f3e:	02 96       	adiw	r24, 0x02	; 2
    4f40:	fc 01       	movw	r30, r24
    4f42:	e0 0f       	add	r30, r16
    4f44:	f1 1f       	adc	r31, r17
    4f46:	20 83       	st	Z, r18
		Copy_S32_Num = Copy_S32_Num / 10;
    4f48:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f4c:	ae 85       	ldd	r26, Y+14	; 0x0e
    4f4e:	bf 85       	ldd	r27, Y+15	; 0x0f
    4f50:	2a e0       	ldi	r18, 0x0A	; 10
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	40 e0       	ldi	r20, 0x00	; 0
    4f56:	50 e0       	ldi	r21, 0x00	; 0
    4f58:	bc 01       	movw	r22, r24
    4f5a:	cd 01       	movw	r24, r26
    4f5c:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__udivmodsi4>
    4f60:	da 01       	movw	r26, r20
    4f62:	c9 01       	movw	r24, r18
    4f64:	8c 87       	std	Y+12, r24	; 0x0c
    4f66:	9d 87       	std	Y+13, r25	; 0x0d
    4f68:	ae 87       	std	Y+14, r26	; 0x0e
    4f6a:	bf 87       	std	Y+15, r27	; 0x0f
		Copy_S32_Num = Copy_S32_Num * -1;
		LCD_voidWriteData('-');
	}
	u8 Local_U8_Arr[10] = {0};
	s8 Local_S8_Counter = -1;
	while(Copy_S32_Num != 0)
    4f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f70:	ae 85       	ldd	r26, Y+14	; 0x0e
    4f72:	bf 85       	ldd	r27, Y+15	; 0x0f
    4f74:	00 97       	sbiw	r24, 0x00	; 0
    4f76:	a1 05       	cpc	r26, r1
    4f78:	b1 05       	cpc	r27, r1
    4f7a:	49 f6       	brne	.-110    	; 0x4f0e <LCD_voidWriteNumber+0x36>
    4f7c:	11 c0       	rjmp	.+34     	; 0x4fa0 <LCD_voidWriteNumber+0xc8>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}
	while(Local_S8_Counter >= 0)
	{
		LCD_voidWriteData( Local_U8_Arr[Local_S8_Counter] + LCD_ASCII_OF_0);
    4f7e:	89 81       	ldd	r24, Y+1	; 0x01
    4f80:	28 2f       	mov	r18, r24
    4f82:	33 27       	eor	r19, r19
    4f84:	27 fd       	sbrc	r18, 7
    4f86:	30 95       	com	r19
    4f88:	ce 01       	movw	r24, r28
    4f8a:	02 96       	adiw	r24, 0x02	; 2
    4f8c:	fc 01       	movw	r30, r24
    4f8e:	e2 0f       	add	r30, r18
    4f90:	f3 1f       	adc	r31, r19
    4f92:	80 81       	ld	r24, Z
    4f94:	80 5d       	subi	r24, 0xD0	; 208
    4f96:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <LCD_voidWriteData>
		Local_S8_Counter--;
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	81 50       	subi	r24, 0x01	; 1
    4f9e:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}
	while(Local_S8_Counter >= 0)
    4fa0:	89 81       	ldd	r24, Y+1	; 0x01
    4fa2:	88 23       	and	r24, r24
    4fa4:	64 f7       	brge	.-40     	; 0x4f7e <LCD_voidWriteNumber+0xa6>
	{
		LCD_voidWriteData( Local_U8_Arr[Local_S8_Counter] + LCD_ASCII_OF_0);
		Local_S8_Counter--;
	}
}
    4fa6:	2f 96       	adiw	r28, 0x0f	; 15
    4fa8:	0f b6       	in	r0, 0x3f	; 63
    4faa:	f8 94       	cli
    4fac:	de bf       	out	0x3e, r29	; 62
    4fae:	0f be       	out	0x3f, r0	; 63
    4fb0:	cd bf       	out	0x3d, r28	; 61
    4fb2:	cf 91       	pop	r28
    4fb4:	df 91       	pop	r29
    4fb6:	1f 91       	pop	r17
    4fb8:	0f 91       	pop	r16
    4fba:	08 95       	ret

00004fbc <LCD_voidWriteSpecialCharToCGRAM>:


void LCD_voidWriteSpecialCharToCGRAM(u8 * copy_u8data , u8 copy_u8ByteNum )
{
    4fbc:	df 93       	push	r29
    4fbe:	cf 93       	push	r28
    4fc0:	00 d0       	rcall	.+0      	; 0x4fc2 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    4fc2:	00 d0       	rcall	.+0      	; 0x4fc4 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    4fc4:	0f 92       	push	r0
    4fc6:	cd b7       	in	r28, 0x3d	; 61
    4fc8:	de b7       	in	r29, 0x3e	; 62
    4fca:	9c 83       	std	Y+4, r25	; 0x04
    4fcc:	8b 83       	std	Y+3, r24	; 0x03
    4fce:	6d 83       	std	Y+5, r22	; 0x05
	copy_u8ByteNum &= 0x7; // we only have 8 locations 0-7
    4fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd2:	87 70       	andi	r24, 0x07	; 7
    4fd4:	8d 83       	std	Y+5, r24	; 0x05
	LCD_voidWriteCommand(0x40 | (copy_u8ByteNum << 3)); // Set CGRAM address
    4fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd8:	88 2f       	mov	r24, r24
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	88 0f       	add	r24, r24
    4fde:	99 1f       	adc	r25, r25
    4fe0:	88 0f       	add	r24, r24
    4fe2:	99 1f       	adc	r25, r25
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	80 64       	ori	r24, 0x40	; 64
    4fea:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>
	for (int i = 0; i < 8; i++)
    4fee:	1a 82       	std	Y+2, r1	; 0x02
    4ff0:	19 82       	std	Y+1, r1	; 0x01
    4ff2:	0f c0       	rjmp	.+30     	; 0x5012 <LCD_voidWriteSpecialCharToCGRAM+0x56>
	{
		LCD_voidWriteData(copy_u8data[i]); // Write character pattern
    4ff4:	29 81       	ldd	r18, Y+1	; 0x01
    4ff6:	3a 81       	ldd	r19, Y+2	; 0x02
    4ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    4ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	e2 0f       	add	r30, r18
    5000:	f3 1f       	adc	r31, r19
    5002:	80 81       	ld	r24, Z
    5004:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <LCD_voidWriteData>

void LCD_voidWriteSpecialCharToCGRAM(u8 * copy_u8data , u8 copy_u8ByteNum )
{
	copy_u8ByteNum &= 0x7; // we only have 8 locations 0-7
	LCD_voidWriteCommand(0x40 | (copy_u8ByteNum << 3)); // Set CGRAM address
	for (int i = 0; i < 8; i++)
    5008:	89 81       	ldd	r24, Y+1	; 0x01
    500a:	9a 81       	ldd	r25, Y+2	; 0x02
    500c:	01 96       	adiw	r24, 0x01	; 1
    500e:	9a 83       	std	Y+2, r25	; 0x02
    5010:	89 83       	std	Y+1, r24	; 0x01
    5012:	89 81       	ldd	r24, Y+1	; 0x01
    5014:	9a 81       	ldd	r25, Y+2	; 0x02
    5016:	88 30       	cpi	r24, 0x08	; 8
    5018:	91 05       	cpc	r25, r1
    501a:	64 f3       	brlt	.-40     	; 0x4ff4 <LCD_voidWriteSpecialCharToCGRAM+0x38>
	{
		LCD_voidWriteData(copy_u8data[i]); // Write character pattern
	}
}
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	0f 90       	pop	r0
    5022:	0f 90       	pop	r0
    5024:	0f 90       	pop	r0
    5026:	cf 91       	pop	r28
    5028:	df 91       	pop	r29
    502a:	08 95       	ret

0000502c <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    502c:	df 93       	push	r29
    502e:	cf 93       	push	r28
    5030:	0f 92       	push	r0
    5032:	cd b7       	in	r28, 0x3d	; 61
    5034:	de b7       	in	r29, 0x3e	; 62
    5036:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteCommand(0x80); // Move cursor to the beginning of the first line
    5038:	80 e8       	ldi	r24, 0x80	; 128
    503a:	0e 94 00 27 	call	0x4e00	; 0x4e00 <LCD_voidWriteCommand>
	LCD_voidWriteData(copy_u8ByteNum);
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <LCD_voidWriteData>
}
    5044:	0f 90       	pop	r0
    5046:	cf 91       	pop	r28
    5048:	df 91       	pop	r29
    504a:	08 95       	ret

0000504c <H_LED_Void_LedInit>:
#include "DIO_Interface.h"
#include "LED_Interface.h"
#include "LED_Config.h"
#include "LED_Private.h"
void H_LED_Void_LedInit(u8 Copy_U8_Led )
{
    504c:	df 93       	push	r29
    504e:	cf 93       	push	r28
    5050:	00 d0       	rcall	.+0      	; 0x5052 <H_LED_Void_LedInit+0x6>
    5052:	0f 92       	push	r0
    5054:	cd b7       	in	r28, 0x3d	; 61
    5056:	de b7       	in	r29, 0x3e	; 62
    5058:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_U8_Led)
    505a:	89 81       	ldd	r24, Y+1	; 0x01
    505c:	28 2f       	mov	r18, r24
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	3b 83       	std	Y+3, r19	; 0x03
    5062:	2a 83       	std	Y+2, r18	; 0x02
    5064:	8a 81       	ldd	r24, Y+2	; 0x02
    5066:	9b 81       	ldd	r25, Y+3	; 0x03
    5068:	82 30       	cpi	r24, 0x02	; 2
    506a:	91 05       	cpc	r25, r1
    506c:	e1 f0       	breq	.+56     	; 0x50a6 <H_LED_Void_LedInit+0x5a>
    506e:	2a 81       	ldd	r18, Y+2	; 0x02
    5070:	3b 81       	ldd	r19, Y+3	; 0x03
    5072:	23 30       	cpi	r18, 0x03	; 3
    5074:	31 05       	cpc	r19, r1
    5076:	34 f4       	brge	.+12     	; 0x5084 <H_LED_Void_LedInit+0x38>
    5078:	8a 81       	ldd	r24, Y+2	; 0x02
    507a:	9b 81       	ldd	r25, Y+3	; 0x03
    507c:	81 30       	cpi	r24, 0x01	; 1
    507e:	91 05       	cpc	r25, r1
    5080:	61 f0       	breq	.+24     	; 0x509a <H_LED_Void_LedInit+0x4e>
    5082:	22 c0       	rjmp	.+68     	; 0x50c8 <H_LED_Void_LedInit+0x7c>
    5084:	2a 81       	ldd	r18, Y+2	; 0x02
    5086:	3b 81       	ldd	r19, Y+3	; 0x03
    5088:	23 30       	cpi	r18, 0x03	; 3
    508a:	31 05       	cpc	r19, r1
    508c:	91 f0       	breq	.+36     	; 0x50b2 <H_LED_Void_LedInit+0x66>
    508e:	8a 81       	ldd	r24, Y+2	; 0x02
    5090:	9b 81       	ldd	r25, Y+3	; 0x03
    5092:	84 30       	cpi	r24, 0x04	; 4
    5094:	91 05       	cpc	r25, r1
    5096:	99 f0       	breq	.+38     	; 0x50be <H_LED_Void_LedInit+0x72>
    5098:	17 c0       	rjmp	.+46     	; 0x50c8 <H_LED_Void_LedInit+0x7c>
	{
	case BLU_LED: M_DIO_Void_SetPinDirection(LED_BLU_PORT,LED_BLU_PIN,OUTPUT); break;
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	65 e0       	ldi	r22, 0x05	; 5
    509e:	41 e0       	ldi	r20, 0x01	; 1
    50a0:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
    50a4:	11 c0       	rjmp	.+34     	; 0x50c8 <H_LED_Void_LedInit+0x7c>
	case GRN_LED: M_DIO_Void_SetPinDirection(LED_GRN_PORT,LED_GRN_PIN,OUTPUT); break;
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	64 e0       	ldi	r22, 0x04	; 4
    50aa:	41 e0       	ldi	r20, 0x01	; 1
    50ac:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
    50b0:	0b c0       	rjmp	.+22     	; 0x50c8 <H_LED_Void_LedInit+0x7c>
	case RED_LED: M_DIO_Void_SetPinDirection(LED_RED_PORT,LED_RED_PIN,OUTPUT); break;
    50b2:	82 e0       	ldi	r24, 0x02	; 2
    50b4:	67 e0       	ldi	r22, 0x07	; 7
    50b6:	41 e0       	ldi	r20, 0x01	; 1
    50b8:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
    50bc:	05 c0       	rjmp	.+10     	; 0x50c8 <H_LED_Void_LedInit+0x7c>
	case YELLOW_LED: M_DIO_Void_SetPinDirection(LED_YELLOW_PORT,LED_YELLOW_PIN,OUTPUT); break;
    50be:	81 e0       	ldi	r24, 0x01	; 1
    50c0:	66 e0       	ldi	r22, 0x06	; 6
    50c2:	41 e0       	ldi	r20, 0x01	; 1
    50c4:	0e 94 ba 1c 	call	0x3974	; 0x3974 <M_DIO_Void_SetPinDirection>
	default:                                                                   break;
	}
}
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	cf 91       	pop	r28
    50d0:	df 91       	pop	r29
    50d2:	08 95       	ret

000050d4 <H_LED_Void_LedOn>:
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    50d4:	df 93       	push	r29
    50d6:	cf 93       	push	r28
    50d8:	00 d0       	rcall	.+0      	; 0x50da <H_LED_Void_LedOn+0x6>
    50da:	0f 92       	push	r0
    50dc:	cd b7       	in	r28, 0x3d	; 61
    50de:	de b7       	in	r29, 0x3e	; 62
    50e0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    50e2:	89 81       	ldd	r24, Y+1	; 0x01
    50e4:	28 2f       	mov	r18, r24
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	3b 83       	std	Y+3, r19	; 0x03
    50ea:	2a 83       	std	Y+2, r18	; 0x02
    50ec:	8a 81       	ldd	r24, Y+2	; 0x02
    50ee:	9b 81       	ldd	r25, Y+3	; 0x03
    50f0:	82 30       	cpi	r24, 0x02	; 2
    50f2:	91 05       	cpc	r25, r1
    50f4:	e1 f0       	breq	.+56     	; 0x512e <H_LED_Void_LedOn+0x5a>
    50f6:	2a 81       	ldd	r18, Y+2	; 0x02
    50f8:	3b 81       	ldd	r19, Y+3	; 0x03
    50fa:	23 30       	cpi	r18, 0x03	; 3
    50fc:	31 05       	cpc	r19, r1
    50fe:	34 f4       	brge	.+12     	; 0x510c <H_LED_Void_LedOn+0x38>
    5100:	8a 81       	ldd	r24, Y+2	; 0x02
    5102:	9b 81       	ldd	r25, Y+3	; 0x03
    5104:	81 30       	cpi	r24, 0x01	; 1
    5106:	91 05       	cpc	r25, r1
    5108:	61 f0       	breq	.+24     	; 0x5122 <H_LED_Void_LedOn+0x4e>
    510a:	22 c0       	rjmp	.+68     	; 0x5150 <H_LED_Void_LedOn+0x7c>
    510c:	2a 81       	ldd	r18, Y+2	; 0x02
    510e:	3b 81       	ldd	r19, Y+3	; 0x03
    5110:	23 30       	cpi	r18, 0x03	; 3
    5112:	31 05       	cpc	r19, r1
    5114:	91 f0       	breq	.+36     	; 0x513a <H_LED_Void_LedOn+0x66>
    5116:	8a 81       	ldd	r24, Y+2	; 0x02
    5118:	9b 81       	ldd	r25, Y+3	; 0x03
    511a:	84 30       	cpi	r24, 0x04	; 4
    511c:	91 05       	cpc	r25, r1
    511e:	99 f0       	breq	.+38     	; 0x5146 <H_LED_Void_LedOn+0x72>
    5120:	17 c0       	rjmp	.+46     	; 0x5150 <H_LED_Void_LedOn+0x7c>
	{
	case BLU_LED: M_DIO_Void_SetPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH); break;
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	65 e0       	ldi	r22, 0x05	; 5
    5126:	41 e0       	ldi	r20, 0x01	; 1
    5128:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    512c:	11 c0       	rjmp	.+34     	; 0x5150 <H_LED_Void_LedOn+0x7c>
	case GRN_LED: M_DIO_Void_SetPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH); break;
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	64 e0       	ldi	r22, 0x04	; 4
    5132:	41 e0       	ldi	r20, 0x01	; 1
    5134:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    5138:	0b c0       	rjmp	.+22     	; 0x5150 <H_LED_Void_LedOn+0x7c>
	case RED_LED: M_DIO_Void_SetPinValue(LED_RED_PORT,LED_RED_PIN,HIGH); break;
    513a:	82 e0       	ldi	r24, 0x02	; 2
    513c:	67 e0       	ldi	r22, 0x07	; 7
    513e:	41 e0       	ldi	r20, 0x01	; 1
    5140:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    5144:	05 c0       	rjmp	.+10     	; 0x5150 <H_LED_Void_LedOn+0x7c>
	case YELLOW_LED: M_DIO_Void_SetPinValue(LED_YELLOW_PORT,LED_YELLOW_PIN,HIGH); break;
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	66 e0       	ldi	r22, 0x06	; 6
    514a:	41 e0       	ldi	r20, 0x01	; 1
    514c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	default:                                                             break;
	}
}
    5150:	0f 90       	pop	r0
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	cf 91       	pop	r28
    5158:	df 91       	pop	r29
    515a:	08 95       	ret

0000515c <H_LED_Void_LedOff>:
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    515c:	df 93       	push	r29
    515e:	cf 93       	push	r28
    5160:	00 d0       	rcall	.+0      	; 0x5162 <H_LED_Void_LedOff+0x6>
    5162:	0f 92       	push	r0
    5164:	cd b7       	in	r28, 0x3d	; 61
    5166:	de b7       	in	r29, 0x3e	; 62
    5168:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    516a:	89 81       	ldd	r24, Y+1	; 0x01
    516c:	28 2f       	mov	r18, r24
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	3b 83       	std	Y+3, r19	; 0x03
    5172:	2a 83       	std	Y+2, r18	; 0x02
    5174:	8a 81       	ldd	r24, Y+2	; 0x02
    5176:	9b 81       	ldd	r25, Y+3	; 0x03
    5178:	82 30       	cpi	r24, 0x02	; 2
    517a:	91 05       	cpc	r25, r1
    517c:	e1 f0       	breq	.+56     	; 0x51b6 <H_LED_Void_LedOff+0x5a>
    517e:	2a 81       	ldd	r18, Y+2	; 0x02
    5180:	3b 81       	ldd	r19, Y+3	; 0x03
    5182:	23 30       	cpi	r18, 0x03	; 3
    5184:	31 05       	cpc	r19, r1
    5186:	34 f4       	brge	.+12     	; 0x5194 <H_LED_Void_LedOff+0x38>
    5188:	8a 81       	ldd	r24, Y+2	; 0x02
    518a:	9b 81       	ldd	r25, Y+3	; 0x03
    518c:	81 30       	cpi	r24, 0x01	; 1
    518e:	91 05       	cpc	r25, r1
    5190:	61 f0       	breq	.+24     	; 0x51aa <H_LED_Void_LedOff+0x4e>
    5192:	22 c0       	rjmp	.+68     	; 0x51d8 <H_LED_Void_LedOff+0x7c>
    5194:	2a 81       	ldd	r18, Y+2	; 0x02
    5196:	3b 81       	ldd	r19, Y+3	; 0x03
    5198:	23 30       	cpi	r18, 0x03	; 3
    519a:	31 05       	cpc	r19, r1
    519c:	91 f0       	breq	.+36     	; 0x51c2 <H_LED_Void_LedOff+0x66>
    519e:	8a 81       	ldd	r24, Y+2	; 0x02
    51a0:	9b 81       	ldd	r25, Y+3	; 0x03
    51a2:	84 30       	cpi	r24, 0x04	; 4
    51a4:	91 05       	cpc	r25, r1
    51a6:	99 f0       	breq	.+38     	; 0x51ce <H_LED_Void_LedOff+0x72>
    51a8:	17 c0       	rjmp	.+46     	; 0x51d8 <H_LED_Void_LedOff+0x7c>
	{
	case BLU_LED: M_DIO_Void_SetPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW); break;
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	65 e0       	ldi	r22, 0x05	; 5
    51ae:	40 e0       	ldi	r20, 0x00	; 0
    51b0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    51b4:	11 c0       	rjmp	.+34     	; 0x51d8 <H_LED_Void_LedOff+0x7c>
	case GRN_LED: M_DIO_Void_SetPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW); break;
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	64 e0       	ldi	r22, 0x04	; 4
    51ba:	40 e0       	ldi	r20, 0x00	; 0
    51bc:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    51c0:	0b c0       	rjmp	.+22     	; 0x51d8 <H_LED_Void_LedOff+0x7c>
	case RED_LED: M_DIO_Void_SetPinValue(LED_RED_PORT,LED_RED_PIN,LOW); break;
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	67 e0       	ldi	r22, 0x07	; 7
    51c6:	40 e0       	ldi	r20, 0x00	; 0
    51c8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
    51cc:	05 c0       	rjmp	.+10     	; 0x51d8 <H_LED_Void_LedOff+0x7c>
	case YELLOW_LED: M_DIO_Void_SetPinValue(LED_YELLOW_PORT,LED_YELLOW_PIN,LOW); break;
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	66 e0       	ldi	r22, 0x06	; 6
    51d2:	40 e0       	ldi	r20, 0x00	; 0
    51d4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <M_DIO_Void_SetPinValue>
	default:                                                            break;
	}
}
    51d8:	0f 90       	pop	r0
    51da:	0f 90       	pop	r0
    51dc:	0f 90       	pop	r0
    51de:	cf 91       	pop	r28
    51e0:	df 91       	pop	r29
    51e2:	08 95       	ret

000051e4 <H_LED_Void_LedTog>:
	_delay_ms(LED_TIME_ON);
	M_DIO_Void_SetPinValue(LED_PORT,LED_PIN,LOW);
}
*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    51e4:	df 93       	push	r29
    51e6:	cf 93       	push	r28
    51e8:	00 d0       	rcall	.+0      	; 0x51ea <H_LED_Void_LedTog+0x6>
    51ea:	0f 92       	push	r0
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
    51f0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    51f2:	89 81       	ldd	r24, Y+1	; 0x01
    51f4:	28 2f       	mov	r18, r24
    51f6:	30 e0       	ldi	r19, 0x00	; 0
    51f8:	3b 83       	std	Y+3, r19	; 0x03
    51fa:	2a 83       	std	Y+2, r18	; 0x02
    51fc:	8a 81       	ldd	r24, Y+2	; 0x02
    51fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5200:	82 30       	cpi	r24, 0x02	; 2
    5202:	91 05       	cpc	r25, r1
    5204:	d9 f0       	breq	.+54     	; 0x523c <H_LED_Void_LedTog+0x58>
    5206:	2a 81       	ldd	r18, Y+2	; 0x02
    5208:	3b 81       	ldd	r19, Y+3	; 0x03
    520a:	23 30       	cpi	r18, 0x03	; 3
    520c:	31 05       	cpc	r19, r1
    520e:	34 f4       	brge	.+12     	; 0x521c <H_LED_Void_LedTog+0x38>
    5210:	8a 81       	ldd	r24, Y+2	; 0x02
    5212:	9b 81       	ldd	r25, Y+3	; 0x03
    5214:	81 30       	cpi	r24, 0x01	; 1
    5216:	91 05       	cpc	r25, r1
    5218:	61 f0       	breq	.+24     	; 0x5232 <H_LED_Void_LedTog+0x4e>
    521a:	1e c0       	rjmp	.+60     	; 0x5258 <H_LED_Void_LedTog+0x74>
    521c:	2a 81       	ldd	r18, Y+2	; 0x02
    521e:	3b 81       	ldd	r19, Y+3	; 0x03
    5220:	23 30       	cpi	r18, 0x03	; 3
    5222:	31 05       	cpc	r19, r1
    5224:	81 f0       	breq	.+32     	; 0x5246 <H_LED_Void_LedTog+0x62>
    5226:	8a 81       	ldd	r24, Y+2	; 0x02
    5228:	9b 81       	ldd	r25, Y+3	; 0x03
    522a:	84 30       	cpi	r24, 0x04	; 4
    522c:	91 05       	cpc	r25, r1
    522e:	81 f0       	breq	.+32     	; 0x5250 <H_LED_Void_LedTog+0x6c>
    5230:	13 c0       	rjmp	.+38     	; 0x5258 <H_LED_Void_LedTog+0x74>
	{
	case BLU_LED: M_DIO_Void_TogPin(LED_BLU_PORT,LED_BLU_PIN); break;
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	65 e0       	ldi	r22, 0x05	; 5
    5236:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <M_DIO_Void_TogPin>
    523a:	0e c0       	rjmp	.+28     	; 0x5258 <H_LED_Void_LedTog+0x74>
	case GRN_LED: M_DIO_Void_TogPin(LED_GRN_PORT,LED_GRN_PIN); break;
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	64 e0       	ldi	r22, 0x04	; 4
    5240:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <M_DIO_Void_TogPin>
    5244:	09 c0       	rjmp	.+18     	; 0x5258 <H_LED_Void_LedTog+0x74>
	case RED_LED: M_DIO_Void_TogPin(LED_RED_PORT,LED_RED_PIN); break;
    5246:	82 e0       	ldi	r24, 0x02	; 2
    5248:	67 e0       	ldi	r22, 0x07	; 7
    524a:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <M_DIO_Void_TogPin>
    524e:	04 c0       	rjmp	.+8      	; 0x5258 <H_LED_Void_LedTog+0x74>
	case YELLOW_LED: M_DIO_Void_TogPin(LED_YELLOW_PORT,LED_YELLOW_PIN); break;
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	66 e0       	ldi	r22, 0x06	; 6
    5254:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <M_DIO_Void_TogPin>
	default:                                                   break;
	}
}
    5258:	0f 90       	pop	r0
    525a:	0f 90       	pop	r0
    525c:	0f 90       	pop	r0
    525e:	cf 91       	pop	r28
    5260:	df 91       	pop	r29
    5262:	08 95       	ret

00005264 <H_POt_Void_POTInit>:
#include "POT_Interface.h"
#include "ADC_Interface.h"


void H_POt_Void_POTInit(void)
{
    5264:	df 93       	push	r29
    5266:	cf 93       	push	r28
    5268:	cd b7       	in	r28, 0x3d	; 61
    526a:	de b7       	in	r29, 0x3e	; 62
	M_ADC_Void_ADCInit();
    526c:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <M_ADC_Void_ADCInit>
}
    5270:	cf 91       	pop	r28
    5272:	df 91       	pop	r29
    5274:	08 95       	ret

00005276 <H_POT_Void_POTRead>:
void H_POT_Void_POTRead(u16*Copy_U16_Ptr)
{
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	00 d0       	rcall	.+0      	; 0x527c <H_POT_Void_POTRead+0x6>
    527c:	00 d0       	rcall	.+0      	; 0x527e <H_POT_Void_POTRead+0x8>
    527e:	cd b7       	in	r28, 0x3d	; 61
    5280:	de b7       	in	r29, 0x3e	; 62
    5282:	9c 83       	std	Y+4, r25	; 0x04
    5284:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16_ADCReading = 0;
    5286:	1a 82       	std	Y+2, r1	; 0x02
    5288:	19 82       	std	Y+1, r1	; 0x01
	Local_U16_ADCReading     = M_ADC_U16_ADCRead(POT_CHANNEL);
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	0e 94 29 1b 	call	0x3652	; 0x3652 <M_ADC_U16_ADCRead>
    5290:	9a 83       	std	Y+2, r25	; 0x02
    5292:	89 83       	std	Y+1, r24	; 0x01
	*Copy_U16_Ptr            = (u16)((u32)Local_U16_ADCReading * 200 ) / 1023;
    5294:	89 81       	ldd	r24, Y+1	; 0x01
    5296:	9a 81       	ldd	r25, Y+2	; 0x02
    5298:	cc 01       	movw	r24, r24
    529a:	a0 e0       	ldi	r26, 0x00	; 0
    529c:	b0 e0       	ldi	r27, 0x00	; 0
    529e:	28 ec       	ldi	r18, 0xC8	; 200
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	40 e0       	ldi	r20, 0x00	; 0
    52a4:	50 e0       	ldi	r21, 0x00	; 0
    52a6:	bc 01       	movw	r22, r24
    52a8:	cd 01       	movw	r24, r26
    52aa:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__mulsi3>
    52ae:	dc 01       	movw	r26, r24
    52b0:	cb 01       	movw	r24, r22
    52b2:	2f ef       	ldi	r18, 0xFF	; 255
    52b4:	33 e0       	ldi	r19, 0x03	; 3
    52b6:	b9 01       	movw	r22, r18
    52b8:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__udivmodhi4>
    52bc:	cb 01       	movw	r24, r22
    52be:	eb 81       	ldd	r30, Y+3	; 0x03
    52c0:	fc 81       	ldd	r31, Y+4	; 0x04
    52c2:	91 83       	std	Z+1, r25	; 0x01
    52c4:	80 83       	st	Z, r24
	if(*Copy_U16_Ptr>200)
    52c6:	eb 81       	ldd	r30, Y+3	; 0x03
    52c8:	fc 81       	ldd	r31, Y+4	; 0x04
    52ca:	80 81       	ld	r24, Z
    52cc:	91 81       	ldd	r25, Z+1	; 0x01
    52ce:	89 3c       	cpi	r24, 0xC9	; 201
    52d0:	91 05       	cpc	r25, r1
    52d2:	30 f0       	brcs	.+12     	; 0x52e0 <H_POT_Void_POTRead+0x6a>
	{
		*Copy_U16_Ptr=200;
    52d4:	eb 81       	ldd	r30, Y+3	; 0x03
    52d6:	fc 81       	ldd	r31, Y+4	; 0x04
    52d8:	88 ec       	ldi	r24, 0xC8	; 200
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	91 83       	std	Z+1, r25	; 0x01
    52de:	80 83       	st	Z, r24
	}
}
    52e0:	0f 90       	pop	r0
    52e2:	0f 90       	pop	r0
    52e4:	0f 90       	pop	r0
    52e6:	0f 90       	pop	r0
    52e8:	cf 91       	pop	r28
    52ea:	df 91       	pop	r29
    52ec:	08 95       	ret

000052ee <M_Timer1_Void_SetCallBack>:
/*--------------------------------------------------------------------------------------------*/
void(*Timer_CallBack)(void);


void M_Timer1_Void_SetCallBack(void(*Copy_Ptr)(void))
{
    52ee:	df 93       	push	r29
    52f0:	cf 93       	push	r28
    52f2:	00 d0       	rcall	.+0      	; 0x52f4 <M_Timer1_Void_SetCallBack+0x6>
    52f4:	cd b7       	in	r28, 0x3d	; 61
    52f6:	de b7       	in	r29, 0x3e	; 62
    52f8:	9a 83       	std	Y+2, r25	; 0x02
    52fa:	89 83       	std	Y+1, r24	; 0x01
	Timer_CallBack = Copy_Ptr;
    52fc:	89 81       	ldd	r24, Y+1	; 0x01
    52fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5300:	90 93 69 01 	sts	0x0169, r25
    5304:	80 93 68 01 	sts	0x0168, r24
}
    5308:	0f 90       	pop	r0
    530a:	0f 90       	pop	r0
    530c:	cf 91       	pop	r28
    530e:	df 91       	pop	r29
    5310:	08 95       	ret

00005312 <M_Timer1_CTCMode_Init>:


void M_Timer1_CTCMode_Init(void)
{
    5312:	df 93       	push	r29
    5314:	cf 93       	push	r28
    5316:	cd b7       	in	r28, 0x3d	; 61
    5318:	de b7       	in	r29, 0x3e	; 62
	 * TCNT1 =0
	 * OCR1A = top --> (15625 to generate interrupt each 1 sec)
	 * Output Compare A Match Interrupt Enable
	 * 		OCIE1A =1
	 */
	TCNT1_REG  = 0;
    531a:	ec e4       	ldi	r30, 0x4C	; 76
    531c:	f0 e0       	ldi	r31, 0x00	; 0
    531e:	11 82       	std	Z+1, r1	; 0x01
    5320:	10 82       	st	Z, r1
	OCR1A_REG  = 15625;
    5322:	ea e4       	ldi	r30, 0x4A	; 74
    5324:	f0 e0       	ldi	r31, 0x00	; 0
    5326:	89 e0       	ldi	r24, 0x09	; 9
    5328:	9d e3       	ldi	r25, 0x3D	; 61
    532a:	91 83       	std	Z+1, r25	; 0x01
    532c:	80 83       	st	Z, r24
	TIMSK_REG |= (1<<OCIE1A_BIT);
    532e:	a9 e5       	ldi	r26, 0x59	; 89
    5330:	b0 e0       	ldi	r27, 0x00	; 0
    5332:	e9 e5       	ldi	r30, 0x59	; 89
    5334:	f0 e0       	ldi	r31, 0x00	; 0
    5336:	80 81       	ld	r24, Z
    5338:	80 61       	ori	r24, 0x10	; 16
    533a:	8c 93       	st	X, r24

	TCCR1A_REG |= (1<<FOC1A_BIT);
    533c:	af e4       	ldi	r26, 0x4F	; 79
    533e:	b0 e0       	ldi	r27, 0x00	; 0
    5340:	ef e4       	ldi	r30, 0x4F	; 79
    5342:	f0 e0       	ldi	r31, 0x00	; 0
    5344:	80 81       	ld	r24, Z
    5346:	88 60       	ori	r24, 0x08	; 8
    5348:	8c 93       	st	X, r24
	TCCR1B_REG |= (1<<WGM12_BIT) |(1<<CS12_BIT) |(1<<CS10_BIT);
    534a:	ae e4       	ldi	r26, 0x4E	; 78
    534c:	b0 e0       	ldi	r27, 0x00	; 0
    534e:	ee e4       	ldi	r30, 0x4E	; 78
    5350:	f0 e0       	ldi	r31, 0x00	; 0
    5352:	80 81       	ld	r24, Z
    5354:	8d 60       	ori	r24, 0x0D	; 13
    5356:	8c 93       	st	X, r24
}
    5358:	cf 91       	pop	r28
    535a:	df 91       	pop	r29
    535c:	08 95       	ret

0000535e <M_Timer1_Void_Timer1DeInit>:

void M_Timer1_Void_Timer1DeInit(void)
{
    535e:	df 93       	push	r29
    5360:	cf 93       	push	r28
    5362:	cd b7       	in	r28, 0x3d	; 61
    5364:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG =0;
    5366:	ec e4       	ldi	r30, 0x4C	; 76
    5368:	f0 e0       	ldi	r31, 0x00	; 0
    536a:	11 82       	std	Z+1, r1	; 0x01
    536c:	10 82       	st	Z, r1
	TIMSK_REG &=~(1<<OCIE1A_BIT);
    536e:	a9 e5       	ldi	r26, 0x59	; 89
    5370:	b0 e0       	ldi	r27, 0x00	; 0
    5372:	e9 e5       	ldi	r30, 0x59	; 89
    5374:	f0 e0       	ldi	r31, 0x00	; 0
    5376:	80 81       	ld	r24, Z
    5378:	8f 7e       	andi	r24, 0xEF	; 239
    537a:	8c 93       	st	X, r24
	OCR1A_REG =0;
    537c:	ea e4       	ldi	r30, 0x4A	; 74
    537e:	f0 e0       	ldi	r31, 0x00	; 0
    5380:	11 82       	std	Z+1, r1	; 0x01
    5382:	10 82       	st	Z, r1
}
    5384:	cf 91       	pop	r28
    5386:	df 91       	pop	r29
    5388:	08 95       	ret

0000538a <__vector_7>:
void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ;
void __vector_7 (void)
{
    538a:	1f 92       	push	r1
    538c:	0f 92       	push	r0
    538e:	0f b6       	in	r0, 0x3f	; 63
    5390:	0f 92       	push	r0
    5392:	11 24       	eor	r1, r1
    5394:	2f 93       	push	r18
    5396:	3f 93       	push	r19
    5398:	4f 93       	push	r20
    539a:	5f 93       	push	r21
    539c:	6f 93       	push	r22
    539e:	7f 93       	push	r23
    53a0:	8f 93       	push	r24
    53a2:	9f 93       	push	r25
    53a4:	af 93       	push	r26
    53a6:	bf 93       	push	r27
    53a8:	ef 93       	push	r30
    53aa:	ff 93       	push	r31
    53ac:	df 93       	push	r29
    53ae:	cf 93       	push	r28
    53b0:	cd b7       	in	r28, 0x3d	; 61
    53b2:	de b7       	in	r29, 0x3e	; 62
	Timer_CallBack();
    53b4:	e0 91 68 01 	lds	r30, 0x0168
    53b8:	f0 91 69 01 	lds	r31, 0x0169
    53bc:	09 95       	icall
}
    53be:	cf 91       	pop	r28
    53c0:	df 91       	pop	r29
    53c2:	ff 91       	pop	r31
    53c4:	ef 91       	pop	r30
    53c6:	bf 91       	pop	r27
    53c8:	af 91       	pop	r26
    53ca:	9f 91       	pop	r25
    53cc:	8f 91       	pop	r24
    53ce:	7f 91       	pop	r23
    53d0:	6f 91       	pop	r22
    53d2:	5f 91       	pop	r21
    53d4:	4f 91       	pop	r20
    53d6:	3f 91       	pop	r19
    53d8:	2f 91       	pop	r18
    53da:	0f 90       	pop	r0
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	0f 90       	pop	r0
    53e0:	1f 90       	pop	r1
    53e2:	18 95       	reti

000053e4 <main>:
#include "util/delay.h"
#include "STD.h"
#include "BitMath.h"

int main()
{
    53e4:	df 93       	push	r29
    53e6:	cf 93       	push	r28
    53e8:	cd b7       	in	r28, 0x3d	; 61
    53ea:	de b7       	in	r29, 0x3e	; 62
    53ec:	61 97       	sbiw	r28, 0x11	; 17
    53ee:	0f b6       	in	r0, 0x3f	; 63
    53f0:	f8 94       	cli
    53f2:	de bf       	out	0x3e, r29	; 62
    53f4:	0f be       	out	0x3f, r0	; 63
    53f6:	cd bf       	out	0x3d, r28	; 61
	u8 Switch_Flag=0;
    53f8:	1f 86       	std	Y+15, r1	; 0x0f
	A_CSS_void_Init();
    53fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <A_CSS_void_Init>
    53fe:	80 e0       	ldi	r24, 0x00	; 0
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	aa ef       	ldi	r26, 0xFA	; 250
    5404:	b3 e4       	ldi	r27, 0x43	; 67
    5406:	8b 87       	std	Y+11, r24	; 0x0b
    5408:	9c 87       	std	Y+12, r25	; 0x0c
    540a:	ad 87       	std	Y+13, r26	; 0x0d
    540c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    540e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5410:	7c 85       	ldd	r23, Y+12	; 0x0c
    5412:	8d 85       	ldd	r24, Y+13	; 0x0d
    5414:	9e 85       	ldd	r25, Y+14	; 0x0e
    5416:	20 e0       	ldi	r18, 0x00	; 0
    5418:	30 e0       	ldi	r19, 0x00	; 0
    541a:	4a e7       	ldi	r20, 0x7A	; 122
    541c:	55 e4       	ldi	r21, 0x45	; 69
    541e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5422:	dc 01       	movw	r26, r24
    5424:	cb 01       	movw	r24, r22
    5426:	8f 83       	std	Y+7, r24	; 0x07
    5428:	98 87       	std	Y+8, r25	; 0x08
    542a:	a9 87       	std	Y+9, r26	; 0x09
    542c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    542e:	6f 81       	ldd	r22, Y+7	; 0x07
    5430:	78 85       	ldd	r23, Y+8	; 0x08
    5432:	89 85       	ldd	r24, Y+9	; 0x09
    5434:	9a 85       	ldd	r25, Y+10	; 0x0a
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	30 e0       	ldi	r19, 0x00	; 0
    543a:	40 e8       	ldi	r20, 0x80	; 128
    543c:	5f e3       	ldi	r21, 0x3F	; 63
    543e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5442:	88 23       	and	r24, r24
    5444:	2c f4       	brge	.+10     	; 0x5450 <main+0x6c>
		__ticks = 1;
    5446:	81 e0       	ldi	r24, 0x01	; 1
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	9e 83       	std	Y+6, r25	; 0x06
    544c:	8d 83       	std	Y+5, r24	; 0x05
    544e:	3f c0       	rjmp	.+126    	; 0x54ce <main+0xea>
	else if (__tmp > 65535)
    5450:	6f 81       	ldd	r22, Y+7	; 0x07
    5452:	78 85       	ldd	r23, Y+8	; 0x08
    5454:	89 85       	ldd	r24, Y+9	; 0x09
    5456:	9a 85       	ldd	r25, Y+10	; 0x0a
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	3f ef       	ldi	r19, 0xFF	; 255
    545c:	4f e7       	ldi	r20, 0x7F	; 127
    545e:	57 e4       	ldi	r21, 0x47	; 71
    5460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5464:	18 16       	cp	r1, r24
    5466:	4c f5       	brge	.+82     	; 0x54ba <main+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5468:	6b 85       	ldd	r22, Y+11	; 0x0b
    546a:	7c 85       	ldd	r23, Y+12	; 0x0c
    546c:	8d 85       	ldd	r24, Y+13	; 0x0d
    546e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	40 e2       	ldi	r20, 0x20	; 32
    5476:	51 e4       	ldi	r21, 0x41	; 65
    5478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    547c:	dc 01       	movw	r26, r24
    547e:	cb 01       	movw	r24, r22
    5480:	bc 01       	movw	r22, r24
    5482:	cd 01       	movw	r24, r26
    5484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5488:	dc 01       	movw	r26, r24
    548a:	cb 01       	movw	r24, r22
    548c:	9e 83       	std	Y+6, r25	; 0x06
    548e:	8d 83       	std	Y+5, r24	; 0x05
    5490:	0f c0       	rjmp	.+30     	; 0x54b0 <main+0xcc>
    5492:	80 e9       	ldi	r24, 0x90	; 144
    5494:	91 e0       	ldi	r25, 0x01	; 1
    5496:	9c 83       	std	Y+4, r25	; 0x04
    5498:	8b 83       	std	Y+3, r24	; 0x03
    549a:	8b 81       	ldd	r24, Y+3	; 0x03
    549c:	9c 81       	ldd	r25, Y+4	; 0x04
    549e:	01 97       	sbiw	r24, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <main+0xba>
    54a2:	9c 83       	std	Y+4, r25	; 0x04
    54a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54a6:	8d 81       	ldd	r24, Y+5	; 0x05
    54a8:	9e 81       	ldd	r25, Y+6	; 0x06
    54aa:	01 97       	sbiw	r24, 0x01	; 1
    54ac:	9e 83       	std	Y+6, r25	; 0x06
    54ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54b0:	8d 81       	ldd	r24, Y+5	; 0x05
    54b2:	9e 81       	ldd	r25, Y+6	; 0x06
    54b4:	00 97       	sbiw	r24, 0x00	; 0
    54b6:	69 f7       	brne	.-38     	; 0x5492 <main+0xae>
    54b8:	14 c0       	rjmp	.+40     	; 0x54e2 <main+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54ba:	6f 81       	ldd	r22, Y+7	; 0x07
    54bc:	78 85       	ldd	r23, Y+8	; 0x08
    54be:	89 85       	ldd	r24, Y+9	; 0x09
    54c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c6:	dc 01       	movw	r26, r24
    54c8:	cb 01       	movw	r24, r22
    54ca:	9e 83       	std	Y+6, r25	; 0x06
    54cc:	8d 83       	std	Y+5, r24	; 0x05
    54ce:	8d 81       	ldd	r24, Y+5	; 0x05
    54d0:	9e 81       	ldd	r25, Y+6	; 0x06
    54d2:	9a 83       	std	Y+2, r25	; 0x02
    54d4:	89 83       	std	Y+1, r24	; 0x01
    54d6:	89 81       	ldd	r24, Y+1	; 0x01
    54d8:	9a 81       	ldd	r25, Y+2	; 0x02
    54da:	01 97       	sbiw	r24, 0x01	; 1
    54dc:	f1 f7       	brne	.-4      	; 0x54da <main+0xf6>
    54de:	9a 83       	std	Y+2, r25	; 0x02
    54e0:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		_delay_ms(500);
		Switch_Flag=A_ADAS_Void_KeyPadUpdate();
    54e2:	0e 94 c9 06 	call	0xd92	; 0xd92 <A_ADAS_Void_KeyPadUpdate>
    54e6:	8f 87       	std	Y+15, r24	; 0x0f
		switch(Switch_Flag)
    54e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    54ea:	28 2f       	mov	r18, r24
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	39 8b       	std	Y+17, r19	; 0x11
    54f0:	28 8b       	std	Y+16, r18	; 0x10
    54f2:	88 89       	ldd	r24, Y+16	; 0x10
    54f4:	99 89       	ldd	r25, Y+17	; 0x11
    54f6:	84 30       	cpi	r24, 0x04	; 4
    54f8:	91 05       	cpc	r25, r1
    54fa:	71 f1       	breq	.+92     	; 0x5558 <main+0x174>
    54fc:	28 89       	ldd	r18, Y+16	; 0x10
    54fe:	39 89       	ldd	r19, Y+17	; 0x11
    5500:	25 30       	cpi	r18, 0x05	; 5
    5502:	31 05       	cpc	r19, r1
    5504:	84 f4       	brge	.+32     	; 0x5526 <main+0x142>
    5506:	88 89       	ldd	r24, Y+16	; 0x10
    5508:	99 89       	ldd	r25, Y+17	; 0x11
    550a:	82 30       	cpi	r24, 0x02	; 2
    550c:	91 05       	cpc	r25, r1
    550e:	f1 f0       	breq	.+60     	; 0x554c <main+0x168>
    5510:	28 89       	ldd	r18, Y+16	; 0x10
    5512:	39 89       	ldd	r19, Y+17	; 0x11
    5514:	23 30       	cpi	r18, 0x03	; 3
    5516:	31 05       	cpc	r19, r1
    5518:	e4 f4       	brge	.+56     	; 0x5552 <main+0x16e>
    551a:	88 89       	ldd	r24, Y+16	; 0x10
    551c:	99 89       	ldd	r25, Y+17	; 0x11
    551e:	81 30       	cpi	r24, 0x01	; 1
    5520:	91 05       	cpc	r25, r1
    5522:	89 f0       	breq	.+34     	; 0x5546 <main+0x162>
    5524:	6c cf       	rjmp	.-296    	; 0x53fe <main+0x1a>
    5526:	28 89       	ldd	r18, Y+16	; 0x10
    5528:	39 89       	ldd	r19, Y+17	; 0x11
    552a:	26 30       	cpi	r18, 0x06	; 6
    552c:	31 05       	cpc	r19, r1
    552e:	d1 f0       	breq	.+52     	; 0x5564 <main+0x180>
    5530:	88 89       	ldd	r24, Y+16	; 0x10
    5532:	99 89       	ldd	r25, Y+17	; 0x11
    5534:	86 30       	cpi	r24, 0x06	; 6
    5536:	91 05       	cpc	r25, r1
    5538:	94 f0       	brlt	.+36     	; 0x555e <main+0x17a>
    553a:	28 89       	ldd	r18, Y+16	; 0x10
    553c:	39 89       	ldd	r19, Y+17	; 0x11
    553e:	27 30       	cpi	r18, 0x07	; 7
    5540:	31 05       	cpc	r19, r1
    5542:	99 f0       	breq	.+38     	; 0x556a <main+0x186>
    5544:	5c cf       	rjmp	.-328    	; 0x53fe <main+0x1a>
		{
		case(1):
				A_CSS_VoidUpdateTask();
    5546:	0e 94 55 08 	call	0x10aa	; 0x10aa <A_CSS_VoidUpdateTask>
    554a:	59 cf       	rjmp	.-334    	; 0x53fe <main+0x1a>
				break;
		case(2):
				A_BAS_VoidUpdateTask();
    554c:	0e 94 38 09 	call	0x1270	; 0x1270 <A_BAS_VoidUpdateTask>
    5550:	56 cf       	rjmp	.-340    	; 0x53fe <main+0x1a>
				break;
		case(3):
				A_SL_VoidUpdateTask();
    5552:	0e 94 62 09 	call	0x12c4	; 0x12c4 <A_SL_VoidUpdateTask>
    5556:	53 cf       	rjmp	.-346    	; 0x53fe <main+0x1a>
				break;
		case(4):
				A_SL_VoidIncreaseFunction();
    5558:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <A_SL_VoidIncreaseFunction>
    555c:	50 cf       	rjmp	.-352    	; 0x53fe <main+0x1a>
				break;
		case(5):
				A_SL_VoidDecreaseFunction();
    555e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <A_SL_VoidDecreaseFunction>
    5562:	4d cf       	rjmp	.-358    	; 0x53fe <main+0x1a>
		        break;
		case(6):
				A_LCD_Void_SwitchTask();
    5564:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <A_LCD_Void_SwitchTask>
    5568:	4a cf       	rjmp	.-364    	; 0x53fe <main+0x1a>
		break;
		case(7):
				A_DM_VoidUpdateTask();
    556a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <A_DM_VoidUpdateTask>
    556e:	47 cf       	rjmp	.-370    	; 0x53fe <main+0x1a>

00005570 <__mulsi3>:
    5570:	62 9f       	mul	r22, r18
    5572:	d0 01       	movw	r26, r0
    5574:	73 9f       	mul	r23, r19
    5576:	f0 01       	movw	r30, r0
    5578:	82 9f       	mul	r24, r18
    557a:	e0 0d       	add	r30, r0
    557c:	f1 1d       	adc	r31, r1
    557e:	64 9f       	mul	r22, r20
    5580:	e0 0d       	add	r30, r0
    5582:	f1 1d       	adc	r31, r1
    5584:	92 9f       	mul	r25, r18
    5586:	f0 0d       	add	r31, r0
    5588:	83 9f       	mul	r24, r19
    558a:	f0 0d       	add	r31, r0
    558c:	74 9f       	mul	r23, r20
    558e:	f0 0d       	add	r31, r0
    5590:	65 9f       	mul	r22, r21
    5592:	f0 0d       	add	r31, r0
    5594:	99 27       	eor	r25, r25
    5596:	72 9f       	mul	r23, r18
    5598:	b0 0d       	add	r27, r0
    559a:	e1 1d       	adc	r30, r1
    559c:	f9 1f       	adc	r31, r25
    559e:	63 9f       	mul	r22, r19
    55a0:	b0 0d       	add	r27, r0
    55a2:	e1 1d       	adc	r30, r1
    55a4:	f9 1f       	adc	r31, r25
    55a6:	bd 01       	movw	r22, r26
    55a8:	cf 01       	movw	r24, r30
    55aa:	11 24       	eor	r1, r1
    55ac:	08 95       	ret

000055ae <__udivmodhi4>:
    55ae:	aa 1b       	sub	r26, r26
    55b0:	bb 1b       	sub	r27, r27
    55b2:	51 e1       	ldi	r21, 0x11	; 17
    55b4:	07 c0       	rjmp	.+14     	; 0x55c4 <__udivmodhi4_ep>

000055b6 <__udivmodhi4_loop>:
    55b6:	aa 1f       	adc	r26, r26
    55b8:	bb 1f       	adc	r27, r27
    55ba:	a6 17       	cp	r26, r22
    55bc:	b7 07       	cpc	r27, r23
    55be:	10 f0       	brcs	.+4      	; 0x55c4 <__udivmodhi4_ep>
    55c0:	a6 1b       	sub	r26, r22
    55c2:	b7 0b       	sbc	r27, r23

000055c4 <__udivmodhi4_ep>:
    55c4:	88 1f       	adc	r24, r24
    55c6:	99 1f       	adc	r25, r25
    55c8:	5a 95       	dec	r21
    55ca:	a9 f7       	brne	.-22     	; 0x55b6 <__udivmodhi4_loop>
    55cc:	80 95       	com	r24
    55ce:	90 95       	com	r25
    55d0:	bc 01       	movw	r22, r24
    55d2:	cd 01       	movw	r24, r26
    55d4:	08 95       	ret

000055d6 <__udivmodsi4>:
    55d6:	a1 e2       	ldi	r26, 0x21	; 33
    55d8:	1a 2e       	mov	r1, r26
    55da:	aa 1b       	sub	r26, r26
    55dc:	bb 1b       	sub	r27, r27
    55de:	fd 01       	movw	r30, r26
    55e0:	0d c0       	rjmp	.+26     	; 0x55fc <__udivmodsi4_ep>

000055e2 <__udivmodsi4_loop>:
    55e2:	aa 1f       	adc	r26, r26
    55e4:	bb 1f       	adc	r27, r27
    55e6:	ee 1f       	adc	r30, r30
    55e8:	ff 1f       	adc	r31, r31
    55ea:	a2 17       	cp	r26, r18
    55ec:	b3 07       	cpc	r27, r19
    55ee:	e4 07       	cpc	r30, r20
    55f0:	f5 07       	cpc	r31, r21
    55f2:	20 f0       	brcs	.+8      	; 0x55fc <__udivmodsi4_ep>
    55f4:	a2 1b       	sub	r26, r18
    55f6:	b3 0b       	sbc	r27, r19
    55f8:	e4 0b       	sbc	r30, r20
    55fa:	f5 0b       	sbc	r31, r21

000055fc <__udivmodsi4_ep>:
    55fc:	66 1f       	adc	r22, r22
    55fe:	77 1f       	adc	r23, r23
    5600:	88 1f       	adc	r24, r24
    5602:	99 1f       	adc	r25, r25
    5604:	1a 94       	dec	r1
    5606:	69 f7       	brne	.-38     	; 0x55e2 <__udivmodsi4_loop>
    5608:	60 95       	com	r22
    560a:	70 95       	com	r23
    560c:	80 95       	com	r24
    560e:	90 95       	com	r25
    5610:	9b 01       	movw	r18, r22
    5612:	ac 01       	movw	r20, r24
    5614:	bd 01       	movw	r22, r26
    5616:	cf 01       	movw	r24, r30
    5618:	08 95       	ret

0000561a <__prologue_saves__>:
    561a:	2f 92       	push	r2
    561c:	3f 92       	push	r3
    561e:	4f 92       	push	r4
    5620:	5f 92       	push	r5
    5622:	6f 92       	push	r6
    5624:	7f 92       	push	r7
    5626:	8f 92       	push	r8
    5628:	9f 92       	push	r9
    562a:	af 92       	push	r10
    562c:	bf 92       	push	r11
    562e:	cf 92       	push	r12
    5630:	df 92       	push	r13
    5632:	ef 92       	push	r14
    5634:	ff 92       	push	r15
    5636:	0f 93       	push	r16
    5638:	1f 93       	push	r17
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	cd b7       	in	r28, 0x3d	; 61
    5640:	de b7       	in	r29, 0x3e	; 62
    5642:	ca 1b       	sub	r28, r26
    5644:	db 0b       	sbc	r29, r27
    5646:	0f b6       	in	r0, 0x3f	; 63
    5648:	f8 94       	cli
    564a:	de bf       	out	0x3e, r29	; 62
    564c:	0f be       	out	0x3f, r0	; 63
    564e:	cd bf       	out	0x3d, r28	; 61
    5650:	09 94       	ijmp

00005652 <__epilogue_restores__>:
    5652:	2a 88       	ldd	r2, Y+18	; 0x12
    5654:	39 88       	ldd	r3, Y+17	; 0x11
    5656:	48 88       	ldd	r4, Y+16	; 0x10
    5658:	5f 84       	ldd	r5, Y+15	; 0x0f
    565a:	6e 84       	ldd	r6, Y+14	; 0x0e
    565c:	7d 84       	ldd	r7, Y+13	; 0x0d
    565e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5660:	9b 84       	ldd	r9, Y+11	; 0x0b
    5662:	aa 84       	ldd	r10, Y+10	; 0x0a
    5664:	b9 84       	ldd	r11, Y+9	; 0x09
    5666:	c8 84       	ldd	r12, Y+8	; 0x08
    5668:	df 80       	ldd	r13, Y+7	; 0x07
    566a:	ee 80       	ldd	r14, Y+6	; 0x06
    566c:	fd 80       	ldd	r15, Y+5	; 0x05
    566e:	0c 81       	ldd	r16, Y+4	; 0x04
    5670:	1b 81       	ldd	r17, Y+3	; 0x03
    5672:	aa 81       	ldd	r26, Y+2	; 0x02
    5674:	b9 81       	ldd	r27, Y+1	; 0x01
    5676:	ce 0f       	add	r28, r30
    5678:	d1 1d       	adc	r29, r1
    567a:	0f b6       	in	r0, 0x3f	; 63
    567c:	f8 94       	cli
    567e:	de bf       	out	0x3e, r29	; 62
    5680:	0f be       	out	0x3f, r0	; 63
    5682:	cd bf       	out	0x3d, r28	; 61
    5684:	ed 01       	movw	r28, r26
    5686:	08 95       	ret

00005688 <_exit>:
    5688:	f8 94       	cli

0000568a <__stop_program>:
    568a:	ff cf       	rjmp	.-2      	; 0x568a <__stop_program>
